syntax = "proto3";

package share;

import "common.proto";
import "scan.proto";


service ControllerCapService {
  rpc IsGRPCCompressed(RPCVoid) returns (CLUSBoolean);
}

message AdapterScanImageRequest {
    string Registry = 1;
    string Repository = 2;
    string Tag = 3;
    string Token = 4;
    bool ScanLayers = 5;
    string AdapterVersion = 6;
}

message GetScannersResponse {
    uint32 Scanners = 1;
    uint32 MaxScanners = 2;
    uint32 IdleScanners = 3;
    string ScannerVersion = 4;
    string ScannerDBTime = 5;
}

service ControllerScanAdapterService {
  rpc GetScanners(RPCVoid) returns (GetScannersResponse);
  rpc ScanImage(AdapterScanImageRequest) returns (ScanResult);
}

message ScannerRegisterData {
    string CVEDBVersion = 1;
    string CVEDBCreateTime = 2;
    map<string, ScanVulnerability> CVEDB = 3;
    string RPCServer = 4;
    uint32 RPCServerPort = 5;
    string ID = 6;
}

message ScannerDeregisterData {
    string ID = 1;
}

service ControllerScanService {
  rpc ScannerRegister(ScannerRegisterData) returns (RPCVoid);
  rpc ScannerRegisterStream(stream ScannerRegisterData) returns (RPCVoid);
  rpc ScannerDeregister(ScannerDeregisterData) returns (RPCVoid);
  rpc SubmitScanResult(ScanResult) returns (RPCVoid);
}

message CLUSFilePacket {
	bytes Data = 1;
	string Name = 2;
	uint32 Len = 3;
}

service ControllerUpgradeService {
  rpc UpgradeScannerDB(stream CLUSFilePacket) returns (RPCVoid);
  rpc SupportRegularDB(RPCVoid) returns (CLUSBoolean);
  rpc SupportUpgradeDB(RPCVoid) returns (CLUSBoolean);
}

message CLUSAdmissionRequest {
    string ID = 1;
    string HostID = 2;
    int64 HostCPUs = 3;
    int64 HostMemory = 4;
}

message CLUSAdmissionResponse {
    bool Allowed = 1;
    string Reason = 2;
}

message CLUSProcProfileReq {
	string	GroupName = 1;
	string	Name      = 2;
	string	Path      = 3;
	string	User      = 4;
	int32   Uid       = 5;
	bytes   Hash      = 6;
	string	Action    = 7;
}
message CLUSProcProfileArray {
    repeated CLUSProcProfileReq Processes = 1;
}

message CLUSFileAccessRuleReq{
	string	GroupName = 1;
	string	Filter    = 2;
	string	Path      = 3;
}

message CLUSFileAccessRuleArray {
    repeated CLUSFileAccessRuleReq Rules = 1;
}

message CLUSConnection {
	string AgentID = 1;
	string HostID = 2;
	string ClientWL = 3;
	string ServerWL = 4;
	bytes ClientIP = 5;
    bytes ServerIP = 6;
	string Scope = 7;
	string Network = 8;
	uint32 ClientPort = 9;
	uint32 ServerPort = 10;
	uint32 IPProto = 11;
	uint32 Application = 12;
	uint64 Bytes = 13;
	uint32 Sessions = 14;
	uint32 FirstSeenAt = 15;
	uint32 LastSeenAt = 16;
	uint32 ThreatID = 17;
	uint32 Severity = 18;
	uint32 PolicyAction = 19;
	bool Ingress = 20;
	bool ExternalPeer = 21;
	bool LocalPeer = 22;
	uint32 PolicyId = 23;
	uint32 Violates = 24;
    string LogUID = 25;
	bool Xff = 26;
	bool SvcExtIP = 27;
	bool ToSidecar = 28;
	bool MeshToSvr = 29;
	bool LinkLocal = 30;
	bool TmpOpen = 31;
	bool UwlIp = 32;
	string FQDN = 33;
	uint32 EpSessCurIn = 34;
	uint32 EpSessIn60 = 35;
	uint64 EpByteIn60 = 36;
}

message CLUSConnectionArray {
    repeated CLUSConnection Connections = 1;
}

enum ReportRespAction {
    Done = 0;
    Resend = 1;
}

message CLUSReportResponse {
    ReportRespAction Action = 1;
    uint32 ReportInterval = 2;
}

service ControllerAgentService {
  rpc RequestAdmission(CLUSAdmissionRequest) returns (CLUSAdmissionResponse);
  rpc ReportProcProfile(CLUSProcProfileArray) returns (CLUSReportResponse);
  rpc ReportFileAccessRule(CLUSFileAccessRuleArray) returns (CLUSReportResponse);
  rpc ReportConnections(CLUSConnectionArray) returns (CLUSReportResponse);
}

message CLUSSyncRequest {
	string Category = 1;
	string From = 2;
}

message CLUSSyncReply {
	string Category = 1;
	bytes  Data = 2;
}

message CLUSControllerCounter {
	uint32 GraphNodes = 1;
	uint32 GoRoutines = 2;
	bytes Lsof = 3;
	bytes PS = 4;
    uint32 ScanTasks = 5;
}

message CLUSGraphOps {
    string From = 1;
    string To = 2;
    string Endpoint = 3;
    string Alias = 4;
}

message CLUSPolicyRuleCheck {
    uint32 ID = 1;
    string From = 2;
    string To = 3;
    string Ports = 4;
    repeated uint32 Applications = 5;
    bool Learned = 6 [deprecated=true];
    bool Disabled = 7;
    int64 CreatedTS = 8;
    int64 LastModTS = 9;
}

message CLUSPolicyRuleMismatch {
    CLUSPolicyRuleCheck ClusterRule = 1;
    CLUSPolicyRuleCheck LearnedRule = 2;
}

message CLUSPolicySyncStatus {
    bool Leader = 1;
    uint32 GraphNodeCount = 2;
    uint32 LearnedRuleMax = 3;
    repeated CLUSPolicyRuleMismatch Mismatches = 4;
}

enum StoreWatcherAction {
    PauseWatcher = 0;
    ResumeWatcher = 1;
}

message CLUSStoreWatcherInfo {
    string CtrlerID = 1;
    string Key = 2;
    StoreWatcherAction Action = 3;
}

enum KickLoginSessionsType {
    KickByServer = 0;
    KickByFed = 1;
    KickByUser = 2;
}

message CLUSKickLoginSessionsRequest {
    string CtrlerID = 1;
    KickLoginSessionsType Type = 2;
	string Server = 3;
	string UserFullname = 4;
    string UserServer = 5;
    string UserName = 6;
}

message CLUSLoginTokenInfo {
    string CtrlerID = 1;
    string LoginID = 2;
    string UserFullname = 3;
    string LoginToken = 4;
}

message CLUSKubernetesResInfo {
    string DocKey = 1;
    string Data = 2;			
}

service ControllerCtrlService {
  rpc ReqSync(CLUSSyncRequest) returns (CLUSSyncReply);
  rpc ReqSyncStream(CLUSSyncRequest) returns (stream CLUSSyncReply);
  rpc ReportConnections(CLUSConnectionArray) returns (RPCVoid);
  rpc GetControllerCounter(RPCVoid) returns (CLUSControllerCounter);
  rpc DeleteConversation(CLUSGraphOps) returns (RPCVoid);
  rpc DeleteEndpoint(CLUSGraphOps) returns (RPCVoid);
  rpc SetEndpointAlias(CLUSGraphOps) returns (RPCVoid);
  rpc CheckPolicySyncStatus(RPCVoid) returns (CLUSPolicySyncStatus);
  rpc TriggerSync(RPCVoid) returns (RPCVoid);
  rpc ProfilingCmd(CLUSProfilingRequest) returns (RPCVoid);
  rpc TriggerSyncLearnedPolicy(RPCVoid) returns (RPCVoid);
  rpc PauseResumeStoreWatcher(CLUSStoreWatcherInfo) returns (RPCVoid);
  rpc KickLoginSessions(CLUSKickLoginSessionsRequest) returns (RPCVoid);
  rpc GetStats(RPCVoid) returns (CLUSStats);
  rpc ResetLoginTokenTimer(share.CLUSLoginTokenInfo) returns (RPCVoid);
  rpc ReportK8sResToOPA(share.CLUSKubernetesResInfo) returns (RPCVoid);
}
