// Code generated by protoc-gen-go. DO NOT EDIT.
// source: controller_service.proto

package share

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ReportRespAction int32

const (
	ReportRespAction_Done   ReportRespAction = 0
	ReportRespAction_Resend ReportRespAction = 1
)

var ReportRespAction_name = map[int32]string{
	0: "Done",
	1: "Resend",
}
var ReportRespAction_value = map[string]int32{
	"Done":   0,
	"Resend": 1,
}

func (x ReportRespAction) String() string {
	return proto.EnumName(ReportRespAction_name, int32(x))
}
func (ReportRespAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type StoreWatcherAction int32

const (
	StoreWatcherAction_PauseWatcher  StoreWatcherAction = 0
	StoreWatcherAction_ResumeWatcher StoreWatcherAction = 1
)

var StoreWatcherAction_name = map[int32]string{
	0: "PauseWatcher",
	1: "ResumeWatcher",
}
var StoreWatcherAction_value = map[string]int32{
	"PauseWatcher":  0,
	"ResumeWatcher": 1,
}

func (x StoreWatcherAction) String() string {
	return proto.EnumName(StoreWatcherAction_name, int32(x))
}
func (StoreWatcherAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type KickLoginSessionsType int32

const (
	KickLoginSessionsType_KickByServer KickLoginSessionsType = 0
	KickLoginSessionsType_KickByFed    KickLoginSessionsType = 1
	KickLoginSessionsType_KickByUser   KickLoginSessionsType = 2
)

var KickLoginSessionsType_name = map[int32]string{
	0: "KickByServer",
	1: "KickByFed",
	2: "KickByUser",
}
var KickLoginSessionsType_value = map[string]int32{
	"KickByServer": 0,
	"KickByFed":    1,
	"KickByUser":   2,
}

func (x KickLoginSessionsType) String() string {
	return proto.EnumName(KickLoginSessionsType_name, int32(x))
}
func (KickLoginSessionsType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type AdapterScanImageRequest struct {
	Registry       string `protobuf:"bytes,1,opt,name=Registry" json:"Registry,omitempty"`
	Repository     string `protobuf:"bytes,2,opt,name=Repository" json:"Repository,omitempty"`
	Tag            string `protobuf:"bytes,3,opt,name=Tag" json:"Tag,omitempty"`
	Token          string `protobuf:"bytes,4,opt,name=Token" json:"Token,omitempty"`
	ScanLayers     bool   `protobuf:"varint,5,opt,name=ScanLayers" json:"ScanLayers,omitempty"`
	AdapterVersion string `protobuf:"bytes,6,opt,name=AdapterVersion" json:"AdapterVersion,omitempty"`
}

func (m *AdapterScanImageRequest) Reset()                    { *m = AdapterScanImageRequest{} }
func (m *AdapterScanImageRequest) String() string            { return proto.CompactTextString(m) }
func (*AdapterScanImageRequest) ProtoMessage()               {}
func (*AdapterScanImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *AdapterScanImageRequest) GetRegistry() string {
	if m != nil {
		return m.Registry
	}
	return ""
}

func (m *AdapterScanImageRequest) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *AdapterScanImageRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *AdapterScanImageRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *AdapterScanImageRequest) GetScanLayers() bool {
	if m != nil {
		return m.ScanLayers
	}
	return false
}

func (m *AdapterScanImageRequest) GetAdapterVersion() string {
	if m != nil {
		return m.AdapterVersion
	}
	return ""
}

type GetScannersResponse struct {
	Scanners       uint32 `protobuf:"varint,1,opt,name=Scanners" json:"Scanners,omitempty"`
	MaxScanners    uint32 `protobuf:"varint,2,opt,name=MaxScanners" json:"MaxScanners,omitempty"`
	IdleScanners   uint32 `protobuf:"varint,3,opt,name=IdleScanners" json:"IdleScanners,omitempty"`
	ScannerVersion string `protobuf:"bytes,4,opt,name=ScannerVersion" json:"ScannerVersion,omitempty"`
	ScannerDBTime  string `protobuf:"bytes,5,opt,name=ScannerDBTime" json:"ScannerDBTime,omitempty"`
}

func (m *GetScannersResponse) Reset()                    { *m = GetScannersResponse{} }
func (m *GetScannersResponse) String() string            { return proto.CompactTextString(m) }
func (*GetScannersResponse) ProtoMessage()               {}
func (*GetScannersResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GetScannersResponse) GetScanners() uint32 {
	if m != nil {
		return m.Scanners
	}
	return 0
}

func (m *GetScannersResponse) GetMaxScanners() uint32 {
	if m != nil {
		return m.MaxScanners
	}
	return 0
}

func (m *GetScannersResponse) GetIdleScanners() uint32 {
	if m != nil {
		return m.IdleScanners
	}
	return 0
}

func (m *GetScannersResponse) GetScannerVersion() string {
	if m != nil {
		return m.ScannerVersion
	}
	return ""
}

func (m *GetScannersResponse) GetScannerDBTime() string {
	if m != nil {
		return m.ScannerDBTime
	}
	return ""
}

type ScannerRegisterData struct {
	CVEDBVersion    string                        `protobuf:"bytes,1,opt,name=CVEDBVersion" json:"CVEDBVersion,omitempty"`
	CVEDBCreateTime string                        `protobuf:"bytes,2,opt,name=CVEDBCreateTime" json:"CVEDBCreateTime,omitempty"`
	CVEDB           map[string]*ScanVulnerability `protobuf:"bytes,3,rep,name=CVEDB" json:"CVEDB,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RPCServer       string                        `protobuf:"bytes,4,opt,name=RPCServer" json:"RPCServer,omitempty"`
	RPCServerPort   uint32                        `protobuf:"varint,5,opt,name=RPCServerPort" json:"RPCServerPort,omitempty"`
	ID              string                        `protobuf:"bytes,6,opt,name=ID" json:"ID,omitempty"`
}

func (m *ScannerRegisterData) Reset()                    { *m = ScannerRegisterData{} }
func (m *ScannerRegisterData) String() string            { return proto.CompactTextString(m) }
func (*ScannerRegisterData) ProtoMessage()               {}
func (*ScannerRegisterData) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ScannerRegisterData) GetCVEDBVersion() string {
	if m != nil {
		return m.CVEDBVersion
	}
	return ""
}

func (m *ScannerRegisterData) GetCVEDBCreateTime() string {
	if m != nil {
		return m.CVEDBCreateTime
	}
	return ""
}

func (m *ScannerRegisterData) GetCVEDB() map[string]*ScanVulnerability {
	if m != nil {
		return m.CVEDB
	}
	return nil
}

func (m *ScannerRegisterData) GetRPCServer() string {
	if m != nil {
		return m.RPCServer
	}
	return ""
}

func (m *ScannerRegisterData) GetRPCServerPort() uint32 {
	if m != nil {
		return m.RPCServerPort
	}
	return 0
}

func (m *ScannerRegisterData) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type ScannerDeregisterData struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *ScannerDeregisterData) Reset()                    { *m = ScannerDeregisterData{} }
func (m *ScannerDeregisterData) String() string            { return proto.CompactTextString(m) }
func (*ScannerDeregisterData) ProtoMessage()               {}
func (*ScannerDeregisterData) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *ScannerDeregisterData) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type CLUSFilePacket struct {
	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Len  uint32 `protobuf:"varint,3,opt,name=Len" json:"Len,omitempty"`
}

func (m *CLUSFilePacket) Reset()                    { *m = CLUSFilePacket{} }
func (m *CLUSFilePacket) String() string            { return proto.CompactTextString(m) }
func (*CLUSFilePacket) ProtoMessage()               {}
func (*CLUSFilePacket) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *CLUSFilePacket) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CLUSFilePacket) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CLUSFilePacket) GetLen() uint32 {
	if m != nil {
		return m.Len
	}
	return 0
}

type CLUSAdmissionRequest struct {
	ID         string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	HostID     string `protobuf:"bytes,2,opt,name=HostID" json:"HostID,omitempty"`
	HostCPUs   int64  `protobuf:"varint,3,opt,name=HostCPUs" json:"HostCPUs,omitempty"`
	HostMemory int64  `protobuf:"varint,4,opt,name=HostMemory" json:"HostMemory,omitempty"`
}

func (m *CLUSAdmissionRequest) Reset()                    { *m = CLUSAdmissionRequest{} }
func (m *CLUSAdmissionRequest) String() string            { return proto.CompactTextString(m) }
func (*CLUSAdmissionRequest) ProtoMessage()               {}
func (*CLUSAdmissionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *CLUSAdmissionRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *CLUSAdmissionRequest) GetHostID() string {
	if m != nil {
		return m.HostID
	}
	return ""
}

func (m *CLUSAdmissionRequest) GetHostCPUs() int64 {
	if m != nil {
		return m.HostCPUs
	}
	return 0
}

func (m *CLUSAdmissionRequest) GetHostMemory() int64 {
	if m != nil {
		return m.HostMemory
	}
	return 0
}

type CLUSAdmissionResponse struct {
	Allowed bool   `protobuf:"varint,1,opt,name=Allowed" json:"Allowed,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=Reason" json:"Reason,omitempty"`
}

func (m *CLUSAdmissionResponse) Reset()                    { *m = CLUSAdmissionResponse{} }
func (m *CLUSAdmissionResponse) String() string            { return proto.CompactTextString(m) }
func (*CLUSAdmissionResponse) ProtoMessage()               {}
func (*CLUSAdmissionResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *CLUSAdmissionResponse) GetAllowed() bool {
	if m != nil {
		return m.Allowed
	}
	return false
}

func (m *CLUSAdmissionResponse) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type CLUSProcProfileReq struct {
	GroupName string `protobuf:"bytes,1,opt,name=GroupName" json:"GroupName,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Path      string `protobuf:"bytes,3,opt,name=Path" json:"Path,omitempty"`
	User      string `protobuf:"bytes,4,opt,name=User" json:"User,omitempty"`
	Uid       int32  `protobuf:"varint,5,opt,name=Uid" json:"Uid,omitempty"`
	Hash      []byte `protobuf:"bytes,6,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Action    string `protobuf:"bytes,7,opt,name=Action" json:"Action,omitempty"`
}

func (m *CLUSProcProfileReq) Reset()                    { *m = CLUSProcProfileReq{} }
func (m *CLUSProcProfileReq) String() string            { return proto.CompactTextString(m) }
func (*CLUSProcProfileReq) ProtoMessage()               {}
func (*CLUSProcProfileReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *CLUSProcProfileReq) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *CLUSProcProfileReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CLUSProcProfileReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CLUSProcProfileReq) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *CLUSProcProfileReq) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CLUSProcProfileReq) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *CLUSProcProfileReq) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type CLUSProcProfileArray struct {
	Processes []*CLUSProcProfileReq `protobuf:"bytes,1,rep,name=Processes" json:"Processes,omitempty"`
}

func (m *CLUSProcProfileArray) Reset()                    { *m = CLUSProcProfileArray{} }
func (m *CLUSProcProfileArray) String() string            { return proto.CompactTextString(m) }
func (*CLUSProcProfileArray) ProtoMessage()               {}
func (*CLUSProcProfileArray) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *CLUSProcProfileArray) GetProcesses() []*CLUSProcProfileReq {
	if m != nil {
		return m.Processes
	}
	return nil
}

type CLUSFileAccessRuleReq struct {
	GroupName string `protobuf:"bytes,1,opt,name=GroupName" json:"GroupName,omitempty"`
	Filter    string `protobuf:"bytes,2,opt,name=Filter" json:"Filter,omitempty"`
	Path      string `protobuf:"bytes,3,opt,name=Path" json:"Path,omitempty"`
}

func (m *CLUSFileAccessRuleReq) Reset()                    { *m = CLUSFileAccessRuleReq{} }
func (m *CLUSFileAccessRuleReq) String() string            { return proto.CompactTextString(m) }
func (*CLUSFileAccessRuleReq) ProtoMessage()               {}
func (*CLUSFileAccessRuleReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *CLUSFileAccessRuleReq) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *CLUSFileAccessRuleReq) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *CLUSFileAccessRuleReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type CLUSFileAccessRuleArray struct {
	Rules []*CLUSFileAccessRuleReq `protobuf:"bytes,1,rep,name=Rules" json:"Rules,omitempty"`
}

func (m *CLUSFileAccessRuleArray) Reset()                    { *m = CLUSFileAccessRuleArray{} }
func (m *CLUSFileAccessRuleArray) String() string            { return proto.CompactTextString(m) }
func (*CLUSFileAccessRuleArray) ProtoMessage()               {}
func (*CLUSFileAccessRuleArray) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *CLUSFileAccessRuleArray) GetRules() []*CLUSFileAccessRuleReq {
	if m != nil {
		return m.Rules
	}
	return nil
}

type CLUSConnection struct {
	AgentID      string `protobuf:"bytes,1,opt,name=AgentID" json:"AgentID,omitempty"`
	HostID       string `protobuf:"bytes,2,opt,name=HostID" json:"HostID,omitempty"`
	ClientWL     string `protobuf:"bytes,3,opt,name=ClientWL" json:"ClientWL,omitempty"`
	ServerWL     string `protobuf:"bytes,4,opt,name=ServerWL" json:"ServerWL,omitempty"`
	ClientIP     []byte `protobuf:"bytes,5,opt,name=ClientIP,proto3" json:"ClientIP,omitempty"`
	ServerIP     []byte `protobuf:"bytes,6,opt,name=ServerIP,proto3" json:"ServerIP,omitempty"`
	Scope        string `protobuf:"bytes,7,opt,name=Scope" json:"Scope,omitempty"`
	Network      string `protobuf:"bytes,8,opt,name=Network" json:"Network,omitempty"`
	ClientPort   uint32 `protobuf:"varint,9,opt,name=ClientPort" json:"ClientPort,omitempty"`
	ServerPort   uint32 `protobuf:"varint,10,opt,name=ServerPort" json:"ServerPort,omitempty"`
	IPProto      uint32 `protobuf:"varint,11,opt,name=IPProto" json:"IPProto,omitempty"`
	Application  uint32 `protobuf:"varint,12,opt,name=Application" json:"Application,omitempty"`
	Bytes        uint64 `protobuf:"varint,13,opt,name=Bytes" json:"Bytes,omitempty"`
	Sessions     uint32 `protobuf:"varint,14,opt,name=Sessions" json:"Sessions,omitempty"`
	FirstSeenAt  uint32 `protobuf:"varint,15,opt,name=FirstSeenAt" json:"FirstSeenAt,omitempty"`
	LastSeenAt   uint32 `protobuf:"varint,16,opt,name=LastSeenAt" json:"LastSeenAt,omitempty"`
	ThreatID     uint32 `protobuf:"varint,17,opt,name=ThreatID" json:"ThreatID,omitempty"`
	Severity     uint32 `protobuf:"varint,18,opt,name=Severity" json:"Severity,omitempty"`
	PolicyAction uint32 `protobuf:"varint,19,opt,name=PolicyAction" json:"PolicyAction,omitempty"`
	Ingress      bool   `protobuf:"varint,20,opt,name=Ingress" json:"Ingress,omitempty"`
	ExternalPeer bool   `protobuf:"varint,21,opt,name=ExternalPeer" json:"ExternalPeer,omitempty"`
	LocalPeer    bool   `protobuf:"varint,22,opt,name=LocalPeer" json:"LocalPeer,omitempty"`
	PolicyId     uint32 `protobuf:"varint,23,opt,name=PolicyId" json:"PolicyId,omitempty"`
	Violates     uint32 `protobuf:"varint,24,opt,name=Violates" json:"Violates,omitempty"`
	LogUID       string `protobuf:"bytes,25,opt,name=LogUID" json:"LogUID,omitempty"`
	Xff          bool   `protobuf:"varint,26,opt,name=Xff" json:"Xff,omitempty"`
	SvcExtIP     bool   `protobuf:"varint,27,opt,name=SvcExtIP" json:"SvcExtIP,omitempty"`
	ToSidecar    bool   `protobuf:"varint,28,opt,name=ToSidecar" json:"ToSidecar,omitempty"`
	MeshToSvr    bool   `protobuf:"varint,29,opt,name=MeshToSvr" json:"MeshToSvr,omitempty"`
	LinkLocal    bool   `protobuf:"varint,30,opt,name=LinkLocal" json:"LinkLocal,omitempty"`
	TmpOpen      bool   `protobuf:"varint,31,opt,name=TmpOpen" json:"TmpOpen,omitempty"`
	UwlIp        bool   `protobuf:"varint,32,opt,name=UwlIp" json:"UwlIp,omitempty"`
	FQDN         string `protobuf:"bytes,33,opt,name=FQDN" json:"FQDN,omitempty"`
	EpSessCurIn  uint32 `protobuf:"varint,34,opt,name=EpSessCurIn" json:"EpSessCurIn,omitempty"`
	EpSessIn60   uint32 `protobuf:"varint,35,opt,name=EpSessIn60" json:"EpSessIn60,omitempty"`
	EpByteIn60   uint64 `protobuf:"varint,36,opt,name=EpByteIn60" json:"EpByteIn60,omitempty"`
}

func (m *CLUSConnection) Reset()                    { *m = CLUSConnection{} }
func (m *CLUSConnection) String() string            { return proto.CompactTextString(m) }
func (*CLUSConnection) ProtoMessage()               {}
func (*CLUSConnection) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *CLUSConnection) GetAgentID() string {
	if m != nil {
		return m.AgentID
	}
	return ""
}

func (m *CLUSConnection) GetHostID() string {
	if m != nil {
		return m.HostID
	}
	return ""
}

func (m *CLUSConnection) GetClientWL() string {
	if m != nil {
		return m.ClientWL
	}
	return ""
}

func (m *CLUSConnection) GetServerWL() string {
	if m != nil {
		return m.ServerWL
	}
	return ""
}

func (m *CLUSConnection) GetClientIP() []byte {
	if m != nil {
		return m.ClientIP
	}
	return nil
}

func (m *CLUSConnection) GetServerIP() []byte {
	if m != nil {
		return m.ServerIP
	}
	return nil
}

func (m *CLUSConnection) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *CLUSConnection) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *CLUSConnection) GetClientPort() uint32 {
	if m != nil {
		return m.ClientPort
	}
	return 0
}

func (m *CLUSConnection) GetServerPort() uint32 {
	if m != nil {
		return m.ServerPort
	}
	return 0
}

func (m *CLUSConnection) GetIPProto() uint32 {
	if m != nil {
		return m.IPProto
	}
	return 0
}

func (m *CLUSConnection) GetApplication() uint32 {
	if m != nil {
		return m.Application
	}
	return 0
}

func (m *CLUSConnection) GetBytes() uint64 {
	if m != nil {
		return m.Bytes
	}
	return 0
}

func (m *CLUSConnection) GetSessions() uint32 {
	if m != nil {
		return m.Sessions
	}
	return 0
}

func (m *CLUSConnection) GetFirstSeenAt() uint32 {
	if m != nil {
		return m.FirstSeenAt
	}
	return 0
}

func (m *CLUSConnection) GetLastSeenAt() uint32 {
	if m != nil {
		return m.LastSeenAt
	}
	return 0
}

func (m *CLUSConnection) GetThreatID() uint32 {
	if m != nil {
		return m.ThreatID
	}
	return 0
}

func (m *CLUSConnection) GetSeverity() uint32 {
	if m != nil {
		return m.Severity
	}
	return 0
}

func (m *CLUSConnection) GetPolicyAction() uint32 {
	if m != nil {
		return m.PolicyAction
	}
	return 0
}

func (m *CLUSConnection) GetIngress() bool {
	if m != nil {
		return m.Ingress
	}
	return false
}

func (m *CLUSConnection) GetExternalPeer() bool {
	if m != nil {
		return m.ExternalPeer
	}
	return false
}

func (m *CLUSConnection) GetLocalPeer() bool {
	if m != nil {
		return m.LocalPeer
	}
	return false
}

func (m *CLUSConnection) GetPolicyId() uint32 {
	if m != nil {
		return m.PolicyId
	}
	return 0
}

func (m *CLUSConnection) GetViolates() uint32 {
	if m != nil {
		return m.Violates
	}
	return 0
}

func (m *CLUSConnection) GetLogUID() string {
	if m != nil {
		return m.LogUID
	}
	return ""
}

func (m *CLUSConnection) GetXff() bool {
	if m != nil {
		return m.Xff
	}
	return false
}

func (m *CLUSConnection) GetSvcExtIP() bool {
	if m != nil {
		return m.SvcExtIP
	}
	return false
}

func (m *CLUSConnection) GetToSidecar() bool {
	if m != nil {
		return m.ToSidecar
	}
	return false
}

func (m *CLUSConnection) GetMeshToSvr() bool {
	if m != nil {
		return m.MeshToSvr
	}
	return false
}

func (m *CLUSConnection) GetLinkLocal() bool {
	if m != nil {
		return m.LinkLocal
	}
	return false
}

func (m *CLUSConnection) GetTmpOpen() bool {
	if m != nil {
		return m.TmpOpen
	}
	return false
}

func (m *CLUSConnection) GetUwlIp() bool {
	if m != nil {
		return m.UwlIp
	}
	return false
}

func (m *CLUSConnection) GetFQDN() string {
	if m != nil {
		return m.FQDN
	}
	return ""
}

func (m *CLUSConnection) GetEpSessCurIn() uint32 {
	if m != nil {
		return m.EpSessCurIn
	}
	return 0
}

func (m *CLUSConnection) GetEpSessIn60() uint32 {
	if m != nil {
		return m.EpSessIn60
	}
	return 0
}

func (m *CLUSConnection) GetEpByteIn60() uint64 {
	if m != nil {
		return m.EpByteIn60
	}
	return 0
}

type CLUSConnectionArray struct {
	Connections []*CLUSConnection `protobuf:"bytes,1,rep,name=Connections" json:"Connections,omitempty"`
}

func (m *CLUSConnectionArray) Reset()                    { *m = CLUSConnectionArray{} }
func (m *CLUSConnectionArray) String() string            { return proto.CompactTextString(m) }
func (*CLUSConnectionArray) ProtoMessage()               {}
func (*CLUSConnectionArray) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *CLUSConnectionArray) GetConnections() []*CLUSConnection {
	if m != nil {
		return m.Connections
	}
	return nil
}

type CLUSReportResponse struct {
	Action         ReportRespAction `protobuf:"varint,1,opt,name=Action,enum=share.ReportRespAction" json:"Action,omitempty"`
	ReportInterval uint32           `protobuf:"varint,2,opt,name=ReportInterval" json:"ReportInterval,omitempty"`
}

func (m *CLUSReportResponse) Reset()                    { *m = CLUSReportResponse{} }
func (m *CLUSReportResponse) String() string            { return proto.CompactTextString(m) }
func (*CLUSReportResponse) ProtoMessage()               {}
func (*CLUSReportResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *CLUSReportResponse) GetAction() ReportRespAction {
	if m != nil {
		return m.Action
	}
	return ReportRespAction_Done
}

func (m *CLUSReportResponse) GetReportInterval() uint32 {
	if m != nil {
		return m.ReportInterval
	}
	return 0
}

type CLUSSyncRequest struct {
	Category string `protobuf:"bytes,1,opt,name=Category" json:"Category,omitempty"`
	From     string `protobuf:"bytes,2,opt,name=From" json:"From,omitempty"`
}

func (m *CLUSSyncRequest) Reset()                    { *m = CLUSSyncRequest{} }
func (m *CLUSSyncRequest) String() string            { return proto.CompactTextString(m) }
func (*CLUSSyncRequest) ProtoMessage()               {}
func (*CLUSSyncRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *CLUSSyncRequest) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *CLUSSyncRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type CLUSSyncReply struct {
	Category string `protobuf:"bytes,1,opt,name=Category" json:"Category,omitempty"`
	Data     []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *CLUSSyncReply) Reset()                    { *m = CLUSSyncReply{} }
func (m *CLUSSyncReply) String() string            { return proto.CompactTextString(m) }
func (*CLUSSyncReply) ProtoMessage()               {}
func (*CLUSSyncReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *CLUSSyncReply) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *CLUSSyncReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type CLUSControllerCounter struct {
	GraphNodes uint32 `protobuf:"varint,1,opt,name=GraphNodes" json:"GraphNodes,omitempty"`
	GoRoutines uint32 `protobuf:"varint,2,opt,name=GoRoutines" json:"GoRoutines,omitempty"`
	Lsof       []byte `protobuf:"bytes,3,opt,name=Lsof,proto3" json:"Lsof,omitempty"`
	PS         []byte `protobuf:"bytes,4,opt,name=PS,proto3" json:"PS,omitempty"`
	ScanTasks  uint32 `protobuf:"varint,5,opt,name=ScanTasks" json:"ScanTasks,omitempty"`
}

func (m *CLUSControllerCounter) Reset()                    { *m = CLUSControllerCounter{} }
func (m *CLUSControllerCounter) String() string            { return proto.CompactTextString(m) }
func (*CLUSControllerCounter) ProtoMessage()               {}
func (*CLUSControllerCounter) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *CLUSControllerCounter) GetGraphNodes() uint32 {
	if m != nil {
		return m.GraphNodes
	}
	return 0
}

func (m *CLUSControllerCounter) GetGoRoutines() uint32 {
	if m != nil {
		return m.GoRoutines
	}
	return 0
}

func (m *CLUSControllerCounter) GetLsof() []byte {
	if m != nil {
		return m.Lsof
	}
	return nil
}

func (m *CLUSControllerCounter) GetPS() []byte {
	if m != nil {
		return m.PS
	}
	return nil
}

func (m *CLUSControllerCounter) GetScanTasks() uint32 {
	if m != nil {
		return m.ScanTasks
	}
	return 0
}

type CLUSGraphOps struct {
	From     string `protobuf:"bytes,1,opt,name=From" json:"From,omitempty"`
	To       string `protobuf:"bytes,2,opt,name=To" json:"To,omitempty"`
	Endpoint string `protobuf:"bytes,3,opt,name=Endpoint" json:"Endpoint,omitempty"`
	Alias    string `protobuf:"bytes,4,opt,name=Alias" json:"Alias,omitempty"`
}

func (m *CLUSGraphOps) Reset()                    { *m = CLUSGraphOps{} }
func (m *CLUSGraphOps) String() string            { return proto.CompactTextString(m) }
func (*CLUSGraphOps) ProtoMessage()               {}
func (*CLUSGraphOps) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *CLUSGraphOps) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *CLUSGraphOps) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *CLUSGraphOps) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *CLUSGraphOps) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

type CLUSPolicyRuleCheck struct {
	ID           uint32   `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	From         string   `protobuf:"bytes,2,opt,name=From" json:"From,omitempty"`
	To           string   `protobuf:"bytes,3,opt,name=To" json:"To,omitempty"`
	Ports        string   `protobuf:"bytes,4,opt,name=Ports" json:"Ports,omitempty"`
	Applications []uint32 `protobuf:"varint,5,rep,packed,name=Applications" json:"Applications,omitempty"`
	Learned      bool     `protobuf:"varint,6,opt,name=Learned" json:"Learned,omitempty"`
	Disabled     bool     `protobuf:"varint,7,opt,name=Disabled" json:"Disabled,omitempty"`
	CreatedTS    int64    `protobuf:"varint,8,opt,name=CreatedTS" json:"CreatedTS,omitempty"`
	LastModTS    int64    `protobuf:"varint,9,opt,name=LastModTS" json:"LastModTS,omitempty"`
}

func (m *CLUSPolicyRuleCheck) Reset()                    { *m = CLUSPolicyRuleCheck{} }
func (m *CLUSPolicyRuleCheck) String() string            { return proto.CompactTextString(m) }
func (*CLUSPolicyRuleCheck) ProtoMessage()               {}
func (*CLUSPolicyRuleCheck) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

func (m *CLUSPolicyRuleCheck) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CLUSPolicyRuleCheck) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *CLUSPolicyRuleCheck) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *CLUSPolicyRuleCheck) GetPorts() string {
	if m != nil {
		return m.Ports
	}
	return ""
}

func (m *CLUSPolicyRuleCheck) GetApplications() []uint32 {
	if m != nil {
		return m.Applications
	}
	return nil
}

func (m *CLUSPolicyRuleCheck) GetLearned() bool {
	if m != nil {
		return m.Learned
	}
	return false
}

func (m *CLUSPolicyRuleCheck) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *CLUSPolicyRuleCheck) GetCreatedTS() int64 {
	if m != nil {
		return m.CreatedTS
	}
	return 0
}

func (m *CLUSPolicyRuleCheck) GetLastModTS() int64 {
	if m != nil {
		return m.LastModTS
	}
	return 0
}

type CLUSPolicyRuleMismatch struct {
	ClusterRule *CLUSPolicyRuleCheck `protobuf:"bytes,1,opt,name=ClusterRule" json:"ClusterRule,omitempty"`
	LearnedRule *CLUSPolicyRuleCheck `protobuf:"bytes,2,opt,name=LearnedRule" json:"LearnedRule,omitempty"`
}

func (m *CLUSPolicyRuleMismatch) Reset()                    { *m = CLUSPolicyRuleMismatch{} }
func (m *CLUSPolicyRuleMismatch) String() string            { return proto.CompactTextString(m) }
func (*CLUSPolicyRuleMismatch) ProtoMessage()               {}
func (*CLUSPolicyRuleMismatch) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *CLUSPolicyRuleMismatch) GetClusterRule() *CLUSPolicyRuleCheck {
	if m != nil {
		return m.ClusterRule
	}
	return nil
}

func (m *CLUSPolicyRuleMismatch) GetLearnedRule() *CLUSPolicyRuleCheck {
	if m != nil {
		return m.LearnedRule
	}
	return nil
}

type CLUSPolicySyncStatus struct {
	Leader         bool                      `protobuf:"varint,1,opt,name=Leader" json:"Leader,omitempty"`
	GraphNodeCount uint32                    `protobuf:"varint,2,opt,name=GraphNodeCount" json:"GraphNodeCount,omitempty"`
	LearnedRuleMax uint32                    `protobuf:"varint,3,opt,name=LearnedRuleMax" json:"LearnedRuleMax,omitempty"`
	Mismatches     []*CLUSPolicyRuleMismatch `protobuf:"bytes,4,rep,name=Mismatches" json:"Mismatches,omitempty"`
}

func (m *CLUSPolicySyncStatus) Reset()                    { *m = CLUSPolicySyncStatus{} }
func (m *CLUSPolicySyncStatus) String() string            { return proto.CompactTextString(m) }
func (*CLUSPolicySyncStatus) ProtoMessage()               {}
func (*CLUSPolicySyncStatus) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

func (m *CLUSPolicySyncStatus) GetLeader() bool {
	if m != nil {
		return m.Leader
	}
	return false
}

func (m *CLUSPolicySyncStatus) GetGraphNodeCount() uint32 {
	if m != nil {
		return m.GraphNodeCount
	}
	return 0
}

func (m *CLUSPolicySyncStatus) GetLearnedRuleMax() uint32 {
	if m != nil {
		return m.LearnedRuleMax
	}
	return 0
}

func (m *CLUSPolicySyncStatus) GetMismatches() []*CLUSPolicyRuleMismatch {
	if m != nil {
		return m.Mismatches
	}
	return nil
}

type CLUSStoreWatcherInfo struct {
	CtrlerID string             `protobuf:"bytes,1,opt,name=CtrlerID" json:"CtrlerID,omitempty"`
	Key      string             `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
	Action   StoreWatcherAction `protobuf:"varint,3,opt,name=Action,enum=share.StoreWatcherAction" json:"Action,omitempty"`
}

func (m *CLUSStoreWatcherInfo) Reset()                    { *m = CLUSStoreWatcherInfo{} }
func (m *CLUSStoreWatcherInfo) String() string            { return proto.CompactTextString(m) }
func (*CLUSStoreWatcherInfo) ProtoMessage()               {}
func (*CLUSStoreWatcherInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

func (m *CLUSStoreWatcherInfo) GetCtrlerID() string {
	if m != nil {
		return m.CtrlerID
	}
	return ""
}

func (m *CLUSStoreWatcherInfo) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CLUSStoreWatcherInfo) GetAction() StoreWatcherAction {
	if m != nil {
		return m.Action
	}
	return StoreWatcherAction_PauseWatcher
}

type CLUSKickLoginSessionsRequest struct {
	CtrlerID     string                `protobuf:"bytes,1,opt,name=CtrlerID" json:"CtrlerID,omitempty"`
	Type         KickLoginSessionsType `protobuf:"varint,2,opt,name=Type,enum=share.KickLoginSessionsType" json:"Type,omitempty"`
	Server       string                `protobuf:"bytes,3,opt,name=Server" json:"Server,omitempty"`
	UserFullname string                `protobuf:"bytes,4,opt,name=UserFullname" json:"UserFullname,omitempty"`
	UserServer   string                `protobuf:"bytes,5,opt,name=UserServer" json:"UserServer,omitempty"`
	UserName     string                `protobuf:"bytes,6,opt,name=UserName" json:"UserName,omitempty"`
}

func (m *CLUSKickLoginSessionsRequest) Reset()                    { *m = CLUSKickLoginSessionsRequest{} }
func (m *CLUSKickLoginSessionsRequest) String() string            { return proto.CompactTextString(m) }
func (*CLUSKickLoginSessionsRequest) ProtoMessage()               {}
func (*CLUSKickLoginSessionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

func (m *CLUSKickLoginSessionsRequest) GetCtrlerID() string {
	if m != nil {
		return m.CtrlerID
	}
	return ""
}

func (m *CLUSKickLoginSessionsRequest) GetType() KickLoginSessionsType {
	if m != nil {
		return m.Type
	}
	return KickLoginSessionsType_KickByServer
}

func (m *CLUSKickLoginSessionsRequest) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *CLUSKickLoginSessionsRequest) GetUserFullname() string {
	if m != nil {
		return m.UserFullname
	}
	return ""
}

func (m *CLUSKickLoginSessionsRequest) GetUserServer() string {
	if m != nil {
		return m.UserServer
	}
	return ""
}

func (m *CLUSKickLoginSessionsRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

type CLUSLoginTokenInfo struct {
	CtrlerID     string `protobuf:"bytes,1,opt,name=CtrlerID" json:"CtrlerID,omitempty"`
	LoginID      string `protobuf:"bytes,2,opt,name=LoginID" json:"LoginID,omitempty"`
	UserFullname string `protobuf:"bytes,3,opt,name=UserFullname" json:"UserFullname,omitempty"`
	LoginToken   string `protobuf:"bytes,4,opt,name=LoginToken" json:"LoginToken,omitempty"`
}

func (m *CLUSLoginTokenInfo) Reset()                    { *m = CLUSLoginTokenInfo{} }
func (m *CLUSLoginTokenInfo) String() string            { return proto.CompactTextString(m) }
func (*CLUSLoginTokenInfo) ProtoMessage()               {}
func (*CLUSLoginTokenInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

func (m *CLUSLoginTokenInfo) GetCtrlerID() string {
	if m != nil {
		return m.CtrlerID
	}
	return ""
}

func (m *CLUSLoginTokenInfo) GetLoginID() string {
	if m != nil {
		return m.LoginID
	}
	return ""
}

func (m *CLUSLoginTokenInfo) GetUserFullname() string {
	if m != nil {
		return m.UserFullname
	}
	return ""
}

func (m *CLUSLoginTokenInfo) GetLoginToken() string {
	if m != nil {
		return m.LoginToken
	}
	return ""
}

type CLUSKubernetesResInfo struct {
	DocKey string `protobuf:"bytes,1,opt,name=DocKey" json:"DocKey,omitempty"`
	Data   string `protobuf:"bytes,2,opt,name=Data" json:"Data,omitempty"`
}

func (m *CLUSKubernetesResInfo) Reset()                    { *m = CLUSKubernetesResInfo{} }
func (m *CLUSKubernetesResInfo) String() string            { return proto.CompactTextString(m) }
func (*CLUSKubernetesResInfo) ProtoMessage()               {}
func (*CLUSKubernetesResInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

func (m *CLUSKubernetesResInfo) GetDocKey() string {
	if m != nil {
		return m.DocKey
	}
	return ""
}

func (m *CLUSKubernetesResInfo) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*AdapterScanImageRequest)(nil), "share.AdapterScanImageRequest")
	proto.RegisterType((*GetScannersResponse)(nil), "share.GetScannersResponse")
	proto.RegisterType((*ScannerRegisterData)(nil), "share.ScannerRegisterData")
	proto.RegisterType((*ScannerDeregisterData)(nil), "share.ScannerDeregisterData")
	proto.RegisterType((*CLUSFilePacket)(nil), "share.CLUSFilePacket")
	proto.RegisterType((*CLUSAdmissionRequest)(nil), "share.CLUSAdmissionRequest")
	proto.RegisterType((*CLUSAdmissionResponse)(nil), "share.CLUSAdmissionResponse")
	proto.RegisterType((*CLUSProcProfileReq)(nil), "share.CLUSProcProfileReq")
	proto.RegisterType((*CLUSProcProfileArray)(nil), "share.CLUSProcProfileArray")
	proto.RegisterType((*CLUSFileAccessRuleReq)(nil), "share.CLUSFileAccessRuleReq")
	proto.RegisterType((*CLUSFileAccessRuleArray)(nil), "share.CLUSFileAccessRuleArray")
	proto.RegisterType((*CLUSConnection)(nil), "share.CLUSConnection")
	proto.RegisterType((*CLUSConnectionArray)(nil), "share.CLUSConnectionArray")
	proto.RegisterType((*CLUSReportResponse)(nil), "share.CLUSReportResponse")
	proto.RegisterType((*CLUSSyncRequest)(nil), "share.CLUSSyncRequest")
	proto.RegisterType((*CLUSSyncReply)(nil), "share.CLUSSyncReply")
	proto.RegisterType((*CLUSControllerCounter)(nil), "share.CLUSControllerCounter")
	proto.RegisterType((*CLUSGraphOps)(nil), "share.CLUSGraphOps")
	proto.RegisterType((*CLUSPolicyRuleCheck)(nil), "share.CLUSPolicyRuleCheck")
	proto.RegisterType((*CLUSPolicyRuleMismatch)(nil), "share.CLUSPolicyRuleMismatch")
	proto.RegisterType((*CLUSPolicySyncStatus)(nil), "share.CLUSPolicySyncStatus")
	proto.RegisterType((*CLUSStoreWatcherInfo)(nil), "share.CLUSStoreWatcherInfo")
	proto.RegisterType((*CLUSKickLoginSessionsRequest)(nil), "share.CLUSKickLoginSessionsRequest")
	proto.RegisterType((*CLUSLoginTokenInfo)(nil), "share.CLUSLoginTokenInfo")
	proto.RegisterType((*CLUSKubernetesResInfo)(nil), "share.CLUSKubernetesResInfo")
	proto.RegisterEnum("share.ReportRespAction", ReportRespAction_name, ReportRespAction_value)
	proto.RegisterEnum("share.StoreWatcherAction", StoreWatcherAction_name, StoreWatcherAction_value)
	proto.RegisterEnum("share.KickLoginSessionsType", KickLoginSessionsType_name, KickLoginSessionsType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ControllerCapService service

type ControllerCapServiceClient interface {
	IsGRPCCompressed(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSBoolean, error)
}

type controllerCapServiceClient struct {
	cc *grpc.ClientConn
}

func NewControllerCapServiceClient(cc *grpc.ClientConn) ControllerCapServiceClient {
	return &controllerCapServiceClient{cc}
}

func (c *controllerCapServiceClient) IsGRPCCompressed(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSBoolean, error) {
	out := new(CLUSBoolean)
	err := grpc.Invoke(ctx, "/share.ControllerCapService/IsGRPCCompressed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ControllerCapService service

type ControllerCapServiceServer interface {
	IsGRPCCompressed(context.Context, *RPCVoid) (*CLUSBoolean, error)
}

func RegisterControllerCapServiceServer(s *grpc.Server, srv ControllerCapServiceServer) {
	s.RegisterService(&_ControllerCapService_serviceDesc, srv)
}

func _ControllerCapService_IsGRPCCompressed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCapServiceServer).IsGRPCCompressed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCapService/IsGRPCCompressed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCapServiceServer).IsGRPCCompressed(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControllerCapService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "share.ControllerCapService",
	HandlerType: (*ControllerCapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsGRPCCompressed",
			Handler:    _ControllerCapService_IsGRPCCompressed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller_service.proto",
}

// Client API for ControllerScanAdapterService service

type ControllerScanAdapterServiceClient interface {
	GetScanners(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*GetScannersResponse, error)
	ScanImage(ctx context.Context, in *AdapterScanImageRequest, opts ...grpc.CallOption) (*ScanResult, error)
}

type controllerScanAdapterServiceClient struct {
	cc *grpc.ClientConn
}

func NewControllerScanAdapterServiceClient(cc *grpc.ClientConn) ControllerScanAdapterServiceClient {
	return &controllerScanAdapterServiceClient{cc}
}

func (c *controllerScanAdapterServiceClient) GetScanners(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*GetScannersResponse, error) {
	out := new(GetScannersResponse)
	err := grpc.Invoke(ctx, "/share.ControllerScanAdapterService/GetScanners", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerScanAdapterServiceClient) ScanImage(ctx context.Context, in *AdapterScanImageRequest, opts ...grpc.CallOption) (*ScanResult, error) {
	out := new(ScanResult)
	err := grpc.Invoke(ctx, "/share.ControllerScanAdapterService/ScanImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ControllerScanAdapterService service

type ControllerScanAdapterServiceServer interface {
	GetScanners(context.Context, *RPCVoid) (*GetScannersResponse, error)
	ScanImage(context.Context, *AdapterScanImageRequest) (*ScanResult, error)
}

func RegisterControllerScanAdapterServiceServer(s *grpc.Server, srv ControllerScanAdapterServiceServer) {
	s.RegisterService(&_ControllerScanAdapterService_serviceDesc, srv)
}

func _ControllerScanAdapterService_GetScanners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerScanAdapterServiceServer).GetScanners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerScanAdapterService/GetScanners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerScanAdapterServiceServer).GetScanners(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerScanAdapterService_ScanImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdapterScanImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerScanAdapterServiceServer).ScanImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerScanAdapterService/ScanImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerScanAdapterServiceServer).ScanImage(ctx, req.(*AdapterScanImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControllerScanAdapterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "share.ControllerScanAdapterService",
	HandlerType: (*ControllerScanAdapterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScanners",
			Handler:    _ControllerScanAdapterService_GetScanners_Handler,
		},
		{
			MethodName: "ScanImage",
			Handler:    _ControllerScanAdapterService_ScanImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller_service.proto",
}

// Client API for ControllerScanService service

type ControllerScanServiceClient interface {
	ScannerRegister(ctx context.Context, in *ScannerRegisterData, opts ...grpc.CallOption) (*RPCVoid, error)
	ScannerRegisterStream(ctx context.Context, opts ...grpc.CallOption) (ControllerScanService_ScannerRegisterStreamClient, error)
	ScannerDeregister(ctx context.Context, in *ScannerDeregisterData, opts ...grpc.CallOption) (*RPCVoid, error)
	SubmitScanResult(ctx context.Context, in *ScanResult, opts ...grpc.CallOption) (*RPCVoid, error)
}

type controllerScanServiceClient struct {
	cc *grpc.ClientConn
}

func NewControllerScanServiceClient(cc *grpc.ClientConn) ControllerScanServiceClient {
	return &controllerScanServiceClient{cc}
}

func (c *controllerScanServiceClient) ScannerRegister(ctx context.Context, in *ScannerRegisterData, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := grpc.Invoke(ctx, "/share.ControllerScanService/ScannerRegister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerScanServiceClient) ScannerRegisterStream(ctx context.Context, opts ...grpc.CallOption) (ControllerScanService_ScannerRegisterStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ControllerScanService_serviceDesc.Streams[0], c.cc, "/share.ControllerScanService/ScannerRegisterStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerScanServiceScannerRegisterStreamClient{stream}
	return x, nil
}

type ControllerScanService_ScannerRegisterStreamClient interface {
	Send(*ScannerRegisterData) error
	CloseAndRecv() (*RPCVoid, error)
	grpc.ClientStream
}

type controllerScanServiceScannerRegisterStreamClient struct {
	grpc.ClientStream
}

func (x *controllerScanServiceScannerRegisterStreamClient) Send(m *ScannerRegisterData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controllerScanServiceScannerRegisterStreamClient) CloseAndRecv() (*RPCVoid, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RPCVoid)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerScanServiceClient) ScannerDeregister(ctx context.Context, in *ScannerDeregisterData, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := grpc.Invoke(ctx, "/share.ControllerScanService/ScannerDeregister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerScanServiceClient) SubmitScanResult(ctx context.Context, in *ScanResult, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := grpc.Invoke(ctx, "/share.ControllerScanService/SubmitScanResult", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ControllerScanService service

type ControllerScanServiceServer interface {
	ScannerRegister(context.Context, *ScannerRegisterData) (*RPCVoid, error)
	ScannerRegisterStream(ControllerScanService_ScannerRegisterStreamServer) error
	ScannerDeregister(context.Context, *ScannerDeregisterData) (*RPCVoid, error)
	SubmitScanResult(context.Context, *ScanResult) (*RPCVoid, error)
}

func RegisterControllerScanServiceServer(s *grpc.Server, srv ControllerScanServiceServer) {
	s.RegisterService(&_ControllerScanService_serviceDesc, srv)
}

func _ControllerScanService_ScannerRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScannerRegisterData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerScanServiceServer).ScannerRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerScanService/ScannerRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerScanServiceServer).ScannerRegister(ctx, req.(*ScannerRegisterData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerScanService_ScannerRegisterStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControllerScanServiceServer).ScannerRegisterStream(&controllerScanServiceScannerRegisterStreamServer{stream})
}

type ControllerScanService_ScannerRegisterStreamServer interface {
	SendAndClose(*RPCVoid) error
	Recv() (*ScannerRegisterData, error)
	grpc.ServerStream
}

type controllerScanServiceScannerRegisterStreamServer struct {
	grpc.ServerStream
}

func (x *controllerScanServiceScannerRegisterStreamServer) SendAndClose(m *RPCVoid) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controllerScanServiceScannerRegisterStreamServer) Recv() (*ScannerRegisterData, error) {
	m := new(ScannerRegisterData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ControllerScanService_ScannerDeregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScannerDeregisterData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerScanServiceServer).ScannerDeregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerScanService/ScannerDeregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerScanServiceServer).ScannerDeregister(ctx, req.(*ScannerDeregisterData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerScanService_SubmitScanResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerScanServiceServer).SubmitScanResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerScanService/SubmitScanResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerScanServiceServer).SubmitScanResult(ctx, req.(*ScanResult))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControllerScanService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "share.ControllerScanService",
	HandlerType: (*ControllerScanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScannerRegister",
			Handler:    _ControllerScanService_ScannerRegister_Handler,
		},
		{
			MethodName: "ScannerDeregister",
			Handler:    _ControllerScanService_ScannerDeregister_Handler,
		},
		{
			MethodName: "SubmitScanResult",
			Handler:    _ControllerScanService_SubmitScanResult_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ScannerRegisterStream",
			Handler:       _ControllerScanService_ScannerRegisterStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "controller_service.proto",
}

// Client API for ControllerUpgradeService service

type ControllerUpgradeServiceClient interface {
	UpgradeScannerDB(ctx context.Context, opts ...grpc.CallOption) (ControllerUpgradeService_UpgradeScannerDBClient, error)
	SupportRegularDB(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSBoolean, error)
	SupportUpgradeDB(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSBoolean, error)
}

type controllerUpgradeServiceClient struct {
	cc *grpc.ClientConn
}

func NewControllerUpgradeServiceClient(cc *grpc.ClientConn) ControllerUpgradeServiceClient {
	return &controllerUpgradeServiceClient{cc}
}

func (c *controllerUpgradeServiceClient) UpgradeScannerDB(ctx context.Context, opts ...grpc.CallOption) (ControllerUpgradeService_UpgradeScannerDBClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ControllerUpgradeService_serviceDesc.Streams[0], c.cc, "/share.ControllerUpgradeService/UpgradeScannerDB", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerUpgradeServiceUpgradeScannerDBClient{stream}
	return x, nil
}

type ControllerUpgradeService_UpgradeScannerDBClient interface {
	Send(*CLUSFilePacket) error
	CloseAndRecv() (*RPCVoid, error)
	grpc.ClientStream
}

type controllerUpgradeServiceUpgradeScannerDBClient struct {
	grpc.ClientStream
}

func (x *controllerUpgradeServiceUpgradeScannerDBClient) Send(m *CLUSFilePacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controllerUpgradeServiceUpgradeScannerDBClient) CloseAndRecv() (*RPCVoid, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RPCVoid)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerUpgradeServiceClient) SupportRegularDB(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSBoolean, error) {
	out := new(CLUSBoolean)
	err := grpc.Invoke(ctx, "/share.ControllerUpgradeService/SupportRegularDB", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerUpgradeServiceClient) SupportUpgradeDB(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSBoolean, error) {
	out := new(CLUSBoolean)
	err := grpc.Invoke(ctx, "/share.ControllerUpgradeService/SupportUpgradeDB", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ControllerUpgradeService service

type ControllerUpgradeServiceServer interface {
	UpgradeScannerDB(ControllerUpgradeService_UpgradeScannerDBServer) error
	SupportRegularDB(context.Context, *RPCVoid) (*CLUSBoolean, error)
	SupportUpgradeDB(context.Context, *RPCVoid) (*CLUSBoolean, error)
}

func RegisterControllerUpgradeServiceServer(s *grpc.Server, srv ControllerUpgradeServiceServer) {
	s.RegisterService(&_ControllerUpgradeService_serviceDesc, srv)
}

func _ControllerUpgradeService_UpgradeScannerDB_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControllerUpgradeServiceServer).UpgradeScannerDB(&controllerUpgradeServiceUpgradeScannerDBServer{stream})
}

type ControllerUpgradeService_UpgradeScannerDBServer interface {
	SendAndClose(*RPCVoid) error
	Recv() (*CLUSFilePacket, error)
	grpc.ServerStream
}

type controllerUpgradeServiceUpgradeScannerDBServer struct {
	grpc.ServerStream
}

func (x *controllerUpgradeServiceUpgradeScannerDBServer) SendAndClose(m *RPCVoid) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controllerUpgradeServiceUpgradeScannerDBServer) Recv() (*CLUSFilePacket, error) {
	m := new(CLUSFilePacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ControllerUpgradeService_SupportRegularDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerUpgradeServiceServer).SupportRegularDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerUpgradeService/SupportRegularDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerUpgradeServiceServer).SupportRegularDB(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerUpgradeService_SupportUpgradeDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerUpgradeServiceServer).SupportUpgradeDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerUpgradeService/SupportUpgradeDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerUpgradeServiceServer).SupportUpgradeDB(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControllerUpgradeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "share.ControllerUpgradeService",
	HandlerType: (*ControllerUpgradeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SupportRegularDB",
			Handler:    _ControllerUpgradeService_SupportRegularDB_Handler,
		},
		{
			MethodName: "SupportUpgradeDB",
			Handler:    _ControllerUpgradeService_SupportUpgradeDB_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpgradeScannerDB",
			Handler:       _ControllerUpgradeService_UpgradeScannerDB_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "controller_service.proto",
}

// Client API for ControllerAgentService service

type ControllerAgentServiceClient interface {
	RequestAdmission(ctx context.Context, in *CLUSAdmissionRequest, opts ...grpc.CallOption) (*CLUSAdmissionResponse, error)
	ReportProcProfile(ctx context.Context, in *CLUSProcProfileArray, opts ...grpc.CallOption) (*CLUSReportResponse, error)
	ReportFileAccessRule(ctx context.Context, in *CLUSFileAccessRuleArray, opts ...grpc.CallOption) (*CLUSReportResponse, error)
	ReportConnections(ctx context.Context, in *CLUSConnectionArray, opts ...grpc.CallOption) (*CLUSReportResponse, error)
}

type controllerAgentServiceClient struct {
	cc *grpc.ClientConn
}

func NewControllerAgentServiceClient(cc *grpc.ClientConn) ControllerAgentServiceClient {
	return &controllerAgentServiceClient{cc}
}

func (c *controllerAgentServiceClient) RequestAdmission(ctx context.Context, in *CLUSAdmissionRequest, opts ...grpc.CallOption) (*CLUSAdmissionResponse, error) {
	out := new(CLUSAdmissionResponse)
	err := grpc.Invoke(ctx, "/share.ControllerAgentService/RequestAdmission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerAgentServiceClient) ReportProcProfile(ctx context.Context, in *CLUSProcProfileArray, opts ...grpc.CallOption) (*CLUSReportResponse, error) {
	out := new(CLUSReportResponse)
	err := grpc.Invoke(ctx, "/share.ControllerAgentService/ReportProcProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerAgentServiceClient) ReportFileAccessRule(ctx context.Context, in *CLUSFileAccessRuleArray, opts ...grpc.CallOption) (*CLUSReportResponse, error) {
	out := new(CLUSReportResponse)
	err := grpc.Invoke(ctx, "/share.ControllerAgentService/ReportFileAccessRule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerAgentServiceClient) ReportConnections(ctx context.Context, in *CLUSConnectionArray, opts ...grpc.CallOption) (*CLUSReportResponse, error) {
	out := new(CLUSReportResponse)
	err := grpc.Invoke(ctx, "/share.ControllerAgentService/ReportConnections", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ControllerAgentService service

type ControllerAgentServiceServer interface {
	RequestAdmission(context.Context, *CLUSAdmissionRequest) (*CLUSAdmissionResponse, error)
	ReportProcProfile(context.Context, *CLUSProcProfileArray) (*CLUSReportResponse, error)
	ReportFileAccessRule(context.Context, *CLUSFileAccessRuleArray) (*CLUSReportResponse, error)
	ReportConnections(context.Context, *CLUSConnectionArray) (*CLUSReportResponse, error)
}

func RegisterControllerAgentServiceServer(s *grpc.Server, srv ControllerAgentServiceServer) {
	s.RegisterService(&_ControllerAgentService_serviceDesc, srv)
}

func _ControllerAgentService_RequestAdmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSAdmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerAgentServiceServer).RequestAdmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerAgentService/RequestAdmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerAgentServiceServer).RequestAdmission(ctx, req.(*CLUSAdmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerAgentService_ReportProcProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSProcProfileArray)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerAgentServiceServer).ReportProcProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerAgentService/ReportProcProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerAgentServiceServer).ReportProcProfile(ctx, req.(*CLUSProcProfileArray))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerAgentService_ReportFileAccessRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFileAccessRuleArray)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerAgentServiceServer).ReportFileAccessRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerAgentService/ReportFileAccessRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerAgentServiceServer).ReportFileAccessRule(ctx, req.(*CLUSFileAccessRuleArray))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerAgentService_ReportConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSConnectionArray)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerAgentServiceServer).ReportConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerAgentService/ReportConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerAgentServiceServer).ReportConnections(ctx, req.(*CLUSConnectionArray))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControllerAgentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "share.ControllerAgentService",
	HandlerType: (*ControllerAgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestAdmission",
			Handler:    _ControllerAgentService_RequestAdmission_Handler,
		},
		{
			MethodName: "ReportProcProfile",
			Handler:    _ControllerAgentService_ReportProcProfile_Handler,
		},
		{
			MethodName: "ReportFileAccessRule",
			Handler:    _ControllerAgentService_ReportFileAccessRule_Handler,
		},
		{
			MethodName: "ReportConnections",
			Handler:    _ControllerAgentService_ReportConnections_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller_service.proto",
}

// Client API for ControllerCtrlService service

type ControllerCtrlServiceClient interface {
	ReqSync(ctx context.Context, in *CLUSSyncRequest, opts ...grpc.CallOption) (*CLUSSyncReply, error)
	ReqSyncStream(ctx context.Context, in *CLUSSyncRequest, opts ...grpc.CallOption) (ControllerCtrlService_ReqSyncStreamClient, error)
	ReportConnections(ctx context.Context, in *CLUSConnectionArray, opts ...grpc.CallOption) (*RPCVoid, error)
	GetControllerCounter(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSControllerCounter, error)
	DeleteConversation(ctx context.Context, in *CLUSGraphOps, opts ...grpc.CallOption) (*RPCVoid, error)
	DeleteEndpoint(ctx context.Context, in *CLUSGraphOps, opts ...grpc.CallOption) (*RPCVoid, error)
	SetEndpointAlias(ctx context.Context, in *CLUSGraphOps, opts ...grpc.CallOption) (*RPCVoid, error)
	CheckPolicySyncStatus(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSPolicySyncStatus, error)
	TriggerSync(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*RPCVoid, error)
	ProfilingCmd(ctx context.Context, in *CLUSProfilingRequest, opts ...grpc.CallOption) (*RPCVoid, error)
	TriggerSyncLearnedPolicy(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*RPCVoid, error)
	PauseResumeStoreWatcher(ctx context.Context, in *CLUSStoreWatcherInfo, opts ...grpc.CallOption) (*RPCVoid, error)
	KickLoginSessions(ctx context.Context, in *CLUSKickLoginSessionsRequest, opts ...grpc.CallOption) (*RPCVoid, error)
	GetStats(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSStats, error)
	ResetLoginTokenTimer(ctx context.Context, in *CLUSLoginTokenInfo, opts ...grpc.CallOption) (*RPCVoid, error)
	ReportK8SResToOPA(ctx context.Context, in *CLUSKubernetesResInfo, opts ...grpc.CallOption) (*RPCVoid, error)
}

type controllerCtrlServiceClient struct {
	cc *grpc.ClientConn
}

func NewControllerCtrlServiceClient(cc *grpc.ClientConn) ControllerCtrlServiceClient {
	return &controllerCtrlServiceClient{cc}
}

func (c *controllerCtrlServiceClient) ReqSync(ctx context.Context, in *CLUSSyncRequest, opts ...grpc.CallOption) (*CLUSSyncReply, error) {
	out := new(CLUSSyncReply)
	err := grpc.Invoke(ctx, "/share.ControllerCtrlService/ReqSync", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) ReqSyncStream(ctx context.Context, in *CLUSSyncRequest, opts ...grpc.CallOption) (ControllerCtrlService_ReqSyncStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ControllerCtrlService_serviceDesc.Streams[0], c.cc, "/share.ControllerCtrlService/ReqSyncStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerCtrlServiceReqSyncStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ControllerCtrlService_ReqSyncStreamClient interface {
	Recv() (*CLUSSyncReply, error)
	grpc.ClientStream
}

type controllerCtrlServiceReqSyncStreamClient struct {
	grpc.ClientStream
}

func (x *controllerCtrlServiceReqSyncStreamClient) Recv() (*CLUSSyncReply, error) {
	m := new(CLUSSyncReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerCtrlServiceClient) ReportConnections(ctx context.Context, in *CLUSConnectionArray, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := grpc.Invoke(ctx, "/share.ControllerCtrlService/ReportConnections", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) GetControllerCounter(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSControllerCounter, error) {
	out := new(CLUSControllerCounter)
	err := grpc.Invoke(ctx, "/share.ControllerCtrlService/GetControllerCounter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) DeleteConversation(ctx context.Context, in *CLUSGraphOps, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := grpc.Invoke(ctx, "/share.ControllerCtrlService/DeleteConversation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) DeleteEndpoint(ctx context.Context, in *CLUSGraphOps, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := grpc.Invoke(ctx, "/share.ControllerCtrlService/DeleteEndpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) SetEndpointAlias(ctx context.Context, in *CLUSGraphOps, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := grpc.Invoke(ctx, "/share.ControllerCtrlService/SetEndpointAlias", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) CheckPolicySyncStatus(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSPolicySyncStatus, error) {
	out := new(CLUSPolicySyncStatus)
	err := grpc.Invoke(ctx, "/share.ControllerCtrlService/CheckPolicySyncStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) TriggerSync(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := grpc.Invoke(ctx, "/share.ControllerCtrlService/TriggerSync", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) ProfilingCmd(ctx context.Context, in *CLUSProfilingRequest, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := grpc.Invoke(ctx, "/share.ControllerCtrlService/ProfilingCmd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) TriggerSyncLearnedPolicy(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := grpc.Invoke(ctx, "/share.ControllerCtrlService/TriggerSyncLearnedPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) PauseResumeStoreWatcher(ctx context.Context, in *CLUSStoreWatcherInfo, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := grpc.Invoke(ctx, "/share.ControllerCtrlService/PauseResumeStoreWatcher", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) KickLoginSessions(ctx context.Context, in *CLUSKickLoginSessionsRequest, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := grpc.Invoke(ctx, "/share.ControllerCtrlService/KickLoginSessions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) GetStats(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSStats, error) {
	out := new(CLUSStats)
	err := grpc.Invoke(ctx, "/share.ControllerCtrlService/GetStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) ResetLoginTokenTimer(ctx context.Context, in *CLUSLoginTokenInfo, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := grpc.Invoke(ctx, "/share.ControllerCtrlService/ResetLoginTokenTimer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) ReportK8SResToOPA(ctx context.Context, in *CLUSKubernetesResInfo, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := grpc.Invoke(ctx, "/share.ControllerCtrlService/ReportK8sResToOPA", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ControllerCtrlService service

type ControllerCtrlServiceServer interface {
	ReqSync(context.Context, *CLUSSyncRequest) (*CLUSSyncReply, error)
	ReqSyncStream(*CLUSSyncRequest, ControllerCtrlService_ReqSyncStreamServer) error
	ReportConnections(context.Context, *CLUSConnectionArray) (*RPCVoid, error)
	GetControllerCounter(context.Context, *RPCVoid) (*CLUSControllerCounter, error)
	DeleteConversation(context.Context, *CLUSGraphOps) (*RPCVoid, error)
	DeleteEndpoint(context.Context, *CLUSGraphOps) (*RPCVoid, error)
	SetEndpointAlias(context.Context, *CLUSGraphOps) (*RPCVoid, error)
	CheckPolicySyncStatus(context.Context, *RPCVoid) (*CLUSPolicySyncStatus, error)
	TriggerSync(context.Context, *RPCVoid) (*RPCVoid, error)
	ProfilingCmd(context.Context, *CLUSProfilingRequest) (*RPCVoid, error)
	TriggerSyncLearnedPolicy(context.Context, *RPCVoid) (*RPCVoid, error)
	PauseResumeStoreWatcher(context.Context, *CLUSStoreWatcherInfo) (*RPCVoid, error)
	KickLoginSessions(context.Context, *CLUSKickLoginSessionsRequest) (*RPCVoid, error)
	GetStats(context.Context, *RPCVoid) (*CLUSStats, error)
	ResetLoginTokenTimer(context.Context, *CLUSLoginTokenInfo) (*RPCVoid, error)
	ReportK8SResToOPA(context.Context, *CLUSKubernetesResInfo) (*RPCVoid, error)
}

func RegisterControllerCtrlServiceServer(s *grpc.Server, srv ControllerCtrlServiceServer) {
	s.RegisterService(&_ControllerCtrlService_serviceDesc, srv)
}

func _ControllerCtrlService_ReqSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).ReqSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/ReqSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).ReqSync(ctx, req.(*CLUSSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_ReqSyncStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CLUSSyncRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerCtrlServiceServer).ReqSyncStream(m, &controllerCtrlServiceReqSyncStreamServer{stream})
}

type ControllerCtrlService_ReqSyncStreamServer interface {
	Send(*CLUSSyncReply) error
	grpc.ServerStream
}

type controllerCtrlServiceReqSyncStreamServer struct {
	grpc.ServerStream
}

func (x *controllerCtrlServiceReqSyncStreamServer) Send(m *CLUSSyncReply) error {
	return x.ServerStream.SendMsg(m)
}

func _ControllerCtrlService_ReportConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSConnectionArray)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).ReportConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/ReportConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).ReportConnections(ctx, req.(*CLUSConnectionArray))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_GetControllerCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).GetControllerCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/GetControllerCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).GetControllerCounter(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_DeleteConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSGraphOps)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).DeleteConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/DeleteConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).DeleteConversation(ctx, req.(*CLUSGraphOps))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_DeleteEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSGraphOps)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).DeleteEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/DeleteEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).DeleteEndpoint(ctx, req.(*CLUSGraphOps))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_SetEndpointAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSGraphOps)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).SetEndpointAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/SetEndpointAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).SetEndpointAlias(ctx, req.(*CLUSGraphOps))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_CheckPolicySyncStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).CheckPolicySyncStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/CheckPolicySyncStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).CheckPolicySyncStatus(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_TriggerSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).TriggerSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/TriggerSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).TriggerSync(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_ProfilingCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSProfilingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).ProfilingCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/ProfilingCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).ProfilingCmd(ctx, req.(*CLUSProfilingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_TriggerSyncLearnedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).TriggerSyncLearnedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/TriggerSyncLearnedPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).TriggerSyncLearnedPolicy(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_PauseResumeStoreWatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSStoreWatcherInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).PauseResumeStoreWatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/PauseResumeStoreWatcher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).PauseResumeStoreWatcher(ctx, req.(*CLUSStoreWatcherInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_KickLoginSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSKickLoginSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).KickLoginSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/KickLoginSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).KickLoginSessions(ctx, req.(*CLUSKickLoginSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).GetStats(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_ResetLoginTokenTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSLoginTokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).ResetLoginTokenTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/ResetLoginTokenTimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).ResetLoginTokenTimer(ctx, req.(*CLUSLoginTokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_ReportK8SResToOPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSKubernetesResInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).ReportK8SResToOPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/ReportK8SResToOPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).ReportK8SResToOPA(ctx, req.(*CLUSKubernetesResInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControllerCtrlService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "share.ControllerCtrlService",
	HandlerType: (*ControllerCtrlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReqSync",
			Handler:    _ControllerCtrlService_ReqSync_Handler,
		},
		{
			MethodName: "ReportConnections",
			Handler:    _ControllerCtrlService_ReportConnections_Handler,
		},
		{
			MethodName: "GetControllerCounter",
			Handler:    _ControllerCtrlService_GetControllerCounter_Handler,
		},
		{
			MethodName: "DeleteConversation",
			Handler:    _ControllerCtrlService_DeleteConversation_Handler,
		},
		{
			MethodName: "DeleteEndpoint",
			Handler:    _ControllerCtrlService_DeleteEndpoint_Handler,
		},
		{
			MethodName: "SetEndpointAlias",
			Handler:    _ControllerCtrlService_SetEndpointAlias_Handler,
		},
		{
			MethodName: "CheckPolicySyncStatus",
			Handler:    _ControllerCtrlService_CheckPolicySyncStatus_Handler,
		},
		{
			MethodName: "TriggerSync",
			Handler:    _ControllerCtrlService_TriggerSync_Handler,
		},
		{
			MethodName: "ProfilingCmd",
			Handler:    _ControllerCtrlService_ProfilingCmd_Handler,
		},
		{
			MethodName: "TriggerSyncLearnedPolicy",
			Handler:    _ControllerCtrlService_TriggerSyncLearnedPolicy_Handler,
		},
		{
			MethodName: "PauseResumeStoreWatcher",
			Handler:    _ControllerCtrlService_PauseResumeStoreWatcher_Handler,
		},
		{
			MethodName: "KickLoginSessions",
			Handler:    _ControllerCtrlService_KickLoginSessions_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _ControllerCtrlService_GetStats_Handler,
		},
		{
			MethodName: "ResetLoginTokenTimer",
			Handler:    _ControllerCtrlService_ResetLoginTokenTimer_Handler,
		},
		{
			MethodName: "ReportK8sResToOPA",
			Handler:    _ControllerCtrlService_ReportK8SResToOPA_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReqSyncStream",
			Handler:       _ControllerCtrlService_ReqSyncStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "controller_service.proto",
}

func init() { proto.RegisterFile("controller_service.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 2401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x59, 0x5f, 0x73, 0x1b, 0x49,
	0x11, 0x8f, 0x24, 0x3b, 0xb6, 0xc7, 0xb2, 0x23, 0x4f, 0x6c, 0x67, 0x4f, 0xf1, 0x05, 0xb3, 0x77,
	0x80, 0x2b, 0x05, 0x21, 0x88, 0x22, 0xb9, 0x5c, 0x38, 0x52, 0xb2, 0x64, 0x27, 0x3a, 0xcb, 0x8e,
	0x6e, 0x25, 0x27, 0xbc, 0x51, 0x13, 0xa9, 0x23, 0x6f, 0x79, 0xb5, 0xa3, 0xcc, 0x8e, 0x9c, 0x88,
	0x4f, 0xc0, 0x13, 0x4f, 0x54, 0x51, 0xf7, 0x1d, 0xf8, 0x0a, 0x3c, 0x52, 0xf0, 0xce, 0x57, 0xe0,
	0x3b, 0x50, 0xbc, 0x51, 0x3d, 0x7f, 0x76, 0x47, 0x2b, 0xe5, 0x92, 0xbc, 0x4d, 0xff, 0x66, 0xa6,
	0xbb, 0xa7, 0xa7, 0xff, 0xcd, 0x2e, 0xf1, 0xfa, 0x3c, 0x96, 0x82, 0x47, 0x11, 0x88, 0x3f, 0x24,
	0x20, 0xae, 0xc2, 0x3e, 0xdc, 0x1b, 0x0b, 0x2e, 0x39, 0x5d, 0x4e, 0x2e, 0x98, 0x80, 0x6a, 0xb9,
	0xcf, 0x47, 0x23, 0x1e, 0x6b, 0xb0, 0x4a, 0x92, 0x3e, 0x33, 0x63, 0xff, 0x1f, 0x05, 0x72, 0xab,
	0x3e, 0x60, 0x63, 0x09, 0xa2, 0xdb, 0x67, 0x71, 0x6b, 0xc4, 0x86, 0x10, 0xc0, 0x9b, 0x09, 0x24,
	0x92, 0x56, 0xc9, 0x6a, 0x00, 0xc3, 0x30, 0x91, 0x62, 0xea, 0x15, 0xf6, 0x0b, 0x07, 0x6b, 0x41,
	0x4a, 0xd3, 0x3b, 0x84, 0x04, 0x30, 0xe6, 0x49, 0x28, 0xb9, 0x98, 0x7a, 0x45, 0x35, 0xeb, 0x20,
	0xb4, 0x42, 0x4a, 0x3d, 0x36, 0xf4, 0x4a, 0x6a, 0x02, 0x87, 0x74, 0x9b, 0x2c, 0xf7, 0xf8, 0x25,
	0xc4, 0xde, 0x92, 0xc2, 0x34, 0x81, 0x7c, 0x50, 0x6e, 0x9b, 0x4d, 0x41, 0x24, 0xde, 0xf2, 0x7e,
	0xe1, 0x60, 0x35, 0x70, 0x10, 0xfa, 0x53, 0xb2, 0x69, 0xd4, 0x7b, 0x01, 0x22, 0x09, 0x79, 0xec,
	0x5d, 0x57, 0xdb, 0x73, 0x28, 0x9e, 0xe3, 0xe6, 0x53, 0x90, 0xb8, 0x33, 0x06, 0x91, 0x04, 0x90,
	0x8c, 0x79, 0x9c, 0x00, 0x9e, 0xc1, 0x62, 0xea, 0x0c, 0x1b, 0x41, 0x4a, 0xd3, 0x7d, 0xb2, 0x7e,
	0xca, 0xde, 0xa5, 0xd3, 0x45, 0x35, 0xed, 0x42, 0xd4, 0x27, 0xe5, 0xd6, 0x20, 0x82, 0x74, 0x49,
	0x49, 0x2d, 0x99, 0xc1, 0x50, 0x43, 0x33, 0xb6, 0x1a, 0xea, 0x03, 0xe6, 0x50, 0xfa, 0x25, 0xd9,
	0x30, 0x48, 0xf3, 0xb0, 0x17, 0x8e, 0x40, 0x1d, 0x76, 0x2d, 0x98, 0x05, 0xfd, 0x7f, 0x15, 0xc9,
	0x4d, 0x83, 0x68, 0x5b, 0x83, 0x68, 0x32, 0xc9, 0x50, 0x93, 0xc6, 0x8b, 0xa3, 0xe6, 0xa1, 0x95,
	0xa1, 0xef, 0x63, 0x06, 0xa3, 0x07, 0xe4, 0x86, 0xa2, 0x1b, 0x02, 0x98, 0x04, 0x25, 0x43, 0x5f,
	0x4c, 0x1e, 0xa6, 0x8f, 0xc9, 0xb2, 0x82, 0xbc, 0xd2, 0x7e, 0xe9, 0x60, 0xbd, 0xf6, 0x93, 0x7b,
	0xca, 0x4d, 0xee, 0x2d, 0x10, 0x7c, 0x4f, 0xad, 0x3b, 0x8a, 0xa5, 0x98, 0x06, 0x7a, 0x0f, 0xdd,
	0x23, 0x6b, 0x41, 0xa7, 0xd1, 0x05, 0x71, 0x05, 0xc2, 0x9c, 0x35, 0x03, 0xf0, 0x98, 0x29, 0xd1,
	0xe1, 0x42, 0xaa, 0x63, 0x6e, 0x04, 0xb3, 0x20, 0xdd, 0x24, 0xc5, 0x56, 0xd3, 0x5c, 0x65, 0xb1,
	0xd5, 0xac, 0x06, 0x84, 0x64, 0x82, 0xd0, 0x79, 0x2e, 0xc1, 0xfa, 0x1c, 0x0e, 0xe9, 0x3d, 0xb2,
	0x7c, 0xc5, 0xa2, 0x89, 0x3e, 0xd0, 0x7a, 0xcd, 0x73, 0x14, 0x7e, 0x31, 0x89, 0x62, 0x10, 0xec,
	0x55, 0x18, 0x85, 0x72, 0x1a, 0xe8, 0x65, 0x5f, 0x17, 0xbf, 0x2a, 0xf8, 0x3f, 0x23, 0x3b, 0xd6,
	0xb6, 0x20, 0x5c, 0x5b, 0x6a, 0xe1, 0x05, 0x2b, 0xdc, 0xff, 0x96, 0x6c, 0x36, 0xda, 0xe7, 0xdd,
	0xe3, 0x30, 0x82, 0x0e, 0xeb, 0x5f, 0x82, 0xa4, 0x94, 0x2c, 0xe1, 0x4a, 0xb5, 0xa6, 0x1c, 0xa8,
	0x31, 0x62, 0x67, 0x2c, 0x35, 0xa9, 0x1a, 0xa3, 0xa2, 0x6d, 0x88, 0x8d, 0x5b, 0xe0, 0xd0, 0xff,
	0x23, 0xd9, 0x46, 0x5e, 0xf5, 0xc1, 0x28, 0x4c, 0xf0, 0x52, 0x6c, 0x2c, 0xe5, 0x64, 0xd2, 0x5d,
	0x72, 0xfd, 0x19, 0x4f, 0x64, 0xab, 0x69, 0xf8, 0x19, 0x0a, 0xfd, 0x15, 0x47, 0x8d, 0xce, 0xb9,
	0xf6, 0xb6, 0x52, 0x90, 0xd2, 0x18, 0x2b, 0x38, 0x3e, 0x85, 0x11, 0xc6, 0xdc, 0x92, 0x9a, 0x75,
	0x10, 0xbf, 0x45, 0x76, 0x72, 0xb2, 0x4d, 0x10, 0x78, 0x64, 0xa5, 0x1e, 0x45, 0xfc, 0x2d, 0x0c,
	0x94, 0x06, 0xab, 0x81, 0x25, 0x51, 0x8d, 0x00, 0x58, 0xc2, 0x63, 0xab, 0x86, 0xa6, 0xfc, 0xbf,
	0x15, 0x08, 0x45, 0x5e, 0x1d, 0xc1, 0xfb, 0x1d, 0xc1, 0x5f, 0x87, 0x11, 0x66, 0x05, 0xbc, 0xfa,
	0xa7, 0x82, 0x4f, 0xc6, 0xca, 0x10, 0xfa, 0x30, 0x19, 0xb0, 0xd0, 0x42, 0x94, 0x2c, 0x75, 0x98,
	0xbc, 0x30, 0x89, 0x40, 0x8d, 0x11, 0x3b, 0x4f, 0x52, 0xdf, 0x51, 0x63, 0xb4, 0xe4, 0x79, 0x38,
	0x50, 0xce, 0xb2, 0x1c, 0xe0, 0x10, 0x57, 0x3d, 0x63, 0xc9, 0x85, 0x72, 0x92, 0x72, 0xa0, 0xc6,
	0xa8, 0x6e, 0xbd, 0x2f, 0xd1, 0xff, 0x57, 0xb4, 0xba, 0x9a, 0xf2, 0x9f, 0x6b, 0xab, 0x3b, 0xda,
	0xd6, 0x85, 0x60, 0x53, 0xfa, 0x90, 0xac, 0x21, 0x06, 0x49, 0x02, 0x18, 0xfe, 0xe8, 0xeb, 0x9f,
	0x19, 0xd7, 0x99, 0x3f, 0x5d, 0x90, 0xad, 0xf5, 0x99, 0x36, 0x25, 0xba, 0x44, 0xbd, 0x8f, 0x58,
	0x30, 0xf9, 0x18, 0x0b, 0xec, 0x92, 0xeb, 0xc7, 0x61, 0x24, 0x41, 0x58, 0x73, 0x6a, 0x6a, 0x91,
	0x15, 0xfc, 0x53, 0x72, 0x6b, 0x5e, 0x84, 0x56, 0xbb, 0x46, 0x96, 0x91, 0xb0, 0x2a, 0xef, 0x39,
	0x2a, 0xcf, 0x69, 0x14, 0xe8, 0xa5, 0xfe, 0x9f, 0x56, 0xb5, 0x17, 0x37, 0x78, 0x1c, 0x83, 0xb2,
	0x8a, 0xba, 0xf6, 0x21, 0xc4, 0x32, 0x75, 0x3c, 0x4b, 0xfe, 0x90, 0xf7, 0x35, 0xa2, 0x10, 0x62,
	0xf9, 0xb2, 0x6d, 0x74, 0x4d, 0x69, 0x95, 0x49, 0x55, 0x00, 0xbf, 0x6c, 0x9b, 0x9b, 0x4b, 0xe9,
	0x6c, 0x5f, 0xab, 0xa3, 0xae, 0xb0, 0x1c, 0xa4, 0x74, 0xb6, 0xaf, 0xd5, 0x31, 0x77, 0x99, 0xd2,
	0x58, 0x13, 0xba, 0x7d, 0x3e, 0x06, 0x73, 0x9d, 0x9a, 0x40, 0xbd, 0xcf, 0x40, 0xbe, 0xe5, 0xe2,
	0xd2, 0x5b, 0xd5, 0x7a, 0x1b, 0x12, 0x23, 0x40, 0xf3, 0x55, 0x99, 0x65, 0x4d, 0x85, 0x9d, 0x83,
	0xa8, 0x6a, 0x92, 0x65, 0x1e, 0xa2, 0xe7, 0x9d, 0xb4, 0xe3, 0x91, 0x95, 0x56, 0xa7, 0x83, 0x85,
	0xcf, 0x5b, 0x57, 0x93, 0x96, 0xc4, 0x5a, 0x50, 0x1f, 0x8f, 0xa3, 0xb0, 0xcf, 0x94, 0x7b, 0x95,
	0x75, 0x2d, 0x70, 0x20, 0xd4, 0xf5, 0x70, 0x2a, 0x21, 0xf1, 0x36, 0xf6, 0x0b, 0x07, 0x4b, 0x81,
	0x26, 0xf4, 0xe9, 0x54, 0xb4, 0x25, 0xde, 0xa6, 0xa9, 0x2f, 0x86, 0x46, 0x9e, 0xc7, 0xa1, 0x48,
	0x64, 0x17, 0x20, 0xae, 0x4b, 0xef, 0x86, 0xe6, 0xe9, 0x40, 0xa8, 0x6f, 0x9b, 0xa5, 0x0b, 0x2a,
	0x5a, 0xdf, 0x0c, 0x41, 0xee, 0xbd, 0x0b, 0x4c, 0xdb, 0xad, 0xa6, 0xb7, 0xa5, 0xb9, 0x5b, 0x5a,
	0x4b, 0xbe, 0x02, 0x11, 0xca, 0xa9, 0x47, 0xad, 0x64, 0x4d, 0x63, 0xb5, 0xe8, 0xf0, 0x28, 0xec,
	0x4f, 0x4d, 0xb4, 0xdc, 0xd4, 0x75, 0xcb, 0xc5, 0x94, 0x2d, 0xe2, 0xa1, 0x80, 0x24, 0xf1, 0xb6,
	0x75, 0x52, 0x30, 0x24, 0xee, 0x3e, 0x7a, 0x27, 0x41, 0xc4, 0x2c, 0xea, 0x00, 0x08, 0x6f, 0x47,
	0x4d, 0xcf, 0x60, 0x18, 0x07, 0x6d, 0xde, 0x37, 0x0b, 0x76, 0xd5, 0x82, 0x0c, 0x40, 0xdd, 0xb4,
	0xac, 0xd6, 0xc0, 0xbb, 0xa5, 0x75, 0xb3, 0x34, 0xce, 0xbd, 0x08, 0x79, 0xc4, 0xd0, 0x94, 0x9e,
	0x9e, 0xb3, 0x34, 0xfa, 0x65, 0x9b, 0x0f, 0xcf, 0x5b, 0x4d, 0xef, 0x33, 0xed, 0x97, 0x9a, 0xc2,
	0xec, 0xf0, 0xfb, 0xd7, 0xaf, 0xbd, 0xaa, 0x92, 0x83, 0x43, 0x75, 0xfa, 0xab, 0xfe, 0xd1, 0x3b,
	0xf4, 0xb8, 0xdb, 0x0a, 0x4e, 0x69, 0xd4, 0xad, 0xc7, 0xbb, 0xe1, 0x00, 0xfa, 0x4c, 0x78, 0x7b,
	0x5a, 0xb7, 0x14, 0xc0, 0xd9, 0x53, 0x48, 0x2e, 0x7a, 0xbc, 0x7b, 0x25, 0xbc, 0xcf, 0xf5, 0x6c,
	0x0a, 0xa8, 0x73, 0x85, 0xf1, 0xa5, 0x3a, 0x8a, 0x77, 0xc7, 0x9c, 0xcb, 0x02, 0x68, 0xb3, 0xde,
	0x68, 0xfc, 0x7c, 0x0c, 0xb1, 0xf7, 0x23, 0x6d, 0x33, 0x43, 0xa2, 0x77, 0x9c, 0xbf, 0x8d, 0x5a,
	0x63, 0x6f, 0x5f, 0xe1, 0x9a, 0xc0, 0xb8, 0x3f, 0xfe, 0xae, 0x79, 0xe6, 0xfd, 0x58, 0xc7, 0x3d,
	0x8e, 0xd1, 0x2b, 0x8e, 0xc6, 0xe8, 0x23, 0x8d, 0x89, 0x68, 0xc5, 0x9e, 0xaf, 0xbd, 0xc2, 0x81,
	0xd0, 0x2b, 0x34, 0xd9, 0x8a, 0x1f, 0xdc, 0xf7, 0xbe, 0xd0, 0x5e, 0x91, 0x21, 0x7a, 0x1e, 0xdd,
	0x4f, 0xcd, 0x7f, 0xa9, 0xdc, 0xd1, 0x41, 0xfc, 0x33, 0x72, 0x73, 0x36, 0x13, 0xd8, 0x64, 0xb8,
	0x9e, 0x41, 0x36, 0xb7, 0xec, 0x38, 0xb9, 0x25, 0x9b, 0x0d, 0xdc, 0x95, 0xfe, 0x48, 0xd7, 0x02,
	0xec, 0xee, 0x84, 0x4c, 0x8b, 0xca, 0x2f, 0xd3, 0x5c, 0x8c, 0xc9, 0x65, 0xb3, 0x76, 0xcb, 0x70,
	0xca, 0x96, 0xe9, 0x69, 0x9b, 0xa4, 0xb1, 0x51, 0xd2, 0x73, 0xad, 0x58, 0x82, 0xb8, 0x62, 0x91,
	0xe9, 0xb8, 0x72, 0xa8, 0x5f, 0x27, 0x37, 0x50, 0x5c, 0x77, 0x1a, 0xf7, 0x9d, 0x4e, 0xb4, 0xc1,
	0x24, 0x0c, 0x79, 0xd6, 0x89, 0x5a, 0x5a, 0xd9, 0x58, 0xf0, 0x91, 0xad, 0x3a, 0x38, 0xf6, 0x9f,
	0x90, 0x8d, 0x8c, 0xc5, 0x38, 0x9a, 0x7e, 0x88, 0x81, 0x2a, 0xf6, 0xc5, 0xac, 0xd8, 0xfb, 0xdf,
	0x17, 0x74, 0x01, 0x68, 0xa4, 0x8d, 0x75, 0x83, 0x4f, 0x50, 0x41, 0x34, 0xfe, 0x53, 0xc1, 0xc6,
	0x17, 0x67, 0x7c, 0x00, 0xb6, 0xa5, 0x74, 0x10, 0x35, 0xcf, 0x03, 0x3e, 0x91, 0x61, 0x0c, 0xb6,
	0xa7, 0x74, 0x10, 0x94, 0xd6, 0x4e, 0xf8, 0x6b, 0x95, 0x5e, 0xcb, 0x81, 0x1a, 0x63, 0x73, 0xd0,
	0xe9, 0xaa, 0xa4, 0x5a, 0x0e, 0x8a, 0x9d, 0x2e, 0x3a, 0x21, 0x76, 0x2e, 0x3d, 0x96, 0x5c, 0x26,
	0xa6, 0x7f, 0xca, 0x00, 0x7f, 0x40, 0xca, 0xa8, 0x9a, 0x92, 0xf9, 0x7c, 0x9c, 0xa4, 0x06, 0x28,
	0x64, 0x06, 0x40, 0x8e, 0x3d, 0x6e, 0x4c, 0x52, 0xec, 0x71, 0x3c, 0xff, 0x51, 0x3c, 0x18, 0xf3,
	0x30, 0x96, 0x36, 0xb1, 0x5b, 0x1a, 0x5d, 0xb7, 0x1e, 0x85, 0x2c, 0xb1, 0x8d, 0xb9, 0x22, 0xfc,
	0xff, 0x15, 0xb4, 0x17, 0xe9, 0xb8, 0xc5, 0x1a, 0xd3, 0xb8, 0x80, 0xfe, 0xa5, 0xd3, 0xc8, 0x6c,
	0xa8, 0x46, 0x66, 0x81, 0xf9, 0x8d, 0xf4, 0x52, 0x2a, 0x7d, 0x9b, 0x2c, 0x63, 0xfa, 0x4d, 0x25,
	0x28, 0x02, 0xd3, 0x8c, 0x93, 0x5f, 0xf1, 0xa0, 0x25, 0x4c, 0x52, 0x2e, 0x46, 0xf7, 0xc8, 0x4a,
	0x1b, 0x98, 0x88, 0x61, 0xa0, 0x6a, 0xc7, 0xea, 0x61, 0xd1, 0x2b, 0x04, 0x16, 0xc2, 0x53, 0x35,
	0xc3, 0x84, 0xbd, 0x8a, 0x60, 0xa0, 0x2a, 0xc8, 0x6a, 0x90, 0xd2, 0x68, 0x43, 0xdd, 0xf0, 0x0e,
	0x7a, 0x5d, 0x55, 0x46, 0x4a, 0x41, 0x06, 0xa8, 0x30, 0x67, 0x89, 0x3c, 0xe5, 0x38, 0xbb, 0xa6,
	0x67, 0x53, 0xc0, 0xff, 0x4b, 0x81, 0xec, 0xce, 0x9e, 0xfd, 0x34, 0x4c, 0x46, 0x4c, 0xf6, 0x2f,
	0xe8, 0x6f, 0xc9, 0x7a, 0x23, 0x9a, 0x60, 0x2b, 0x89, 0xb0, 0xb2, 0xc3, 0x7a, 0xad, 0xea, 0xf6,
	0x14, 0xb3, 0xf6, 0x0a, 0xdc, 0xe5, 0xb8, 0xdb, 0xe8, 0xae, 0x76, 0x17, 0x3f, 0xbc, 0xdb, 0x59,
	0xee, 0xff, 0xbd, 0x60, 0xda, 0x1c, 0xb5, 0x08, 0x9d, 0xbb, 0x2b, 0x99, 0x9c, 0xe8, 0xb4, 0x09,
	0x6c, 0x00, 0xc2, 0xb4, 0x77, 0x86, 0xc2, 0x88, 0x4b, 0x3d, 0x53, 0xf9, 0xaf, 0x8d, 0xb8, 0x59,
	0x14, 0xd7, 0x39, 0x72, 0x4e, 0xd9, 0x3b, 0xd3, 0xd1, 0xe6, 0x50, 0xfa, 0x0d, 0x21, 0xd6, 0x10,
	0x80, 0x97, 0x89, 0x09, 0xe4, 0xf3, 0x85, 0xda, 0xdb, 0x65, 0x81, 0xb3, 0xc1, 0x7f, 0xab, 0xd5,
	0xef, 0x4a, 0x2e, 0xe0, 0xa5, 0xc2, 0x44, 0x2b, 0x7e, 0xad, 0x9c, 0xb3, 0x21, 0x45, 0x04, 0x22,
	0x6d, 0x54, 0x52, 0x1a, 0x33, 0xff, 0x09, 0xd8, 0x07, 0x26, 0x0e, 0xe9, 0xaf, 0xd2, 0xbc, 0x53,
	0x52, 0x79, 0xc7, 0x36, 0x74, 0x2e, 0xdb, 0xd9, 0xcc, 0xe3, 0xff, 0xa7, 0x40, 0xf6, 0x50, 0xf2,
	0x49, 0xd8, 0xbf, 0x6c, 0xf3, 0x61, 0x18, 0xdb, 0x12, 0xed, 0xe6, 0x97, 0xf7, 0x69, 0x70, 0x9f,
	0x2c, 0xf5, 0xa6, 0x63, 0x7d, 0x59, 0x9b, 0x69, 0x2f, 0x36, 0xc7, 0x0a, 0xd7, 0x04, 0x6a, 0x25,
	0x5e, 0x87, 0x79, 0x1d, 0xe9, 0x10, 0x30, 0x14, 0x3a, 0x3c, 0xf6, 0xba, 0xc7, 0x93, 0x28, 0x8a,
	0xb1, 0x7d, 0xd4, 0xd1, 0x30, 0x83, 0x61, 0xfa, 0x40, 0xda, 0xec, 0xd7, 0x4f, 0x44, 0x07, 0x41,
	0x4d, 0x91, 0x52, 0xed, 0xa7, 0x7e, 0x3e, 0xa5, 0xb4, 0xff, 0x67, 0xd3, 0xb4, 0x2b, 0xbd, 0xd4,
	0xf3, 0xfa, 0x83, 0xe6, 0xf5, 0xc8, 0x8a, 0x5a, 0x9d, 0x76, 0x82, 0x96, 0x9c, 0x53, 0xb6, 0xb4,
	0x58, 0xd9, 0x4c, 0x96, 0x39, 0x8e, 0x83, 0xf8, 0x0d, 0x9d, 0x44, 0x4f, 0x26, 0xaf, 0x40, 0xc4,
	0x20, 0x01, 0x9f, 0xe5, 0x4a, 0xa5, 0x5d, 0x72, 0xbd, 0xc9, 0xfb, 0x27, 0xe9, 0x1b, 0xcf, 0x50,
	0x33, 0xa9, 0x78, 0x4d, 0xa7, 0xe2, 0xbb, 0x07, 0xa4, 0x92, 0x2f, 0x29, 0x74, 0x95, 0x2c, 0x35,
	0x79, 0x0c, 0x95, 0x6b, 0x94, 0xe0, 0x03, 0x26, 0x81, 0x78, 0x50, 0x29, 0xdc, 0x7d, 0x44, 0xe8,
	0xbc, 0x13, 0xd0, 0x0a, 0x29, 0x77, 0xd8, 0x24, 0xb1, 0x68, 0xe5, 0x1a, 0xdd, 0x22, 0x1b, 0x01,
	0x24, 0x93, 0x51, 0x0a, 0x15, 0xee, 0x3e, 0x23, 0x3b, 0x0b, 0x6f, 0x14, 0x77, 0xe3, 0xc4, 0xe1,
	0x54, 0xdb, 0xbf, 0x72, 0x8d, 0x6e, 0x90, 0x35, 0x8d, 0x1c, 0xc3, 0xa0, 0x52, 0xa0, 0x9b, 0x84,
	0x68, 0x12, 0x2d, 0x53, 0x29, 0xd6, 0xce, 0xc8, 0xb6, 0x53, 0x34, 0xd8, 0xb8, 0xab, 0xbf, 0xc7,
	0xd0, 0x07, 0xa4, 0xd2, 0x4a, 0x9e, 0x06, 0x9d, 0x46, 0x83, 0x8f, 0xc6, 0xd8, 0x66, 0xc1, 0x80,
	0x6e, 0xda, 0x92, 0xd9, 0x69, 0xbc, 0xe0, 0xe1, 0xa0, 0x4a, 0x9d, 0x58, 0x3a, 0xe4, 0x3c, 0x02,
	0x16, 0xd7, 0xbe, 0x47, 0xdf, 0x4d, 0x19, 0x62, 0x15, 0xb0, 0x9f, 0x6b, 0x0c, 0xe3, 0x47, 0x64,
	0xdd, 0xf9, 0xf0, 0x31, 0xc7, 0xd3, 0x66, 0x97, 0x45, 0x1f, 0x47, 0x7e, 0xa7, 0xeb, 0x8c, 0xfa,
	0xe8, 0x43, 0xef, 0x98, 0x85, 0xef, 0xf9, 0x1a, 0x54, 0xdd, 0x72, 0xde, 0xdc, 0x68, 0xbe, 0x48,
	0xd6, 0xfe, 0x5a, 0x24, 0x3b, 0xb3, 0xba, 0x59, 0xa5, 0xbe, 0x21, 0x37, 0x72, 0x1f, 0x13, 0x68,
	0xf5, 0xfd, 0x1f, 0x19, 0xaa, 0x39, 0xa5, 0xe9, 0x51, 0xfa, 0x74, 0xb7, 0xcb, 0xba, 0x52, 0x00,
	0x1b, 0x7d, 0x0a, 0x93, 0x83, 0x02, 0xad, 0x93, 0xad, 0xb9, 0x2f, 0x00, 0x74, 0x6f, 0x96, 0xc5,
	0xec, 0xb7, 0x81, 0x39, 0x4d, 0x7e, 0x43, 0x2a, 0xdd, 0xc9, 0xab, 0x51, 0x28, 0xb3, 0x63, 0xd3,
	0x79, 0x4b, 0xe4, 0xb7, 0xd5, 0xfe, 0x59, 0x20, 0x5e, 0x66, 0x99, 0xf3, 0xf1, 0x50, 0xb0, 0x01,
	0x58, 0xe3, 0x3c, 0x26, 0x15, 0x8b, 0xd8, 0x6f, 0x3f, 0x74, 0x27, 0xf7, 0xc6, 0xd3, 0x1f, 0x22,
	0x16, 0x9c, 0xe9, 0x01, 0x2a, 0x34, 0xd6, 0xf1, 0x30, 0x9c, 0x44, 0x0c, 0x37, 0x7f, 0x84, 0x1f,
	0x39, 0xfb, 0x8c, 0xec, 0x8f, 0xdb, 0x57, 0xfb, 0x77, 0x91, 0xec, 0x66, 0x27, 0x51, 0x0f, 0x48,
	0x7b, 0x8e, 0x53, 0x8c, 0x4c, 0xe5, 0x1c, 0xe9, 0x27, 0x07, 0x7a, 0xdb, 0x61, 0x91, 0xff, 0x08,
	0x52, 0xdd, 0x5b, 0x3c, 0x69, 0xbc, 0xf1, 0x84, 0x6c, 0xe9, 0x40, 0x77, 0x9e, 0xe5, 0x33, 0xfc,
	0xf2, 0xcf, 0xfb, 0xaa, 0xfb, 0x96, 0xcf, 0x75, 0xa7, 0xdf, 0x91, 0x6d, 0x8d, 0xcc, 0x3e, 0x98,
	0x53, 0x2f, 0x7f, 0xcf, 0xd3, 0xfb, 0x87, 0x58, 0x7e, 0x6b, 0xf5, 0x73, 0x7a, 0x63, 0x5a, 0x5d,
	0xd8, 0x3f, 0x7f, 0x88, 0x57, 0xed, 0xbf, 0x2b, 0x6e, 0xe4, 0x60, 0x3a, 0xb6, 0x46, 0x7d, 0x48,
	0x56, 0x02, 0x78, 0x83, 0xc5, 0x9d, 0xee, 0x3a, 0xfb, 0x9d, 0x6e, 0xb8, 0xba, 0x3d, 0x87, 0x63,
	0x8b, 0xfb, 0x04, 0xb3, 0xda, 0x1b, 0xdd, 0x15, 0xa8, 0x58, 0xf9, 0xa4, 0xed, 0xf7, 0x0b, 0xf4,
	0xc9, 0xa7, 0x9e, 0x2f, 0x1f, 0x2b, 0x4d, 0xb2, 0xfd, 0x14, 0xe4, 0x7c, 0xcb, 0x9c, 0x77, 0xb3,
	0xbd, 0x59, 0x9e, 0xb9, 0xd5, 0x8f, 0x08, 0x6d, 0x42, 0x04, 0x12, 0x1a, 0x3c, 0xbe, 0x02, 0x91,
	0xe8, 0xd7, 0xf7, 0x4d, 0x67, 0x8f, 0xed, 0x7c, 0x17, 0x04, 0xeb, 0xa6, 0xde, 0x9a, 0xf6, 0xb6,
	0x1f, 0xb5, 0xed, 0x21, 0xa9, 0x74, 0x41, 0xda, 0x3d, 0xaa, 0xfd, 0xfd, 0xb8, 0x8d, 0x4d, 0xb2,
	0xa3, 0xda, 0xb4, 0xb9, 0x86, 0x2c, 0x7f, 0xe2, 0xdb, 0x73, 0x4d, 0x92, 0xb3, 0xf8, 0x17, 0x64,
	0xbd, 0x27, 0xc2, 0xe1, 0x10, 0x84, 0xba, 0xf5, 0xfc, 0xde, 0xbc, 0xd0, 0xc7, 0xa4, 0xac, 0x83,
	0x20, 0x8c, 0x87, 0x8d, 0xd1, 0x20, 0x1f, 0x21, 0x7a, 0xc2, 0xde, 0x75, 0x7e, 0xf3, 0xd7, 0xc4,
	0x73, 0x64, 0x99, 0xf6, 0x4e, 0x6b, 0xf4, 0x41, 0xc1, 0xc7, 0xe4, 0x96, 0x2a, 0xa4, 0xba, 0x76,
	0xba, 0x95, 0x76, 0x46, 0x87, 0x7c, 0x7b, 0x37, 0xc7, 0xe7, 0x19, 0xd9, 0x9a, 0xab, 0xb5, 0xf4,
	0x0b, 0x87, 0xc3, 0xfb, 0xda, 0xb4, 0x39, 0x4e, 0x3f, 0x27, 0xab, 0x58, 0xd6, 0x24, 0x93, 0xf3,
	0x26, 0xaf, 0xcc, 0xa8, 0x84, 0x2b, 0xea, 0x98, 0x12, 0x12, 0x90, 0x59, 0x83, 0xd2, 0x0b, 0x47,
	0x20, 0xa8, 0x1b, 0xa6, 0xb3, 0xad, 0xd3, 0x9c, 0xc0, 0xba, 0x0d, 0x91, 0x93, 0xaf, 0xb0, 0x8a,
	0xf6, 0xf8, 0xf3, 0x4e, 0x9d, 0xba, 0xee, 0x3c, 0xd7, 0xea, 0xe4, 0x59, 0xbc, 0xba, 0xae, 0xfe,
	0xbb, 0xfc, 0xfa, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x0f, 0xcc, 0x81, 0xb4, 0x19, 0x00,
	0x00,
}
