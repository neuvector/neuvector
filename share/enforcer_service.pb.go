// Code generated by protoc-gen-go. DO NOT EDIT.
// source: enforcer_service.proto

package share

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SnifferCmd int32

const (
	SnifferCmd_StartSniffer  SnifferCmd = 0
	SnifferCmd_StopSniffer   SnifferCmd = 1
	SnifferCmd_RemoveSniffer SnifferCmd = 2
)

var SnifferCmd_name = map[int32]string{
	0: "StartSniffer",
	1: "StopSniffer",
	2: "RemoveSniffer",
}
var SnifferCmd_value = map[string]int32{
	"StartSniffer":  0,
	"StopSniffer":   1,
	"RemoveSniffer": 2,
}

func (x SnifferCmd) String() string {
	return proto.EnumName(SnifferCmd_name, int32(x))
}
func (SnifferCmd) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type SnifferStatus int32

const (
	SnifferStatus_Failed  SnifferStatus = 0
	SnifferStatus_Running SnifferStatus = 1
	SnifferStatus_Stopped SnifferStatus = 2
)

var SnifferStatus_name = map[int32]string{
	0: "Failed",
	1: "Running",
	2: "Stopped",
}
var SnifferStatus_value = map[string]int32{
	"Failed":  0,
	"Running": 1,
	"Stopped": 2,
}

func (x SnifferStatus) String() string {
	return proto.EnumName(SnifferStatus_name, int32(x))
}
func (SnifferStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type CLUSKick struct {
	CtrlID string `protobuf:"bytes,1,opt,name=CtrlID" json:"CtrlID,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=Reason" json:"Reason,omitempty"`
}

func (m *CLUSKick) Reset()                    { *m = CLUSKick{} }
func (m *CLUSKick) String() string            { return proto.CompactTextString(m) }
func (*CLUSKick) ProtoMessage()               {}
func (*CLUSKick) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *CLUSKick) GetCtrlID() string {
	if m != nil {
		return m.CtrlID
	}
	return ""
}

func (m *CLUSKick) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type CLUSFilter struct {
	Workload string `protobuf:"bytes,1,opt,name=Workload" json:"Workload,omitempty"`
	ID       uint32 `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
	Start    uint32 `protobuf:"varint,3,opt,name=Start" json:"Start,omitempty"`
	Limit    uint32 `protobuf:"varint,4,opt,name=Limit" json:"Limit,omitempty"`
}

func (m *CLUSFilter) Reset()                    { *m = CLUSFilter{} }
func (m *CLUSFilter) String() string            { return proto.CompactTextString(m) }
func (*CLUSFilter) ProtoMessage()               {}
func (*CLUSFilter) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *CLUSFilter) GetWorkload() string {
	if m != nil {
		return m.Workload
	}
	return ""
}

func (m *CLUSFilter) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CLUSFilter) GetStart() uint32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *CLUSFilter) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type CLUSSession struct {
	ID             uint32 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Workload       string `protobuf:"bytes,2,opt,name=Workload" json:"Workload,omitempty"`
	EtherType      uint32 `protobuf:"varint,3,opt,name=EtherType" json:"EtherType,omitempty"`
	IPProto        uint32 `protobuf:"varint,4,opt,name=IPProto" json:"IPProto,omitempty"`
	ClientMAC      []byte `protobuf:"bytes,5,opt,name=ClientMAC,proto3" json:"ClientMAC,omitempty"`
	ServerMAC      []byte `protobuf:"bytes,6,opt,name=ServerMAC,proto3" json:"ServerMAC,omitempty"`
	ClientIP       []byte `protobuf:"bytes,7,opt,name=ClientIP,proto3" json:"ClientIP,omitempty"`
	ServerIP       []byte `protobuf:"bytes,8,opt,name=ServerIP,proto3" json:"ServerIP,omitempty"`
	ClientPort     uint32 `protobuf:"varint,9,opt,name=ClientPort" json:"ClientPort,omitempty"`
	ServerPort     uint32 `protobuf:"varint,10,opt,name=ServerPort" json:"ServerPort,omitempty"`
	ICMPCode       uint32 `protobuf:"varint,11,opt,name=ICMPCode" json:"ICMPCode,omitempty"`
	ICMPType       uint32 `protobuf:"varint,12,opt,name=ICMPType" json:"ICMPType,omitempty"`
	ClientState    uint32 `protobuf:"varint,13,opt,name=ClientState" json:"ClientState,omitempty"`
	ServerState    uint32 `protobuf:"varint,14,opt,name=ServerState" json:"ServerState,omitempty"`
	ClientPkts     uint32 `protobuf:"varint,15,opt,name=ClientPkts" json:"ClientPkts,omitempty"`
	ServerPkts     uint32 `protobuf:"varint,16,opt,name=ServerPkts" json:"ServerPkts,omitempty"`
	ClientBytes    uint64 `protobuf:"varint,17,opt,name=ClientBytes" json:"ClientBytes,omitempty"`
	ServerBytes    uint64 `protobuf:"varint,18,opt,name=ServerBytes" json:"ServerBytes,omitempty"`
	Application    uint32 `protobuf:"varint,19,opt,name=Application" json:"Application,omitempty"`
	Age            uint32 `protobuf:"varint,20,opt,name=Age" json:"Age,omitempty"`
	Idle           uint32 `protobuf:"varint,21,opt,name=Idle" json:"Idle,omitempty"`
	Life           uint32 `protobuf:"varint,22,opt,name=Life" json:"Life,omitempty"`
	Ingress        bool   `protobuf:"varint,23,opt,name=Ingress" json:"Ingress,omitempty"`
	Tap            bool   `protobuf:"varint,24,opt,name=Tap" json:"Tap,omitempty"`
	Mid            bool   `protobuf:"varint,25,opt,name=Mid" json:"Mid,omitempty"`
	PolicyId       uint32 `protobuf:"varint,26,opt,name=PolicyId" json:"PolicyId,omitempty"`
	PolicyAction   uint32 `protobuf:"varint,27,opt,name=PolicyAction" json:"PolicyAction,omitempty"`
	ClientAsmPkts  uint32 `protobuf:"varint,28,opt,name=ClientAsmPkts" json:"ClientAsmPkts,omitempty"`
	ServerAsmPkts  uint32 `protobuf:"varint,29,opt,name=ServerAsmPkts" json:"ServerAsmPkts,omitempty"`
	ClientAsmBytes uint64 `protobuf:"varint,30,opt,name=ClientAsmBytes" json:"ClientAsmBytes,omitempty"`
	ServerAsmBytes uint64 `protobuf:"varint,31,opt,name=ServerAsmBytes" json:"ServerAsmBytes,omitempty"`
	HostMode       bool   `protobuf:"varint,32,opt,name=HostMode" json:"HostMode,omitempty"`
	XffIP          []byte `protobuf:"bytes,33,opt,name=XffIP,proto3" json:"XffIP,omitempty"`
	XffApp         uint32 `protobuf:"varint,34,opt,name=XffApp" json:"XffApp,omitempty"`
	XffPort        uint32 `protobuf:"varint,35,opt,name=XffPort" json:"XffPort,omitempty"`
}

func (m *CLUSSession) Reset()                    { *m = CLUSSession{} }
func (m *CLUSSession) String() string            { return proto.CompactTextString(m) }
func (*CLUSSession) ProtoMessage()               {}
func (*CLUSSession) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *CLUSSession) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CLUSSession) GetWorkload() string {
	if m != nil {
		return m.Workload
	}
	return ""
}

func (m *CLUSSession) GetEtherType() uint32 {
	if m != nil {
		return m.EtherType
	}
	return 0
}

func (m *CLUSSession) GetIPProto() uint32 {
	if m != nil {
		return m.IPProto
	}
	return 0
}

func (m *CLUSSession) GetClientMAC() []byte {
	if m != nil {
		return m.ClientMAC
	}
	return nil
}

func (m *CLUSSession) GetServerMAC() []byte {
	if m != nil {
		return m.ServerMAC
	}
	return nil
}

func (m *CLUSSession) GetClientIP() []byte {
	if m != nil {
		return m.ClientIP
	}
	return nil
}

func (m *CLUSSession) GetServerIP() []byte {
	if m != nil {
		return m.ServerIP
	}
	return nil
}

func (m *CLUSSession) GetClientPort() uint32 {
	if m != nil {
		return m.ClientPort
	}
	return 0
}

func (m *CLUSSession) GetServerPort() uint32 {
	if m != nil {
		return m.ServerPort
	}
	return 0
}

func (m *CLUSSession) GetICMPCode() uint32 {
	if m != nil {
		return m.ICMPCode
	}
	return 0
}

func (m *CLUSSession) GetICMPType() uint32 {
	if m != nil {
		return m.ICMPType
	}
	return 0
}

func (m *CLUSSession) GetClientState() uint32 {
	if m != nil {
		return m.ClientState
	}
	return 0
}

func (m *CLUSSession) GetServerState() uint32 {
	if m != nil {
		return m.ServerState
	}
	return 0
}

func (m *CLUSSession) GetClientPkts() uint32 {
	if m != nil {
		return m.ClientPkts
	}
	return 0
}

func (m *CLUSSession) GetServerPkts() uint32 {
	if m != nil {
		return m.ServerPkts
	}
	return 0
}

func (m *CLUSSession) GetClientBytes() uint64 {
	if m != nil {
		return m.ClientBytes
	}
	return 0
}

func (m *CLUSSession) GetServerBytes() uint64 {
	if m != nil {
		return m.ServerBytes
	}
	return 0
}

func (m *CLUSSession) GetApplication() uint32 {
	if m != nil {
		return m.Application
	}
	return 0
}

func (m *CLUSSession) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *CLUSSession) GetIdle() uint32 {
	if m != nil {
		return m.Idle
	}
	return 0
}

func (m *CLUSSession) GetLife() uint32 {
	if m != nil {
		return m.Life
	}
	return 0
}

func (m *CLUSSession) GetIngress() bool {
	if m != nil {
		return m.Ingress
	}
	return false
}

func (m *CLUSSession) GetTap() bool {
	if m != nil {
		return m.Tap
	}
	return false
}

func (m *CLUSSession) GetMid() bool {
	if m != nil {
		return m.Mid
	}
	return false
}

func (m *CLUSSession) GetPolicyId() uint32 {
	if m != nil {
		return m.PolicyId
	}
	return 0
}

func (m *CLUSSession) GetPolicyAction() uint32 {
	if m != nil {
		return m.PolicyAction
	}
	return 0
}

func (m *CLUSSession) GetClientAsmPkts() uint32 {
	if m != nil {
		return m.ClientAsmPkts
	}
	return 0
}

func (m *CLUSSession) GetServerAsmPkts() uint32 {
	if m != nil {
		return m.ServerAsmPkts
	}
	return 0
}

func (m *CLUSSession) GetClientAsmBytes() uint64 {
	if m != nil {
		return m.ClientAsmBytes
	}
	return 0
}

func (m *CLUSSession) GetServerAsmBytes() uint64 {
	if m != nil {
		return m.ServerAsmBytes
	}
	return 0
}

func (m *CLUSSession) GetHostMode() bool {
	if m != nil {
		return m.HostMode
	}
	return false
}

func (m *CLUSSession) GetXffIP() []byte {
	if m != nil {
		return m.XffIP
	}
	return nil
}

func (m *CLUSSession) GetXffApp() uint32 {
	if m != nil {
		return m.XffApp
	}
	return 0
}

func (m *CLUSSession) GetXffPort() uint32 {
	if m != nil {
		return m.XffPort
	}
	return 0
}

type CLUSSessionArray struct {
	Sessions []*CLUSSession `protobuf:"bytes,1,rep,name=Sessions" json:"Sessions,omitempty"`
}

func (m *CLUSSessionArray) Reset()                    { *m = CLUSSessionArray{} }
func (m *CLUSSessionArray) String() string            { return proto.CompactTextString(m) }
func (*CLUSSessionArray) ProtoMessage()               {}
func (*CLUSSessionArray) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *CLUSSessionArray) GetSessions() []*CLUSSession {
	if m != nil {
		return m.Sessions
	}
	return nil
}

type CLUSSessionCounter struct {
	CurSessions     uint32 `protobuf:"varint,1,opt,name=CurSessions" json:"CurSessions,omitempty"`
	CurTCPSessions  uint32 `protobuf:"varint,2,opt,name=CurTCPSessions" json:"CurTCPSessions,omitempty"`
	CurUDPSessions  uint32 `protobuf:"varint,3,opt,name=CurUDPSessions" json:"CurUDPSessions,omitempty"`
	CurICMPSessions uint32 `protobuf:"varint,4,opt,name=CurICMPSessions" json:"CurICMPSessions,omitempty"`
	CurIPSessions   uint32 `protobuf:"varint,5,opt,name=CurIPSessions" json:"CurIPSessions,omitempty"`
}

func (m *CLUSSessionCounter) Reset()                    { *m = CLUSSessionCounter{} }
func (m *CLUSSessionCounter) String() string            { return proto.CompactTextString(m) }
func (*CLUSSessionCounter) ProtoMessage()               {}
func (*CLUSSessionCounter) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *CLUSSessionCounter) GetCurSessions() uint32 {
	if m != nil {
		return m.CurSessions
	}
	return 0
}

func (m *CLUSSessionCounter) GetCurTCPSessions() uint32 {
	if m != nil {
		return m.CurTCPSessions
	}
	return 0
}

func (m *CLUSSessionCounter) GetCurUDPSessions() uint32 {
	if m != nil {
		return m.CurUDPSessions
	}
	return 0
}

func (m *CLUSSessionCounter) GetCurICMPSessions() uint32 {
	if m != nil {
		return m.CurICMPSessions
	}
	return 0
}

func (m *CLUSSessionCounter) GetCurIPSessions() uint32 {
	if m != nil {
		return m.CurIPSessions
	}
	return 0
}

type CLUSDatapathCounter struct {
	RXPackets           uint64   `protobuf:"varint,1,opt,name=RXPackets" json:"RXPackets,omitempty"`
	RXDropPackets       uint64   `protobuf:"varint,2,opt,name=RXDropPackets" json:"RXDropPackets,omitempty"`
	TXPackets           uint64   `protobuf:"varint,3,opt,name=TXPackets" json:"TXPackets,omitempty"`
	TXDropPackets       uint64   `protobuf:"varint,4,opt,name=TXDropPackets" json:"TXDropPackets,omitempty"`
	ErrorPackets        uint64   `protobuf:"varint,5,opt,name=ErrorPackets" json:"ErrorPackets,omitempty"`
	NoWorkloadPackets   uint64   `protobuf:"varint,6,opt,name=NoWorkloadPackets" json:"NoWorkloadPackets,omitempty"`
	IPv4Packets         uint64   `protobuf:"varint,7,opt,name=IPv4Packets" json:"IPv4Packets,omitempty"`
	IPv6Packets         uint64   `protobuf:"varint,8,opt,name=IPv6Packets" json:"IPv6Packets,omitempty"`
	TCPPackets          uint64   `protobuf:"varint,9,opt,name=TCPPackets" json:"TCPPackets,omitempty"`
	TCPNoSessionPackets uint64   `protobuf:"varint,10,opt,name=TCPNoSessionPackets" json:"TCPNoSessionPackets,omitempty"`
	UDPPackets          uint64   `protobuf:"varint,11,opt,name=UDPPackets" json:"UDPPackets,omitempty"`
	ICMPPackets         uint64   `protobuf:"varint,12,opt,name=ICMPPackets" json:"ICMPPackets,omitempty"`
	OtherPackets        uint64   `protobuf:"varint,13,opt,name=OtherPackets" json:"OtherPackets,omitempty"`
	Fragments           uint64   `protobuf:"varint,14,opt,name=Fragments" json:"Fragments,omitempty"`
	TimeoutFragments    uint64   `protobuf:"varint,15,opt,name=TimeoutFragments" json:"TimeoutFragments,omitempty"`
	TotalSessions       uint64   `protobuf:"varint,16,opt,name=TotalSessions" json:"TotalSessions,omitempty"`
	TCPSessions         uint64   `protobuf:"varint,17,opt,name=TCPSessions" json:"TCPSessions,omitempty"`
	UDPSessions         uint64   `protobuf:"varint,18,opt,name=UDPSessions" json:"UDPSessions,omitempty"`
	ICMPSessions        uint64   `protobuf:"varint,19,opt,name=ICMPSessions" json:"ICMPSessions,omitempty"`
	IPSessions          uint64   `protobuf:"varint,20,opt,name=IPSessions" json:"IPSessions,omitempty"`
	DropMeters          uint64   `protobuf:"varint,21,opt,name=DropMeters" json:"DropMeters,omitempty"`
	ProxyMeters         uint64   `protobuf:"varint,22,opt,name=ProxyMeters" json:"ProxyMeters,omitempty"`
	CurMeters           uint64   `protobuf:"varint,23,opt,name=CurMeters" json:"CurMeters,omitempty"`
	CurLogCaches        uint64   `protobuf:"varint,24,opt,name=CurLogCaches" json:"CurLogCaches,omitempty"`
	FreedFragments      uint64   `protobuf:"varint,25,opt,name=FreedFragments" json:"FreedFragments,omitempty"`
	Assemblys           uint64   `protobuf:"varint,26,opt,name=Assemblys" json:"Assemblys,omitempty"`
	FreedAssemblys      uint64   `protobuf:"varint,27,opt,name=FreedAssemblys" json:"FreedAssemblys,omitempty"`
	ParserSessions      []uint64 `protobuf:"varint,28,rep,packed,name=ParserSessions" json:"ParserSessions,omitempty"`
	ParserPackets       []uint64 `protobuf:"varint,29,rep,packed,name=ParserPackets" json:"ParserPackets,omitempty"`
	PolicyType1Rules    uint32   `protobuf:"varint,30,opt,name=PolicyType1Rules" json:"PolicyType1Rules,omitempty"`
	PolicyType2Rules    uint32   `protobuf:"varint,31,opt,name=PolicyType2Rules" json:"PolicyType2Rules,omitempty"`
	PolicyDomains       uint32   `protobuf:"varint,32,opt,name=PolicyDomains" json:"PolicyDomains,omitempty"`
	PolicyDomainIPs     uint32   `protobuf:"varint,33,opt,name=PolicyDomainIPs" json:"PolicyDomainIPs,omitempty"`
	GoRoutines          uint32   `protobuf:"varint,34,opt,name=GoRoutines" json:"GoRoutines,omitempty"`
	Lsof                []byte   `protobuf:"bytes,35,opt,name=Lsof,proto3" json:"Lsof,omitempty"`
	PS                  []byte   `protobuf:"bytes,36,opt,name=PS,proto3" json:"PS,omitempty"`
	LimitDropConns      uint64   `protobuf:"varint,37,opt,name=LimitDropConns" json:"LimitDropConns,omitempty"`
	LimitPassConns      uint64   `protobuf:"varint,38,opt,name=LimitPassConns" json:"LimitPassConns,omitempty"`
}

func (m *CLUSDatapathCounter) Reset()                    { *m = CLUSDatapathCounter{} }
func (m *CLUSDatapathCounter) String() string            { return proto.CompactTextString(m) }
func (*CLUSDatapathCounter) ProtoMessage()               {}
func (*CLUSDatapathCounter) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *CLUSDatapathCounter) GetRXPackets() uint64 {
	if m != nil {
		return m.RXPackets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetRXDropPackets() uint64 {
	if m != nil {
		return m.RXDropPackets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetTXPackets() uint64 {
	if m != nil {
		return m.TXPackets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetTXDropPackets() uint64 {
	if m != nil {
		return m.TXDropPackets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetErrorPackets() uint64 {
	if m != nil {
		return m.ErrorPackets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetNoWorkloadPackets() uint64 {
	if m != nil {
		return m.NoWorkloadPackets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetIPv4Packets() uint64 {
	if m != nil {
		return m.IPv4Packets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetIPv6Packets() uint64 {
	if m != nil {
		return m.IPv6Packets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetTCPPackets() uint64 {
	if m != nil {
		return m.TCPPackets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetTCPNoSessionPackets() uint64 {
	if m != nil {
		return m.TCPNoSessionPackets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetUDPPackets() uint64 {
	if m != nil {
		return m.UDPPackets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetICMPPackets() uint64 {
	if m != nil {
		return m.ICMPPackets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetOtherPackets() uint64 {
	if m != nil {
		return m.OtherPackets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetFragments() uint64 {
	if m != nil {
		return m.Fragments
	}
	return 0
}

func (m *CLUSDatapathCounter) GetTimeoutFragments() uint64 {
	if m != nil {
		return m.TimeoutFragments
	}
	return 0
}

func (m *CLUSDatapathCounter) GetTotalSessions() uint64 {
	if m != nil {
		return m.TotalSessions
	}
	return 0
}

func (m *CLUSDatapathCounter) GetTCPSessions() uint64 {
	if m != nil {
		return m.TCPSessions
	}
	return 0
}

func (m *CLUSDatapathCounter) GetUDPSessions() uint64 {
	if m != nil {
		return m.UDPSessions
	}
	return 0
}

func (m *CLUSDatapathCounter) GetICMPSessions() uint64 {
	if m != nil {
		return m.ICMPSessions
	}
	return 0
}

func (m *CLUSDatapathCounter) GetIPSessions() uint64 {
	if m != nil {
		return m.IPSessions
	}
	return 0
}

func (m *CLUSDatapathCounter) GetDropMeters() uint64 {
	if m != nil {
		return m.DropMeters
	}
	return 0
}

func (m *CLUSDatapathCounter) GetProxyMeters() uint64 {
	if m != nil {
		return m.ProxyMeters
	}
	return 0
}

func (m *CLUSDatapathCounter) GetCurMeters() uint64 {
	if m != nil {
		return m.CurMeters
	}
	return 0
}

func (m *CLUSDatapathCounter) GetCurLogCaches() uint64 {
	if m != nil {
		return m.CurLogCaches
	}
	return 0
}

func (m *CLUSDatapathCounter) GetFreedFragments() uint64 {
	if m != nil {
		return m.FreedFragments
	}
	return 0
}

func (m *CLUSDatapathCounter) GetAssemblys() uint64 {
	if m != nil {
		return m.Assemblys
	}
	return 0
}

func (m *CLUSDatapathCounter) GetFreedAssemblys() uint64 {
	if m != nil {
		return m.FreedAssemblys
	}
	return 0
}

func (m *CLUSDatapathCounter) GetParserSessions() []uint64 {
	if m != nil {
		return m.ParserSessions
	}
	return nil
}

func (m *CLUSDatapathCounter) GetParserPackets() []uint64 {
	if m != nil {
		return m.ParserPackets
	}
	return nil
}

func (m *CLUSDatapathCounter) GetPolicyType1Rules() uint32 {
	if m != nil {
		return m.PolicyType1Rules
	}
	return 0
}

func (m *CLUSDatapathCounter) GetPolicyType2Rules() uint32 {
	if m != nil {
		return m.PolicyType2Rules
	}
	return 0
}

func (m *CLUSDatapathCounter) GetPolicyDomains() uint32 {
	if m != nil {
		return m.PolicyDomains
	}
	return 0
}

func (m *CLUSDatapathCounter) GetPolicyDomainIPs() uint32 {
	if m != nil {
		return m.PolicyDomainIPs
	}
	return 0
}

func (m *CLUSDatapathCounter) GetGoRoutines() uint32 {
	if m != nil {
		return m.GoRoutines
	}
	return 0
}

func (m *CLUSDatapathCounter) GetLsof() []byte {
	if m != nil {
		return m.Lsof
	}
	return nil
}

func (m *CLUSDatapathCounter) GetPS() []byte {
	if m != nil {
		return m.PS
	}
	return nil
}

func (m *CLUSDatapathCounter) GetLimitDropConns() uint64 {
	if m != nil {
		return m.LimitDropConns
	}
	return 0
}

func (m *CLUSDatapathCounter) GetLimitPassConns() uint64 {
	if m != nil {
		return m.LimitPassConns
	}
	return 0
}

type CLUSDerivedPolicyApp struct {
	App    uint32 `protobuf:"varint,1,opt,name=App" json:"App,omitempty"`
	Action uint32 `protobuf:"varint,2,opt,name=Action" json:"Action,omitempty"`
	RuleID uint32 `protobuf:"varint,3,opt,name=RuleID" json:"RuleID,omitempty"`
}

func (m *CLUSDerivedPolicyApp) Reset()                    { *m = CLUSDerivedPolicyApp{} }
func (m *CLUSDerivedPolicyApp) String() string            { return proto.CompactTextString(m) }
func (*CLUSDerivedPolicyApp) ProtoMessage()               {}
func (*CLUSDerivedPolicyApp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *CLUSDerivedPolicyApp) GetApp() uint32 {
	if m != nil {
		return m.App
	}
	return 0
}

func (m *CLUSDerivedPolicyApp) GetAction() uint32 {
	if m != nil {
		return m.Action
	}
	return 0
}

func (m *CLUSDerivedPolicyApp) GetRuleID() uint32 {
	if m != nil {
		return m.RuleID
	}
	return 0
}

type CLUSDerivedPolicyRule struct {
	ID      uint32                  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	SrcIP   []byte                  `protobuf:"bytes,2,opt,name=SrcIP,proto3" json:"SrcIP,omitempty"`
	DstIP   []byte                  `protobuf:"bytes,3,opt,name=DstIP,proto3" json:"DstIP,omitempty"`
	SrcIPR  []byte                  `protobuf:"bytes,4,opt,name=SrcIPR,proto3" json:"SrcIPR,omitempty"`
	DstIPR  []byte                  `protobuf:"bytes,5,opt,name=DstIPR,proto3" json:"DstIPR,omitempty"`
	Port    uint32                  `protobuf:"varint,6,opt,name=Port" json:"Port,omitempty"`
	PortR   uint32                  `protobuf:"varint,7,opt,name=PortR" json:"PortR,omitempty"`
	IPProto uint32                  `protobuf:"varint,8,opt,name=IPProto" json:"IPProto,omitempty"`
	Action  uint32                  `protobuf:"varint,9,opt,name=Action" json:"Action,omitempty"`
	Ingress bool                    `protobuf:"varint,10,opt,name=Ingress" json:"Ingress,omitempty"`
	FQDN    string                  `protobuf:"bytes,11,opt,name=FQDN" json:"FQDN,omitempty"`
	Apps    []*CLUSDerivedPolicyApp `protobuf:"bytes,12,rep,name=Apps" json:"Apps,omitempty"`
}

func (m *CLUSDerivedPolicyRule) Reset()                    { *m = CLUSDerivedPolicyRule{} }
func (m *CLUSDerivedPolicyRule) String() string            { return proto.CompactTextString(m) }
func (*CLUSDerivedPolicyRule) ProtoMessage()               {}
func (*CLUSDerivedPolicyRule) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *CLUSDerivedPolicyRule) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CLUSDerivedPolicyRule) GetSrcIP() []byte {
	if m != nil {
		return m.SrcIP
	}
	return nil
}

func (m *CLUSDerivedPolicyRule) GetDstIP() []byte {
	if m != nil {
		return m.DstIP
	}
	return nil
}

func (m *CLUSDerivedPolicyRule) GetSrcIPR() []byte {
	if m != nil {
		return m.SrcIPR
	}
	return nil
}

func (m *CLUSDerivedPolicyRule) GetDstIPR() []byte {
	if m != nil {
		return m.DstIPR
	}
	return nil
}

func (m *CLUSDerivedPolicyRule) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *CLUSDerivedPolicyRule) GetPortR() uint32 {
	if m != nil {
		return m.PortR
	}
	return 0
}

func (m *CLUSDerivedPolicyRule) GetIPProto() uint32 {
	if m != nil {
		return m.IPProto
	}
	return 0
}

func (m *CLUSDerivedPolicyRule) GetAction() uint32 {
	if m != nil {
		return m.Action
	}
	return 0
}

func (m *CLUSDerivedPolicyRule) GetIngress() bool {
	if m != nil {
		return m.Ingress
	}
	return false
}

func (m *CLUSDerivedPolicyRule) GetFQDN() string {
	if m != nil {
		return m.FQDN
	}
	return ""
}

func (m *CLUSDerivedPolicyRule) GetApps() []*CLUSDerivedPolicyApp {
	if m != nil {
		return m.Apps
	}
	return nil
}

type CLUSDerivedPolicyRuleArray struct {
	Rules []*CLUSDerivedPolicyRule `protobuf:"bytes,1,rep,name=Rules" json:"Rules,omitempty"`
}

func (m *CLUSDerivedPolicyRuleArray) Reset()                    { *m = CLUSDerivedPolicyRuleArray{} }
func (m *CLUSDerivedPolicyRuleArray) String() string            { return proto.CompactTextString(m) }
func (*CLUSDerivedPolicyRuleArray) ProtoMessage()               {}
func (*CLUSDerivedPolicyRuleArray) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *CLUSDerivedPolicyRuleArray) GetRules() []*CLUSDerivedPolicyRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type CLUSDerivedPolicyRuleMap struct {
	RuleMap  map[string]*CLUSDerivedPolicyRuleArray `protobuf:"bytes,1,rep,name=RuleMap" json:"RuleMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RuleByte []byte                                 `protobuf:"bytes,2,opt,name=RuleByte,proto3" json:"RuleByte,omitempty"`
}

func (m *CLUSDerivedPolicyRuleMap) Reset()                    { *m = CLUSDerivedPolicyRuleMap{} }
func (m *CLUSDerivedPolicyRuleMap) String() string            { return proto.CompactTextString(m) }
func (*CLUSDerivedPolicyRuleMap) ProtoMessage()               {}
func (*CLUSDerivedPolicyRuleMap) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *CLUSDerivedPolicyRuleMap) GetRuleMap() map[string]*CLUSDerivedPolicyRuleArray {
	if m != nil {
		return m.RuleMap
	}
	return nil
}

func (m *CLUSDerivedPolicyRuleMap) GetRuleByte() []byte {
	if m != nil {
		return m.RuleByte
	}
	return nil
}

type CLUSProbeSummary struct {
	ContainerMap       uint32 `protobuf:"varint,1,opt,name=ContainerMap" json:"ContainerMap,omitempty"`
	PidContainerMap    uint32 `protobuf:"varint,2,opt,name=PidContainerMap" json:"PidContainerMap,omitempty"`
	PidProcMap         uint32 `protobuf:"varint,3,opt,name=PidProcMap" json:"PidProcMap,omitempty"`
	NewProcesses       uint32 `protobuf:"varint,4,opt,name=NewProcesses" json:"NewProcesses,omitempty"`
	NewSuspicProc      uint32 `protobuf:"varint,5,opt,name=NewSuspicProc" json:"NewSuspicProc,omitempty"`
	ContainerStops     uint32 `protobuf:"varint,6,opt,name=ContainerStops" json:"ContainerStops,omitempty"`
	WLStorageWatch     uint32 `protobuf:"varint,7,opt,name=WLStorageWatch" json:"WLStorageWatch,omitempty"`
	PidSet             uint32 `protobuf:"varint,8,opt,name=PidSet" json:"PidSet,omitempty"`
	SessionTable       uint32 `protobuf:"varint,9,opt,name=SessionTable" json:"SessionTable,omitempty"`
	InotifyWatches     uint32 `protobuf:"varint,10,opt,name=InotifyWatches" json:"InotifyWatches,omitempty"`
	ProcBlockRoots     uint32 `protobuf:"varint,11,opt,name=ProcBlockRoots" json:"ProcBlockRoots,omitempty"`
	ProcBlockMarks     uint32 `protobuf:"varint,12,opt,name=ProcBlockMarks" json:"ProcBlockMarks,omitempty"`
	ProcBlockEntryCnt  uint32 `protobuf:"varint,13,opt,name=ProcBlockEntryCnt" json:"ProcBlockEntryCnt,omitempty"`
	ProcBlockDirMonCnt uint32 `protobuf:"varint,14,opt,name=ProcBlockDirMonCnt" json:"ProcBlockDirMonCnt,omitempty"`
	FileMonEvents      uint32 `protobuf:"varint,15,opt,name=FileMonEvents" json:"FileMonEvents,omitempty"`
	FileMonGroups      uint32 `protobuf:"varint,16,opt,name=FileMonGroups" json:"FileMonGroups,omitempty"`
	FileMonFaRoots     uint32 `protobuf:"varint,17,opt,name=FileMonFaRoots" json:"FileMonFaRoots,omitempty"`
	FileMonFaMntRoots  uint32 `protobuf:"varint,18,opt,name=FileMonFaMntRoots" json:"FileMonFaMntRoots,omitempty"`
	FileMonFaDirMarks  uint32 `protobuf:"varint,19,opt,name=FileMonFaDirMarks" json:"FileMonFaDirMarks,omitempty"`
	FileMonFaRules     uint32 `protobuf:"varint,20,opt,name=FileMonFaRules" json:"FileMonFaRules,omitempty"`
	FileMonFaPaths     uint32 `protobuf:"varint,21,opt,name=FileMonFaPaths" json:"FileMonFaPaths,omitempty"`
	FileMonFaDirs      uint32 `protobuf:"varint,22,opt,name=FileMonFaDirs" json:"FileMonFaDirs,omitempty"`
	FileMonInWds       uint32 `protobuf:"varint,23,opt,name=FileMonInWds" json:"FileMonInWds,omitempty"`
	FileMonInPaths     uint32 `protobuf:"varint,24,opt,name=FileMonInPaths" json:"FileMonInPaths,omitempty"`
	FileMonInDirs      uint32 `protobuf:"varint,25,opt,name=FileMonInDirs" json:"FileMonInDirs,omitempty"`
	MaxEvalChanQueued  uint32 `protobuf:"varint,26,opt,name=MaxEvalChanQueued" json:"MaxEvalChanQueued,omitempty"`
	MaxGoroutines      uint32 `protobuf:"varint,27,opt,name=MaxGoroutines" json:"MaxGoroutines,omitempty"`
}

func (m *CLUSProbeSummary) Reset()                    { *m = CLUSProbeSummary{} }
func (m *CLUSProbeSummary) String() string            { return proto.CompactTextString(m) }
func (*CLUSProbeSummary) ProtoMessage()               {}
func (*CLUSProbeSummary) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *CLUSProbeSummary) GetContainerMap() uint32 {
	if m != nil {
		return m.ContainerMap
	}
	return 0
}

func (m *CLUSProbeSummary) GetPidContainerMap() uint32 {
	if m != nil {
		return m.PidContainerMap
	}
	return 0
}

func (m *CLUSProbeSummary) GetPidProcMap() uint32 {
	if m != nil {
		return m.PidProcMap
	}
	return 0
}

func (m *CLUSProbeSummary) GetNewProcesses() uint32 {
	if m != nil {
		return m.NewProcesses
	}
	return 0
}

func (m *CLUSProbeSummary) GetNewSuspicProc() uint32 {
	if m != nil {
		return m.NewSuspicProc
	}
	return 0
}

func (m *CLUSProbeSummary) GetContainerStops() uint32 {
	if m != nil {
		return m.ContainerStops
	}
	return 0
}

func (m *CLUSProbeSummary) GetWLStorageWatch() uint32 {
	if m != nil {
		return m.WLStorageWatch
	}
	return 0
}

func (m *CLUSProbeSummary) GetPidSet() uint32 {
	if m != nil {
		return m.PidSet
	}
	return 0
}

func (m *CLUSProbeSummary) GetSessionTable() uint32 {
	if m != nil {
		return m.SessionTable
	}
	return 0
}

func (m *CLUSProbeSummary) GetInotifyWatches() uint32 {
	if m != nil {
		return m.InotifyWatches
	}
	return 0
}

func (m *CLUSProbeSummary) GetProcBlockRoots() uint32 {
	if m != nil {
		return m.ProcBlockRoots
	}
	return 0
}

func (m *CLUSProbeSummary) GetProcBlockMarks() uint32 {
	if m != nil {
		return m.ProcBlockMarks
	}
	return 0
}

func (m *CLUSProbeSummary) GetProcBlockEntryCnt() uint32 {
	if m != nil {
		return m.ProcBlockEntryCnt
	}
	return 0
}

func (m *CLUSProbeSummary) GetProcBlockDirMonCnt() uint32 {
	if m != nil {
		return m.ProcBlockDirMonCnt
	}
	return 0
}

func (m *CLUSProbeSummary) GetFileMonEvents() uint32 {
	if m != nil {
		return m.FileMonEvents
	}
	return 0
}

func (m *CLUSProbeSummary) GetFileMonGroups() uint32 {
	if m != nil {
		return m.FileMonGroups
	}
	return 0
}

func (m *CLUSProbeSummary) GetFileMonFaRoots() uint32 {
	if m != nil {
		return m.FileMonFaRoots
	}
	return 0
}

func (m *CLUSProbeSummary) GetFileMonFaMntRoots() uint32 {
	if m != nil {
		return m.FileMonFaMntRoots
	}
	return 0
}

func (m *CLUSProbeSummary) GetFileMonFaDirMarks() uint32 {
	if m != nil {
		return m.FileMonFaDirMarks
	}
	return 0
}

func (m *CLUSProbeSummary) GetFileMonFaRules() uint32 {
	if m != nil {
		return m.FileMonFaRules
	}
	return 0
}

func (m *CLUSProbeSummary) GetFileMonFaPaths() uint32 {
	if m != nil {
		return m.FileMonFaPaths
	}
	return 0
}

func (m *CLUSProbeSummary) GetFileMonFaDirs() uint32 {
	if m != nil {
		return m.FileMonFaDirs
	}
	return 0
}

func (m *CLUSProbeSummary) GetFileMonInWds() uint32 {
	if m != nil {
		return m.FileMonInWds
	}
	return 0
}

func (m *CLUSProbeSummary) GetFileMonInPaths() uint32 {
	if m != nil {
		return m.FileMonInPaths
	}
	return 0
}

func (m *CLUSProbeSummary) GetFileMonInDirs() uint32 {
	if m != nil {
		return m.FileMonInDirs
	}
	return 0
}

func (m *CLUSProbeSummary) GetMaxEvalChanQueued() uint32 {
	if m != nil {
		return m.MaxEvalChanQueued
	}
	return 0
}

func (m *CLUSProbeSummary) GetMaxGoroutines() uint32 {
	if m != nil {
		return m.MaxGoroutines
	}
	return 0
}

type CLUSProbeProcess struct {
	Pid       int32  `protobuf:"varint,1,opt,name=Pid" json:"Pid,omitempty"`
	Ppid      int32  `protobuf:"varint,2,opt,name=Ppid" json:"Ppid,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	Ruid      uint32 `protobuf:"varint,4,opt,name=Ruid" json:"Ruid,omitempty"`
	Euid      uint32 `protobuf:"varint,5,opt,name=Euid" json:"Euid,omitempty"`
	ScanTimes uint32 `protobuf:"varint,6,opt,name=ScanTimes" json:"ScanTimes,omitempty"`
	StartTime uint64 `protobuf:"varint,7,opt,name=StartTime" json:"StartTime,omitempty"`
	Reported  uint32 `protobuf:"varint,8,opt,name=Reported" json:"Reported,omitempty"`
	Container string `protobuf:"bytes,9,opt,name=Container" json:"Container,omitempty"`
}

func (m *CLUSProbeProcess) Reset()                    { *m = CLUSProbeProcess{} }
func (m *CLUSProbeProcess) String() string            { return proto.CompactTextString(m) }
func (*CLUSProbeProcess) ProtoMessage()               {}
func (*CLUSProbeProcess) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *CLUSProbeProcess) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *CLUSProbeProcess) GetPpid() int32 {
	if m != nil {
		return m.Ppid
	}
	return 0
}

func (m *CLUSProbeProcess) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CLUSProbeProcess) GetRuid() uint32 {
	if m != nil {
		return m.Ruid
	}
	return 0
}

func (m *CLUSProbeProcess) GetEuid() uint32 {
	if m != nil {
		return m.Euid
	}
	return 0
}

func (m *CLUSProbeProcess) GetScanTimes() uint32 {
	if m != nil {
		return m.ScanTimes
	}
	return 0
}

func (m *CLUSProbeProcess) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *CLUSProbeProcess) GetReported() uint32 {
	if m != nil {
		return m.Reported
	}
	return 0
}

func (m *CLUSProbeProcess) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

type CLUSProbeProcessArray struct {
	Processes []*CLUSProbeProcess `protobuf:"bytes,1,rep,name=Processes" json:"Processes,omitempty"`
}

func (m *CLUSProbeProcessArray) Reset()                    { *m = CLUSProbeProcessArray{} }
func (m *CLUSProbeProcessArray) String() string            { return proto.CompactTextString(m) }
func (*CLUSProbeProcessArray) ProtoMessage()               {}
func (*CLUSProbeProcessArray) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *CLUSProbeProcessArray) GetProcesses() []*CLUSProbeProcess {
	if m != nil {
		return m.Processes
	}
	return nil
}

type CLUSProbeContainer struct {
	Id       string  `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty"`
	Pid      int32   `protobuf:"varint,2,opt,name=Pid" json:"Pid,omitempty"`
	Children []int32 `protobuf:"varint,3,rep,packed,name=Children" json:"Children,omitempty"`
	PortsMap string  `protobuf:"bytes,4,opt,name=PortsMap" json:"PortsMap,omitempty"`
}

func (m *CLUSProbeContainer) Reset()                    { *m = CLUSProbeContainer{} }
func (m *CLUSProbeContainer) String() string            { return proto.CompactTextString(m) }
func (*CLUSProbeContainer) ProtoMessage()               {}
func (*CLUSProbeContainer) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *CLUSProbeContainer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CLUSProbeContainer) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *CLUSProbeContainer) GetChildren() []int32 {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *CLUSProbeContainer) GetPortsMap() string {
	if m != nil {
		return m.PortsMap
	}
	return ""
}

type CLUSProbeContainerArray struct {
	Containers []*CLUSProbeContainer `protobuf:"bytes,1,rep,name=Containers" json:"Containers,omitempty"`
}

func (m *CLUSProbeContainerArray) Reset()                    { *m = CLUSProbeContainerArray{} }
func (m *CLUSProbeContainerArray) String() string            { return proto.CompactTextString(m) }
func (*CLUSProbeContainerArray) ProtoMessage()               {}
func (*CLUSProbeContainerArray) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *CLUSProbeContainerArray) GetContainers() []*CLUSProbeContainer {
	if m != nil {
		return m.Containers
	}
	return nil
}

type CLUSFileMonitorFile struct {
	Path    string   `protobuf:"bytes,1,opt,name=Path" json:"Path,omitempty"`
	Mask    uint64   `protobuf:"varint,2,opt,name=Mask" json:"Mask,omitempty"`
	IsDir   bool     `protobuf:"varint,3,opt,name=IsDir" json:"IsDir,omitempty"`
	Protect bool     `protobuf:"varint,4,opt,name=Protect" json:"Protect,omitempty"`
	Files   []string `protobuf:"bytes,5,rep,name=Files" json:"Files,omitempty"`
}

func (m *CLUSFileMonitorFile) Reset()                    { *m = CLUSFileMonitorFile{} }
func (m *CLUSFileMonitorFile) String() string            { return proto.CompactTextString(m) }
func (*CLUSFileMonitorFile) ProtoMessage()               {}
func (*CLUSFileMonitorFile) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *CLUSFileMonitorFile) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CLUSFileMonitorFile) GetMask() uint64 {
	if m != nil {
		return m.Mask
	}
	return 0
}

func (m *CLUSFileMonitorFile) GetIsDir() bool {
	if m != nil {
		return m.IsDir
	}
	return false
}

func (m *CLUSFileMonitorFile) GetProtect() bool {
	if m != nil {
		return m.Protect
	}
	return false
}

func (m *CLUSFileMonitorFile) GetFiles() []string {
	if m != nil {
		return m.Files
	}
	return nil
}

type CLUSFileMonitorFileArray struct {
	Files []*CLUSFileMonitorFile `protobuf:"bytes,1,rep,name=Files" json:"Files,omitempty"`
}

func (m *CLUSFileMonitorFileArray) Reset()                    { *m = CLUSFileMonitorFileArray{} }
func (m *CLUSFileMonitorFileArray) String() string            { return proto.CompactTextString(m) }
func (*CLUSFileMonitorFileArray) ProtoMessage()               {}
func (*CLUSFileMonitorFileArray) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

func (m *CLUSFileMonitorFileArray) GetFiles() []*CLUSFileMonitorFile {
	if m != nil {
		return m.Files
	}
	return nil
}

type CLUSSnifferRequest struct {
	Cmd              SnifferCmd `protobuf:"varint,1,opt,name=Cmd,enum=share.SnifferCmd" json:"Cmd,omitempty"`
	ID               string     `protobuf:"bytes,2,opt,name=ID" json:"ID,omitempty"`
	WorkloadID       string     `protobuf:"bytes,3,opt,name=WorkloadID" json:"WorkloadID,omitempty"`
	FileNumber       uint32     `protobuf:"varint,4,opt,name=FileNumber" json:"FileNumber,omitempty"`
	FileSizeInMB     uint32     `protobuf:"varint,5,opt,name=FileSizeInMB" json:"FileSizeInMB,omitempty"`
	Filter           string     `protobuf:"bytes,6,opt,name=Filter" json:"Filter,omitempty"`
	DurationInSecond uint32     `protobuf:"varint,7,opt,name=DurationInSecond" json:"DurationInSecond,omitempty"`
}

func (m *CLUSSnifferRequest) Reset()                    { *m = CLUSSnifferRequest{} }
func (m *CLUSSnifferRequest) String() string            { return proto.CompactTextString(m) }
func (*CLUSSnifferRequest) ProtoMessage()               {}
func (*CLUSSnifferRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{17} }

func (m *CLUSSnifferRequest) GetCmd() SnifferCmd {
	if m != nil {
		return m.Cmd
	}
	return SnifferCmd_StartSniffer
}

func (m *CLUSSnifferRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *CLUSSnifferRequest) GetWorkloadID() string {
	if m != nil {
		return m.WorkloadID
	}
	return ""
}

func (m *CLUSSnifferRequest) GetFileNumber() uint32 {
	if m != nil {
		return m.FileNumber
	}
	return 0
}

func (m *CLUSSnifferRequest) GetFileSizeInMB() uint32 {
	if m != nil {
		return m.FileSizeInMB
	}
	return 0
}

func (m *CLUSSnifferRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *CLUSSnifferRequest) GetDurationInSecond() uint32 {
	if m != nil {
		return m.DurationInSecond
	}
	return 0
}

type CLUSSnifferResponse struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *CLUSSnifferResponse) Reset()                    { *m = CLUSSnifferResponse{} }
func (m *CLUSSnifferResponse) String() string            { return proto.CompactTextString(m) }
func (*CLUSSnifferResponse) ProtoMessage()               {}
func (*CLUSSnifferResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{18} }

func (m *CLUSSnifferResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type CLUSSnifferFilter struct {
	ID       string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Workload string `protobuf:"bytes,2,opt,name=Workload" json:"Workload,omitempty"`
}

func (m *CLUSSnifferFilter) Reset()                    { *m = CLUSSnifferFilter{} }
func (m *CLUSSnifferFilter) String() string            { return proto.CompactTextString(m) }
func (*CLUSSnifferFilter) ProtoMessage()               {}
func (*CLUSSnifferFilter) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{19} }

func (m *CLUSSnifferFilter) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *CLUSSnifferFilter) GetWorkload() string {
	if m != nil {
		return m.Workload
	}
	return ""
}

type CLUSSniffer struct {
	ID         string        `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	AgentID    string        `protobuf:"bytes,2,opt,name=AgentID" json:"AgentID,omitempty"`
	WorkloadID string        `protobuf:"bytes,3,opt,name=WorkloadID" json:"WorkloadID,omitempty"`
	Status     SnifferStatus `protobuf:"varint,4,opt,name=Status,enum=share.SnifferStatus" json:"Status,omitempty"`
	Args       string        `protobuf:"bytes,5,opt,name=Args" json:"Args,omitempty"`
	FileNumber uint32        `protobuf:"varint,6,opt,name=FileNumber" json:"FileNumber,omitempty"`
	Size       int64         `protobuf:"varint,7,opt,name=Size" json:"Size,omitempty"`
	StartTime  int64         `protobuf:"varint,8,opt,name=StartTime" json:"StartTime,omitempty"`
	StopTime   int64         `protobuf:"varint,9,opt,name=StopTime" json:"StopTime,omitempty"`
}

func (m *CLUSSniffer) Reset()                    { *m = CLUSSniffer{} }
func (m *CLUSSniffer) String() string            { return proto.CompactTextString(m) }
func (*CLUSSniffer) ProtoMessage()               {}
func (*CLUSSniffer) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{20} }

func (m *CLUSSniffer) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *CLUSSniffer) GetAgentID() string {
	if m != nil {
		return m.AgentID
	}
	return ""
}

func (m *CLUSSniffer) GetWorkloadID() string {
	if m != nil {
		return m.WorkloadID
	}
	return ""
}

func (m *CLUSSniffer) GetStatus() SnifferStatus {
	if m != nil {
		return m.Status
	}
	return SnifferStatus_Failed
}

func (m *CLUSSniffer) GetArgs() string {
	if m != nil {
		return m.Args
	}
	return ""
}

func (m *CLUSSniffer) GetFileNumber() uint32 {
	if m != nil {
		return m.FileNumber
	}
	return 0
}

func (m *CLUSSniffer) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *CLUSSniffer) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *CLUSSniffer) GetStopTime() int64 {
	if m != nil {
		return m.StopTime
	}
	return 0
}

type CLUSSnifferArray struct {
	Sniffers []*CLUSSniffer `protobuf:"bytes,1,rep,name=sniffers" json:"sniffers,omitempty"`
}

func (m *CLUSSnifferArray) Reset()                    { *m = CLUSSnifferArray{} }
func (m *CLUSSnifferArray) String() string            { return proto.CompactTextString(m) }
func (*CLUSSnifferArray) ProtoMessage()               {}
func (*CLUSSnifferArray) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{21} }

func (m *CLUSSnifferArray) GetSniffers() []*CLUSSniffer {
	if m != nil {
		return m.Sniffers
	}
	return nil
}

type CLUSSnifferDownload struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *CLUSSnifferDownload) Reset()                    { *m = CLUSSnifferDownload{} }
func (m *CLUSSnifferDownload) String() string            { return proto.CompactTextString(m) }
func (*CLUSSnifferDownload) ProtoMessage()               {}
func (*CLUSSnifferDownload) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{22} }

func (m *CLUSSnifferDownload) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type CLUSSnifferPcap struct {
	Pcap []byte `protobuf:"bytes,1,opt,name=Pcap,proto3" json:"Pcap,omitempty"`
}

func (m *CLUSSnifferPcap) Reset()                    { *m = CLUSSnifferPcap{} }
func (m *CLUSSnifferPcap) String() string            { return proto.CompactTextString(m) }
func (*CLUSSnifferPcap) ProtoMessage()               {}
func (*CLUSSnifferPcap) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{23} }

func (m *CLUSSnifferPcap) GetPcap() []byte {
	if m != nil {
		return m.Pcap
	}
	return nil
}

type CLUSContainerLogReq struct {
	Id    string `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty"`
	Start int32  `protobuf:"varint,2,opt,name=Start" json:"Start,omitempty"`
	Limit uint32 `protobuf:"varint,3,opt,name=Limit" json:"Limit,omitempty"`
}

func (m *CLUSContainerLogReq) Reset()                    { *m = CLUSContainerLogReq{} }
func (m *CLUSContainerLogReq) String() string            { return proto.CompactTextString(m) }
func (*CLUSContainerLogReq) ProtoMessage()               {}
func (*CLUSContainerLogReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{24} }

func (m *CLUSContainerLogReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CLUSContainerLogReq) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *CLUSContainerLogReq) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type CLUSContainerLogRes struct {
	LogZb []byte `protobuf:"bytes,1,opt,name=LogZb,proto3" json:"LogZb,omitempty"`
}

func (m *CLUSContainerLogRes) Reset()                    { *m = CLUSContainerLogRes{} }
func (m *CLUSContainerLogRes) String() string            { return proto.CompactTextString(m) }
func (*CLUSContainerLogRes) ProtoMessage()               {}
func (*CLUSContainerLogRes) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{25} }

func (m *CLUSContainerLogRes) GetLogZb() []byte {
	if m != nil {
		return m.LogZb
	}
	return nil
}

type CLUSProcess struct {
	Name    string   `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Pid     uint32   `protobuf:"varint,2,opt,name=Pid" json:"Pid,omitempty"`
	PPid    uint32   `protobuf:"varint,3,opt,name=PPid" json:"PPid,omitempty"`
	PGid    uint32   `protobuf:"varint,4,opt,name=PGid" json:"PGid,omitempty"`
	PSid    uint32   `protobuf:"varint,5,opt,name=PSid" json:"PSid,omitempty"`
	RUid    uint32   `protobuf:"varint,6,opt,name=RUid" json:"RUid,omitempty"`
	EUid    uint32   `protobuf:"varint,7,opt,name=EUid" json:"EUid,omitempty"`
	Cmds    []string `protobuf:"bytes,8,rep,name=Cmds" json:"Cmds,omitempty"`
	Root    bool     `protobuf:"varint,9,opt,name=Root" json:"Root,omitempty"`
	User    string   `protobuf:"bytes,10,opt,name=User" json:"User,omitempty"`
	Status  string   `protobuf:"bytes,11,opt,name=Status" json:"Status,omitempty"`
	StartAt int64    `protobuf:"varint,12,opt,name=StartAt" json:"StartAt,omitempty"`
	Action  string   `protobuf:"bytes,13,opt,name=Action" json:"Action,omitempty"`
}

func (m *CLUSProcess) Reset()                    { *m = CLUSProcess{} }
func (m *CLUSProcess) String() string            { return proto.CompactTextString(m) }
func (*CLUSProcess) ProtoMessage()               {}
func (*CLUSProcess) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{26} }

func (m *CLUSProcess) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CLUSProcess) GetPid() uint32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *CLUSProcess) GetPPid() uint32 {
	if m != nil {
		return m.PPid
	}
	return 0
}

func (m *CLUSProcess) GetPGid() uint32 {
	if m != nil {
		return m.PGid
	}
	return 0
}

func (m *CLUSProcess) GetPSid() uint32 {
	if m != nil {
		return m.PSid
	}
	return 0
}

func (m *CLUSProcess) GetRUid() uint32 {
	if m != nil {
		return m.RUid
	}
	return 0
}

func (m *CLUSProcess) GetEUid() uint32 {
	if m != nil {
		return m.EUid
	}
	return 0
}

func (m *CLUSProcess) GetCmds() []string {
	if m != nil {
		return m.Cmds
	}
	return nil
}

func (m *CLUSProcess) GetRoot() bool {
	if m != nil {
		return m.Root
	}
	return false
}

func (m *CLUSProcess) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *CLUSProcess) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *CLUSProcess) GetStartAt() int64 {
	if m != nil {
		return m.StartAt
	}
	return 0
}

func (m *CLUSProcess) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type CLUSProcessArray struct {
	Processes []*CLUSProcess `protobuf:"bytes,1,rep,name=Processes" json:"Processes,omitempty"`
}

func (m *CLUSProcessArray) Reset()                    { *m = CLUSProcessArray{} }
func (m *CLUSProcessArray) String() string            { return proto.CompactTextString(m) }
func (*CLUSProcessArray) ProtoMessage()               {}
func (*CLUSProcessArray) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{27} }

func (m *CLUSProcessArray) GetProcesses() []*CLUSProcess {
	if m != nil {
		return m.Processes
	}
	return nil
}

type CLUSDerivedDlpRule struct {
	Name   string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Action uint32 `protobuf:"varint,2,opt,name=Action" json:"Action,omitempty"`
}

func (m *CLUSDerivedDlpRule) Reset()                    { *m = CLUSDerivedDlpRule{} }
func (m *CLUSDerivedDlpRule) String() string            { return proto.CompactTextString(m) }
func (*CLUSDerivedDlpRule) ProtoMessage()               {}
func (*CLUSDerivedDlpRule) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{28} }

func (m *CLUSDerivedDlpRule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CLUSDerivedDlpRule) GetAction() uint32 {
	if m != nil {
		return m.Action
	}
	return 0
}

type CLUSDerivedDlpRuleArray struct {
	Mode     string                `protobuf:"bytes,1,opt,name=Mode" json:"Mode,omitempty"`
	DefAct   uint32                `protobuf:"varint,2,opt,name=DefAct" json:"DefAct,omitempty"`
	ApplyDir int32                 `protobuf:"varint,3,opt,name=ApplyDir" json:"ApplyDir,omitempty"`
	WlMacs   []string              `protobuf:"bytes,4,rep,name=WlMacs" json:"WlMacs,omitempty"`
	DlpRules []*CLUSDerivedDlpRule `protobuf:"bytes,5,rep,name=DlpRules" json:"DlpRules,omitempty"`
	WafRules []*CLUSDerivedDlpRule `protobuf:"bytes,6,rep,name=WafRules" json:"WafRules,omitempty"`
	Rids     []uint32              `protobuf:"varint,7,rep,packed,name=rids" json:"rids,omitempty"`
	Wafrids  []uint32              `protobuf:"varint,8,rep,packed,name=wafrids" json:"wafrids,omitempty"`
	RuleType string                `protobuf:"bytes,9,opt,name=RuleType" json:"RuleType,omitempty"`
}

func (m *CLUSDerivedDlpRuleArray) Reset()                    { *m = CLUSDerivedDlpRuleArray{} }
func (m *CLUSDerivedDlpRuleArray) String() string            { return proto.CompactTextString(m) }
func (*CLUSDerivedDlpRuleArray) ProtoMessage()               {}
func (*CLUSDerivedDlpRuleArray) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{29} }

func (m *CLUSDerivedDlpRuleArray) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *CLUSDerivedDlpRuleArray) GetDefAct() uint32 {
	if m != nil {
		return m.DefAct
	}
	return 0
}

func (m *CLUSDerivedDlpRuleArray) GetApplyDir() int32 {
	if m != nil {
		return m.ApplyDir
	}
	return 0
}

func (m *CLUSDerivedDlpRuleArray) GetWlMacs() []string {
	if m != nil {
		return m.WlMacs
	}
	return nil
}

func (m *CLUSDerivedDlpRuleArray) GetDlpRules() []*CLUSDerivedDlpRule {
	if m != nil {
		return m.DlpRules
	}
	return nil
}

func (m *CLUSDerivedDlpRuleArray) GetWafRules() []*CLUSDerivedDlpRule {
	if m != nil {
		return m.WafRules
	}
	return nil
}

func (m *CLUSDerivedDlpRuleArray) GetRids() []uint32 {
	if m != nil {
		return m.Rids
	}
	return nil
}

func (m *CLUSDerivedDlpRuleArray) GetWafrids() []uint32 {
	if m != nil {
		return m.Wafrids
	}
	return nil
}

func (m *CLUSDerivedDlpRuleArray) GetRuleType() string {
	if m != nil {
		return m.RuleType
	}
	return ""
}

type CLUSDerivedDlpRuleMap struct {
	DlpRuleMap map[string]*CLUSDerivedDlpRuleArray `protobuf:"bytes,1,rep,name=DlpRuleMap" json:"DlpRuleMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CLUSDerivedDlpRuleMap) Reset()                    { *m = CLUSDerivedDlpRuleMap{} }
func (m *CLUSDerivedDlpRuleMap) String() string            { return proto.CompactTextString(m) }
func (*CLUSDerivedDlpRuleMap) ProtoMessage()               {}
func (*CLUSDerivedDlpRuleMap) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{30} }

func (m *CLUSDerivedDlpRuleMap) GetDlpRuleMap() map[string]*CLUSDerivedDlpRuleArray {
	if m != nil {
		return m.DlpRuleMap
	}
	return nil
}

type CLUSDerivedDlpRuleEntry struct {
	Name     string   `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	ID       uint32   `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
	Patterns []string `protobuf:"bytes,3,rep,name=Patterns" json:"Patterns,omitempty"`
}

func (m *CLUSDerivedDlpRuleEntry) Reset()                    { *m = CLUSDerivedDlpRuleEntry{} }
func (m *CLUSDerivedDlpRuleEntry) String() string            { return proto.CompactTextString(m) }
func (*CLUSDerivedDlpRuleEntry) ProtoMessage()               {}
func (*CLUSDerivedDlpRuleEntry) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{31} }

func (m *CLUSDerivedDlpRuleEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CLUSDerivedDlpRuleEntry) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CLUSDerivedDlpRuleEntry) GetPatterns() []string {
	if m != nil {
		return m.Patterns
	}
	return nil
}

type CLUSDerivedDlpRuleEntryArray struct {
	DlpRuleEntries []*CLUSDerivedDlpRuleEntry `protobuf:"bytes,1,rep,name=DlpRuleEntries" json:"DlpRuleEntries,omitempty"`
}

func (m *CLUSDerivedDlpRuleEntryArray) Reset()                    { *m = CLUSDerivedDlpRuleEntryArray{} }
func (m *CLUSDerivedDlpRuleEntryArray) String() string            { return proto.CompactTextString(m) }
func (*CLUSDerivedDlpRuleEntryArray) ProtoMessage()               {}
func (*CLUSDerivedDlpRuleEntryArray) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{32} }

func (m *CLUSDerivedDlpRuleEntryArray) GetDlpRuleEntries() []*CLUSDerivedDlpRuleEntry {
	if m != nil {
		return m.DlpRuleEntries
	}
	return nil
}

type CLUSDerivedDlpRuleMac struct {
	Mac string `protobuf:"bytes,1,opt,name=Mac" json:"Mac,omitempty"`
}

func (m *CLUSDerivedDlpRuleMac) Reset()                    { *m = CLUSDerivedDlpRuleMac{} }
func (m *CLUSDerivedDlpRuleMac) String() string            { return proto.CompactTextString(m) }
func (*CLUSDerivedDlpRuleMac) ProtoMessage()               {}
func (*CLUSDerivedDlpRuleMac) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{33} }

func (m *CLUSDerivedDlpRuleMac) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

type CLUSDerivedDlpRuleMacArray struct {
	DlpRuleMacs []*CLUSDerivedDlpRuleMac `protobuf:"bytes,1,rep,name=DlpRuleMacs" json:"DlpRuleMacs,omitempty"`
}

func (m *CLUSDerivedDlpRuleMacArray) Reset()                    { *m = CLUSDerivedDlpRuleMacArray{} }
func (m *CLUSDerivedDlpRuleMacArray) String() string            { return proto.CompactTextString(m) }
func (*CLUSDerivedDlpRuleMacArray) ProtoMessage()               {}
func (*CLUSDerivedDlpRuleMacArray) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{34} }

func (m *CLUSDerivedDlpRuleMacArray) GetDlpRuleMacs() []*CLUSDerivedDlpRuleMac {
	if m != nil {
		return m.DlpRuleMacs
	}
	return nil
}

type CLUSDerivedProcessRule struct {
	Name      string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Path      string `protobuf:"bytes,2,opt,name=Path" json:"Path,omitempty"`
	Action    string `protobuf:"bytes,3,opt,name=Action" json:"Action,omitempty"`
	CreatedAt uint64 `protobuf:"varint,4,opt,name=CreatedAt" json:"CreatedAt,omitempty"`
	UpdateAt  uint64 `protobuf:"varint,5,opt,name=UpdateAt" json:"UpdateAt,omitempty"`
	GroupName string `protobuf:"bytes,6,opt,name=GroupName" json:"GroupName,omitempty"`
	CfgType   string `protobuf:"bytes,7,opt,name=CfgType" json:"CfgType,omitempty"`
}

func (m *CLUSDerivedProcessRule) Reset()                    { *m = CLUSDerivedProcessRule{} }
func (m *CLUSDerivedProcessRule) String() string            { return proto.CompactTextString(m) }
func (*CLUSDerivedProcessRule) ProtoMessage()               {}
func (*CLUSDerivedProcessRule) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{35} }

func (m *CLUSDerivedProcessRule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CLUSDerivedProcessRule) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CLUSDerivedProcessRule) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *CLUSDerivedProcessRule) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CLUSDerivedProcessRule) GetUpdateAt() uint64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func (m *CLUSDerivedProcessRule) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *CLUSDerivedProcessRule) GetCfgType() string {
	if m != nil {
		return m.CfgType
	}
	return ""
}

type CLUSDerivedProcessRuleArray struct {
	Rules []*CLUSDerivedProcessRule `protobuf:"bytes,1,rep,name=Rules" json:"Rules,omitempty"`
}

func (m *CLUSDerivedProcessRuleArray) Reset()                    { *m = CLUSDerivedProcessRuleArray{} }
func (m *CLUSDerivedProcessRuleArray) String() string            { return proto.CompactTextString(m) }
func (*CLUSDerivedProcessRuleArray) ProtoMessage()               {}
func (*CLUSDerivedProcessRuleArray) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{36} }

func (m *CLUSDerivedProcessRuleArray) GetRules() []*CLUSDerivedProcessRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type CLUSDerivedFileRule struct {
	Recursive bool     `protobuf:"varint,1,opt,name=Recursive" json:"Recursive,omitempty"`
	Filter    string   `protobuf:"bytes,2,opt,name=Filter" json:"Filter,omitempty"`
	Path      string   `protobuf:"bytes,3,opt,name=Path" json:"Path,omitempty"`
	Regex     string   `protobuf:"bytes,4,opt,name=Regex" json:"Regex,omitempty"`
	Behavior  string   `protobuf:"bytes,5,opt,name=Behavior" json:"Behavior,omitempty"`
	GroupName string   `protobuf:"bytes,6,opt,name=GroupName" json:"GroupName,omitempty"`
	Apps      []string `protobuf:"bytes,7,rep,name=Apps" json:"Apps,omitempty"`
	CfgType   string   `protobuf:"bytes,8,opt,name=CfgType" json:"CfgType,omitempty"`
}

func (m *CLUSDerivedFileRule) Reset()                    { *m = CLUSDerivedFileRule{} }
func (m *CLUSDerivedFileRule) String() string            { return proto.CompactTextString(m) }
func (*CLUSDerivedFileRule) ProtoMessage()               {}
func (*CLUSDerivedFileRule) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{37} }

func (m *CLUSDerivedFileRule) GetRecursive() bool {
	if m != nil {
		return m.Recursive
	}
	return false
}

func (m *CLUSDerivedFileRule) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *CLUSDerivedFileRule) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CLUSDerivedFileRule) GetRegex() string {
	if m != nil {
		return m.Regex
	}
	return ""
}

func (m *CLUSDerivedFileRule) GetBehavior() string {
	if m != nil {
		return m.Behavior
	}
	return ""
}

func (m *CLUSDerivedFileRule) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *CLUSDerivedFileRule) GetApps() []string {
	if m != nil {
		return m.Apps
	}
	return nil
}

func (m *CLUSDerivedFileRule) GetCfgType() string {
	if m != nil {
		return m.CfgType
	}
	return ""
}

type CLUSDerivedFileRuleArray struct {
	Rules []*CLUSDerivedFileRule `protobuf:"bytes,1,rep,name=Rules" json:"Rules,omitempty"`
}

func (m *CLUSDerivedFileRuleArray) Reset()                    { *m = CLUSDerivedFileRuleArray{} }
func (m *CLUSDerivedFileRuleArray) String() string            { return proto.CompactTextString(m) }
func (*CLUSDerivedFileRuleArray) ProtoMessage()               {}
func (*CLUSDerivedFileRuleArray) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{38} }

func (m *CLUSDerivedFileRuleArray) GetRules() []*CLUSDerivedFileRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type CLUSWorkloadInterceptPort struct {
	Port          string `protobuf:"bytes,1,opt,name=Port" json:"Port,omitempty"`
	Peer          string `protobuf:"bytes,2,opt,name=Peer" json:"Peer,omitempty"`
	MAC           []byte `protobuf:"bytes,3,opt,name=MAC,proto3" json:"MAC,omitempty"`
	UCMAC         []byte `protobuf:"bytes,4,opt,name=UCMAC,proto3" json:"UCMAC,omitempty"`
	BCMAC         []byte `protobuf:"bytes,5,opt,name=BCMAC,proto3" json:"BCMAC,omitempty"`
	InPort        string `protobuf:"bytes,6,opt,name=InPort" json:"InPort,omitempty"`
	ExPort        string `protobuf:"bytes,7,opt,name=ExPort" json:"ExPort,omitempty"`
	InPortRules   string `protobuf:"bytes,8,opt,name=InPortRules" json:"InPortRules,omitempty"`
	ExPortRules   string `protobuf:"bytes,9,opt,name=ExPortRules" json:"ExPortRules,omitempty"`
	EnforcerRules string `protobuf:"bytes,10,opt,name=EnforcerRules" json:"EnforcerRules,omitempty"`
}

func (m *CLUSWorkloadInterceptPort) Reset()                    { *m = CLUSWorkloadInterceptPort{} }
func (m *CLUSWorkloadInterceptPort) String() string            { return proto.CompactTextString(m) }
func (*CLUSWorkloadInterceptPort) ProtoMessage()               {}
func (*CLUSWorkloadInterceptPort) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{39} }

func (m *CLUSWorkloadInterceptPort) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *CLUSWorkloadInterceptPort) GetPeer() string {
	if m != nil {
		return m.Peer
	}
	return ""
}

func (m *CLUSWorkloadInterceptPort) GetMAC() []byte {
	if m != nil {
		return m.MAC
	}
	return nil
}

func (m *CLUSWorkloadInterceptPort) GetUCMAC() []byte {
	if m != nil {
		return m.UCMAC
	}
	return nil
}

func (m *CLUSWorkloadInterceptPort) GetBCMAC() []byte {
	if m != nil {
		return m.BCMAC
	}
	return nil
}

func (m *CLUSWorkloadInterceptPort) GetInPort() string {
	if m != nil {
		return m.InPort
	}
	return ""
}

func (m *CLUSWorkloadInterceptPort) GetExPort() string {
	if m != nil {
		return m.ExPort
	}
	return ""
}

func (m *CLUSWorkloadInterceptPort) GetInPortRules() string {
	if m != nil {
		return m.InPortRules
	}
	return ""
}

func (m *CLUSWorkloadInterceptPort) GetExPortRules() string {
	if m != nil {
		return m.ExPortRules
	}
	return ""
}

func (m *CLUSWorkloadInterceptPort) GetEnforcerRules() string {
	if m != nil {
		return m.EnforcerRules
	}
	return ""
}

type CLUSWorkloadIntercept struct {
	ID         string                       `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Inline     bool                         `protobuf:"varint,2,opt,name=Inline" json:"Inline,omitempty"`
	Quarantine bool                         `protobuf:"varint,3,opt,name=Quarantine" json:"Quarantine,omitempty"`
	Ports      []*CLUSWorkloadInterceptPort `protobuf:"bytes,4,rep,name=Ports" json:"Ports,omitempty"`
}

func (m *CLUSWorkloadIntercept) Reset()                    { *m = CLUSWorkloadIntercept{} }
func (m *CLUSWorkloadIntercept) String() string            { return proto.CompactTextString(m) }
func (*CLUSWorkloadIntercept) ProtoMessage()               {}
func (*CLUSWorkloadIntercept) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{40} }

func (m *CLUSWorkloadIntercept) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *CLUSWorkloadIntercept) GetInline() bool {
	if m != nil {
		return m.Inline
	}
	return false
}

func (m *CLUSWorkloadIntercept) GetQuarantine() bool {
	if m != nil {
		return m.Quarantine
	}
	return false
}

func (m *CLUSWorkloadIntercept) GetPorts() []*CLUSWorkloadInterceptPort {
	if m != nil {
		return m.Ports
	}
	return nil
}

type CLUSMeter struct {
	MeterID    uint32 `protobuf:"varint,1,opt,name=MeterID" json:"MeterID,omitempty"`
	Workload   string `protobuf:"bytes,2,opt,name=Workload" json:"Workload,omitempty"`
	PeerIP     []byte `protobuf:"bytes,3,opt,name=PeerIP,proto3" json:"PeerIP,omitempty"`
	Count      uint32 `protobuf:"varint,4,opt,name=Count" json:"Count,omitempty"`
	LastCount  uint32 `protobuf:"varint,5,opt,name=LastCount" json:"LastCount,omitempty"`
	Idle       uint32 `protobuf:"varint,6,opt,name=Idle" json:"Idle,omitempty"`
	Span       uint32 `protobuf:"varint,7,opt,name=Span" json:"Span,omitempty"`
	UpperLimit uint32 `protobuf:"varint,8,opt,name=UpperLimit" json:"UpperLimit,omitempty"`
	LowerLimit uint32 `protobuf:"varint,9,opt,name=LowerLimit" json:"LowerLimit,omitempty"`
	Tap        bool   `protobuf:"varint,10,opt,name=Tap" json:"Tap,omitempty"`
}

func (m *CLUSMeter) Reset()                    { *m = CLUSMeter{} }
func (m *CLUSMeter) String() string            { return proto.CompactTextString(m) }
func (*CLUSMeter) ProtoMessage()               {}
func (*CLUSMeter) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{41} }

func (m *CLUSMeter) GetMeterID() uint32 {
	if m != nil {
		return m.MeterID
	}
	return 0
}

func (m *CLUSMeter) GetWorkload() string {
	if m != nil {
		return m.Workload
	}
	return ""
}

func (m *CLUSMeter) GetPeerIP() []byte {
	if m != nil {
		return m.PeerIP
	}
	return nil
}

func (m *CLUSMeter) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CLUSMeter) GetLastCount() uint32 {
	if m != nil {
		return m.LastCount
	}
	return 0
}

func (m *CLUSMeter) GetIdle() uint32 {
	if m != nil {
		return m.Idle
	}
	return 0
}

func (m *CLUSMeter) GetSpan() uint32 {
	if m != nil {
		return m.Span
	}
	return 0
}

func (m *CLUSMeter) GetUpperLimit() uint32 {
	if m != nil {
		return m.UpperLimit
	}
	return 0
}

func (m *CLUSMeter) GetLowerLimit() uint32 {
	if m != nil {
		return m.LowerLimit
	}
	return 0
}

func (m *CLUSMeter) GetTap() bool {
	if m != nil {
		return m.Tap
	}
	return false
}

type CLUSMeterArray struct {
	Meters []*CLUSMeter `protobuf:"bytes,1,rep,name=Meters" json:"Meters,omitempty"`
}

func (m *CLUSMeterArray) Reset()                    { *m = CLUSMeterArray{} }
func (m *CLUSMeterArray) String() string            { return proto.CompactTextString(m) }
func (*CLUSMeterArray) ProtoMessage()               {}
func (*CLUSMeterArray) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{42} }

func (m *CLUSMeterArray) GetMeters() []*CLUSMeter {
	if m != nil {
		return m.Meters
	}
	return nil
}

type CLUSWlIDArray struct {
	WlID []string `protobuf:"bytes,1,rep,name=WlID" json:"WlID,omitempty"`
}

func (m *CLUSWlIDArray) Reset()                    { *m = CLUSWlIDArray{} }
func (m *CLUSWlIDArray) String() string            { return proto.CompactTextString(m) }
func (*CLUSWlIDArray) ProtoMessage()               {}
func (*CLUSWlIDArray) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{43} }

func (m *CLUSWlIDArray) GetWlID() []string {
	if m != nil {
		return m.WlID
	}
	return nil
}

func init() {
	proto.RegisterType((*CLUSKick)(nil), "share.CLUSKick")
	proto.RegisterType((*CLUSFilter)(nil), "share.CLUSFilter")
	proto.RegisterType((*CLUSSession)(nil), "share.CLUSSession")
	proto.RegisterType((*CLUSSessionArray)(nil), "share.CLUSSessionArray")
	proto.RegisterType((*CLUSSessionCounter)(nil), "share.CLUSSessionCounter")
	proto.RegisterType((*CLUSDatapathCounter)(nil), "share.CLUSDatapathCounter")
	proto.RegisterType((*CLUSDerivedPolicyApp)(nil), "share.CLUSDerivedPolicyApp")
	proto.RegisterType((*CLUSDerivedPolicyRule)(nil), "share.CLUSDerivedPolicyRule")
	proto.RegisterType((*CLUSDerivedPolicyRuleArray)(nil), "share.CLUSDerivedPolicyRuleArray")
	proto.RegisterType((*CLUSDerivedPolicyRuleMap)(nil), "share.CLUSDerivedPolicyRuleMap")
	proto.RegisterType((*CLUSProbeSummary)(nil), "share.CLUSProbeSummary")
	proto.RegisterType((*CLUSProbeProcess)(nil), "share.CLUSProbeProcess")
	proto.RegisterType((*CLUSProbeProcessArray)(nil), "share.CLUSProbeProcessArray")
	proto.RegisterType((*CLUSProbeContainer)(nil), "share.CLUSProbeContainer")
	proto.RegisterType((*CLUSProbeContainerArray)(nil), "share.CLUSProbeContainerArray")
	proto.RegisterType((*CLUSFileMonitorFile)(nil), "share.CLUSFileMonitorFile")
	proto.RegisterType((*CLUSFileMonitorFileArray)(nil), "share.CLUSFileMonitorFileArray")
	proto.RegisterType((*CLUSSnifferRequest)(nil), "share.CLUSSnifferRequest")
	proto.RegisterType((*CLUSSnifferResponse)(nil), "share.CLUSSnifferResponse")
	proto.RegisterType((*CLUSSnifferFilter)(nil), "share.CLUSSnifferFilter")
	proto.RegisterType((*CLUSSniffer)(nil), "share.CLUSSniffer")
	proto.RegisterType((*CLUSSnifferArray)(nil), "share.CLUSSnifferArray")
	proto.RegisterType((*CLUSSnifferDownload)(nil), "share.CLUSSnifferDownload")
	proto.RegisterType((*CLUSSnifferPcap)(nil), "share.CLUSSnifferPcap")
	proto.RegisterType((*CLUSContainerLogReq)(nil), "share.CLUSContainerLogReq")
	proto.RegisterType((*CLUSContainerLogRes)(nil), "share.CLUSContainerLogRes")
	proto.RegisterType((*CLUSProcess)(nil), "share.CLUSProcess")
	proto.RegisterType((*CLUSProcessArray)(nil), "share.CLUSProcessArray")
	proto.RegisterType((*CLUSDerivedDlpRule)(nil), "share.CLUSDerivedDlpRule")
	proto.RegisterType((*CLUSDerivedDlpRuleArray)(nil), "share.CLUSDerivedDlpRuleArray")
	proto.RegisterType((*CLUSDerivedDlpRuleMap)(nil), "share.CLUSDerivedDlpRuleMap")
	proto.RegisterType((*CLUSDerivedDlpRuleEntry)(nil), "share.CLUSDerivedDlpRuleEntry")
	proto.RegisterType((*CLUSDerivedDlpRuleEntryArray)(nil), "share.CLUSDerivedDlpRuleEntryArray")
	proto.RegisterType((*CLUSDerivedDlpRuleMac)(nil), "share.CLUSDerivedDlpRuleMac")
	proto.RegisterType((*CLUSDerivedDlpRuleMacArray)(nil), "share.CLUSDerivedDlpRuleMacArray")
	proto.RegisterType((*CLUSDerivedProcessRule)(nil), "share.CLUSDerivedProcessRule")
	proto.RegisterType((*CLUSDerivedProcessRuleArray)(nil), "share.CLUSDerivedProcessRuleArray")
	proto.RegisterType((*CLUSDerivedFileRule)(nil), "share.CLUSDerivedFileRule")
	proto.RegisterType((*CLUSDerivedFileRuleArray)(nil), "share.CLUSDerivedFileRuleArray")
	proto.RegisterType((*CLUSWorkloadInterceptPort)(nil), "share.CLUSWorkloadInterceptPort")
	proto.RegisterType((*CLUSWorkloadIntercept)(nil), "share.CLUSWorkloadIntercept")
	proto.RegisterType((*CLUSMeter)(nil), "share.CLUSMeter")
	proto.RegisterType((*CLUSMeterArray)(nil), "share.CLUSMeterArray")
	proto.RegisterType((*CLUSWlIDArray)(nil), "share.CLUSWlIDArray")
	proto.RegisterEnum("share.SnifferCmd", SnifferCmd_name, SnifferCmd_value)
	proto.RegisterEnum("share.SnifferStatus", SnifferStatus_name, SnifferStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EnforcerCapService service

type EnforcerCapServiceClient interface {
	IsGRPCCompressed(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSBoolean, error)
}

type enforcerCapServiceClient struct {
	cc *grpc.ClientConn
}

func NewEnforcerCapServiceClient(cc *grpc.ClientConn) EnforcerCapServiceClient {
	return &enforcerCapServiceClient{cc}
}

func (c *enforcerCapServiceClient) IsGRPCCompressed(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSBoolean, error) {
	out := new(CLUSBoolean)
	err := grpc.Invoke(ctx, "/share.EnforcerCapService/IsGRPCCompressed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EnforcerCapService service

type EnforcerCapServiceServer interface {
	IsGRPCCompressed(context.Context, *RPCVoid) (*CLUSBoolean, error)
}

func RegisterEnforcerCapServiceServer(s *grpc.Server, srv EnforcerCapServiceServer) {
	s.RegisterService(&_EnforcerCapService_serviceDesc, srv)
}

func _EnforcerCapService_IsGRPCCompressed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerCapServiceServer).IsGRPCCompressed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerCapService/IsGRPCCompressed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerCapServiceServer).IsGRPCCompressed(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

var _EnforcerCapService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "share.EnforcerCapService",
	HandlerType: (*EnforcerCapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsGRPCCompressed",
			Handler:    _EnforcerCapService_IsGRPCCompressed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "enforcer_service.proto",
}

// Client API for EnforcerService service

type EnforcerServiceClient interface {
	Kick(ctx context.Context, in *CLUSKick, opts ...grpc.CallOption) (*RPCVoid, error)
	GetSessionList(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (EnforcerService_GetSessionListClient, error)
	ClearSession(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*RPCVoid, error)
	GetStats(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSStats, error)
	GetGroupStats(ctx context.Context, in *CLUSWlIDArray, opts ...grpc.CallOption) (*CLUSStats, error)
	GetSessionCounter(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSSessionCounter, error)
	GetDatapathCounter(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSDatapathCounter, error)
	GetDerivedPolicyRules(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSDerivedPolicyRuleMap, error)
	ProbeSummary(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSProbeSummary, error)
	ProbeProcessMap(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSProbeProcessArray, error)
	ProbeContainerMap(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSProbeContainerArray, error)
	SnifferCmd(ctx context.Context, in *CLUSSnifferRequest, opts ...grpc.CallOption) (*CLUSSnifferResponse, error)
	GetSniffers(ctx context.Context, in *CLUSSnifferFilter, opts ...grpc.CallOption) (*CLUSSnifferArray, error)
	GetSnifferPcap(ctx context.Context, in *CLUSSnifferDownload, opts ...grpc.CallOption) (EnforcerService_GetSnifferPcapClient, error)
	GetContainerLogs(ctx context.Context, in *CLUSContainerLogReq, opts ...grpc.CallOption) (EnforcerService_GetContainerLogsClient, error)
	RunDockerBench(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*RPCVoid, error)
	RunKubernetesBench(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*RPCVoid, error)
	GetFileMonitorFile(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSFileMonitorFileArray, error)
	GetProcess(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSProcessArray, error)
	GetProcessHistory(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSProcessArray, error)
	GetDerivedDlpRules(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSDerivedDlpRuleMap, error)
	GetDerivedDlpRuleEntries(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSDerivedDlpRuleEntryArray, error)
	GetDerivedDlpRuleMacs(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSDerivedDlpRuleMacArray, error)
	GetDerivedWorkloadProcessRule(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSDerivedProcessRuleArray, error)
	GetDerivedWorkloadFileRule(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSDerivedFileRuleArray, error)
	GetContainerIntercept(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSWorkloadIntercept, error)
	GetMeterList(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (EnforcerService_GetMeterListClient, error)
	ProfilingCmd(ctx context.Context, in *CLUSProfilingRequest, opts ...grpc.CallOption) (*RPCVoid, error)
}

type enforcerServiceClient struct {
	cc *grpc.ClientConn
}

func NewEnforcerServiceClient(cc *grpc.ClientConn) EnforcerServiceClient {
	return &enforcerServiceClient{cc}
}

func (c *enforcerServiceClient) Kick(ctx context.Context, in *CLUSKick, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := grpc.Invoke(ctx, "/share.EnforcerService/Kick", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetSessionList(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (EnforcerService_GetSessionListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EnforcerService_serviceDesc.Streams[0], c.cc, "/share.EnforcerService/GetSessionList", opts...)
	if err != nil {
		return nil, err
	}
	x := &enforcerServiceGetSessionListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnforcerService_GetSessionListClient interface {
	Recv() (*CLUSSessionArray, error)
	grpc.ClientStream
}

type enforcerServiceGetSessionListClient struct {
	grpc.ClientStream
}

func (x *enforcerServiceGetSessionListClient) Recv() (*CLUSSessionArray, error) {
	m := new(CLUSSessionArray)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *enforcerServiceClient) ClearSession(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := grpc.Invoke(ctx, "/share.EnforcerService/ClearSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetStats(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSStats, error) {
	out := new(CLUSStats)
	err := grpc.Invoke(ctx, "/share.EnforcerService/GetStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetGroupStats(ctx context.Context, in *CLUSWlIDArray, opts ...grpc.CallOption) (*CLUSStats, error) {
	out := new(CLUSStats)
	err := grpc.Invoke(ctx, "/share.EnforcerService/GetGroupStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetSessionCounter(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSSessionCounter, error) {
	out := new(CLUSSessionCounter)
	err := grpc.Invoke(ctx, "/share.EnforcerService/GetSessionCounter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetDatapathCounter(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSDatapathCounter, error) {
	out := new(CLUSDatapathCounter)
	err := grpc.Invoke(ctx, "/share.EnforcerService/GetDatapathCounter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetDerivedPolicyRules(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSDerivedPolicyRuleMap, error) {
	out := new(CLUSDerivedPolicyRuleMap)
	err := grpc.Invoke(ctx, "/share.EnforcerService/GetDerivedPolicyRules", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) ProbeSummary(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSProbeSummary, error) {
	out := new(CLUSProbeSummary)
	err := grpc.Invoke(ctx, "/share.EnforcerService/ProbeSummary", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) ProbeProcessMap(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSProbeProcessArray, error) {
	out := new(CLUSProbeProcessArray)
	err := grpc.Invoke(ctx, "/share.EnforcerService/ProbeProcessMap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) ProbeContainerMap(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSProbeContainerArray, error) {
	out := new(CLUSProbeContainerArray)
	err := grpc.Invoke(ctx, "/share.EnforcerService/ProbeContainerMap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) SnifferCmd(ctx context.Context, in *CLUSSnifferRequest, opts ...grpc.CallOption) (*CLUSSnifferResponse, error) {
	out := new(CLUSSnifferResponse)
	err := grpc.Invoke(ctx, "/share.EnforcerService/SnifferCmd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetSniffers(ctx context.Context, in *CLUSSnifferFilter, opts ...grpc.CallOption) (*CLUSSnifferArray, error) {
	out := new(CLUSSnifferArray)
	err := grpc.Invoke(ctx, "/share.EnforcerService/GetSniffers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetSnifferPcap(ctx context.Context, in *CLUSSnifferDownload, opts ...grpc.CallOption) (EnforcerService_GetSnifferPcapClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EnforcerService_serviceDesc.Streams[1], c.cc, "/share.EnforcerService/GetSnifferPcap", opts...)
	if err != nil {
		return nil, err
	}
	x := &enforcerServiceGetSnifferPcapClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnforcerService_GetSnifferPcapClient interface {
	Recv() (*CLUSSnifferPcap, error)
	grpc.ClientStream
}

type enforcerServiceGetSnifferPcapClient struct {
	grpc.ClientStream
}

func (x *enforcerServiceGetSnifferPcapClient) Recv() (*CLUSSnifferPcap, error) {
	m := new(CLUSSnifferPcap)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *enforcerServiceClient) GetContainerLogs(ctx context.Context, in *CLUSContainerLogReq, opts ...grpc.CallOption) (EnforcerService_GetContainerLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EnforcerService_serviceDesc.Streams[2], c.cc, "/share.EnforcerService/GetContainerLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &enforcerServiceGetContainerLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnforcerService_GetContainerLogsClient interface {
	Recv() (*CLUSContainerLogRes, error)
	grpc.ClientStream
}

type enforcerServiceGetContainerLogsClient struct {
	grpc.ClientStream
}

func (x *enforcerServiceGetContainerLogsClient) Recv() (*CLUSContainerLogRes, error) {
	m := new(CLUSContainerLogRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *enforcerServiceClient) RunDockerBench(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := grpc.Invoke(ctx, "/share.EnforcerService/RunDockerBench", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) RunKubernetesBench(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := grpc.Invoke(ctx, "/share.EnforcerService/RunKubernetesBench", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetFileMonitorFile(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSFileMonitorFileArray, error) {
	out := new(CLUSFileMonitorFileArray)
	err := grpc.Invoke(ctx, "/share.EnforcerService/GetFileMonitorFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetProcess(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSProcessArray, error) {
	out := new(CLUSProcessArray)
	err := grpc.Invoke(ctx, "/share.EnforcerService/GetProcess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetProcessHistory(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSProcessArray, error) {
	out := new(CLUSProcessArray)
	err := grpc.Invoke(ctx, "/share.EnforcerService/GetProcessHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetDerivedDlpRules(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSDerivedDlpRuleMap, error) {
	out := new(CLUSDerivedDlpRuleMap)
	err := grpc.Invoke(ctx, "/share.EnforcerService/GetDerivedDlpRules", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetDerivedDlpRuleEntries(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSDerivedDlpRuleEntryArray, error) {
	out := new(CLUSDerivedDlpRuleEntryArray)
	err := grpc.Invoke(ctx, "/share.EnforcerService/GetDerivedDlpRuleEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetDerivedDlpRuleMacs(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSDerivedDlpRuleMacArray, error) {
	out := new(CLUSDerivedDlpRuleMacArray)
	err := grpc.Invoke(ctx, "/share.EnforcerService/GetDerivedDlpRuleMacs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetDerivedWorkloadProcessRule(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSDerivedProcessRuleArray, error) {
	out := new(CLUSDerivedProcessRuleArray)
	err := grpc.Invoke(ctx, "/share.EnforcerService/GetDerivedWorkloadProcessRule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetDerivedWorkloadFileRule(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSDerivedFileRuleArray, error) {
	out := new(CLUSDerivedFileRuleArray)
	err := grpc.Invoke(ctx, "/share.EnforcerService/GetDerivedWorkloadFileRule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetContainerIntercept(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSWorkloadIntercept, error) {
	out := new(CLUSWorkloadIntercept)
	err := grpc.Invoke(ctx, "/share.EnforcerService/GetContainerIntercept", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetMeterList(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (EnforcerService_GetMeterListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EnforcerService_serviceDesc.Streams[3], c.cc, "/share.EnforcerService/GetMeterList", opts...)
	if err != nil {
		return nil, err
	}
	x := &enforcerServiceGetMeterListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnforcerService_GetMeterListClient interface {
	Recv() (*CLUSMeterArray, error)
	grpc.ClientStream
}

type enforcerServiceGetMeterListClient struct {
	grpc.ClientStream
}

func (x *enforcerServiceGetMeterListClient) Recv() (*CLUSMeterArray, error) {
	m := new(CLUSMeterArray)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *enforcerServiceClient) ProfilingCmd(ctx context.Context, in *CLUSProfilingRequest, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := grpc.Invoke(ctx, "/share.EnforcerService/ProfilingCmd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EnforcerService service

type EnforcerServiceServer interface {
	Kick(context.Context, *CLUSKick) (*RPCVoid, error)
	GetSessionList(*CLUSFilter, EnforcerService_GetSessionListServer) error
	ClearSession(context.Context, *CLUSFilter) (*RPCVoid, error)
	GetStats(context.Context, *CLUSFilter) (*CLUSStats, error)
	GetGroupStats(context.Context, *CLUSWlIDArray) (*CLUSStats, error)
	GetSessionCounter(context.Context, *RPCVoid) (*CLUSSessionCounter, error)
	GetDatapathCounter(context.Context, *RPCVoid) (*CLUSDatapathCounter, error)
	GetDerivedPolicyRules(context.Context, *CLUSFilter) (*CLUSDerivedPolicyRuleMap, error)
	ProbeSummary(context.Context, *RPCVoid) (*CLUSProbeSummary, error)
	ProbeProcessMap(context.Context, *RPCVoid) (*CLUSProbeProcessArray, error)
	ProbeContainerMap(context.Context, *RPCVoid) (*CLUSProbeContainerArray, error)
	SnifferCmd(context.Context, *CLUSSnifferRequest) (*CLUSSnifferResponse, error)
	GetSniffers(context.Context, *CLUSSnifferFilter) (*CLUSSnifferArray, error)
	GetSnifferPcap(*CLUSSnifferDownload, EnforcerService_GetSnifferPcapServer) error
	GetContainerLogs(*CLUSContainerLogReq, EnforcerService_GetContainerLogsServer) error
	RunDockerBench(context.Context, *RPCVoid) (*RPCVoid, error)
	RunKubernetesBench(context.Context, *RPCVoid) (*RPCVoid, error)
	GetFileMonitorFile(context.Context, *CLUSFilter) (*CLUSFileMonitorFileArray, error)
	GetProcess(context.Context, *CLUSFilter) (*CLUSProcessArray, error)
	GetProcessHistory(context.Context, *CLUSFilter) (*CLUSProcessArray, error)
	GetDerivedDlpRules(context.Context, *CLUSFilter) (*CLUSDerivedDlpRuleMap, error)
	GetDerivedDlpRuleEntries(context.Context, *CLUSFilter) (*CLUSDerivedDlpRuleEntryArray, error)
	GetDerivedDlpRuleMacs(context.Context, *CLUSFilter) (*CLUSDerivedDlpRuleMacArray, error)
	GetDerivedWorkloadProcessRule(context.Context, *CLUSFilter) (*CLUSDerivedProcessRuleArray, error)
	GetDerivedWorkloadFileRule(context.Context, *CLUSFilter) (*CLUSDerivedFileRuleArray, error)
	GetContainerIntercept(context.Context, *CLUSFilter) (*CLUSWorkloadIntercept, error)
	GetMeterList(*CLUSFilter, EnforcerService_GetMeterListServer) error
	ProfilingCmd(context.Context, *CLUSProfilingRequest) (*RPCVoid, error)
}

func RegisterEnforcerServiceServer(s *grpc.Server, srv EnforcerServiceServer) {
	s.RegisterService(&_EnforcerService_serviceDesc, srv)
}

func _EnforcerService_Kick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSKick)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).Kick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/Kick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).Kick(ctx, req.(*CLUSKick))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetSessionList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CLUSFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnforcerServiceServer).GetSessionList(m, &enforcerServiceGetSessionListServer{stream})
}

type EnforcerService_GetSessionListServer interface {
	Send(*CLUSSessionArray) error
	grpc.ServerStream
}

type enforcerServiceGetSessionListServer struct {
	grpc.ServerStream
}

func (x *enforcerServiceGetSessionListServer) Send(m *CLUSSessionArray) error {
	return x.ServerStream.SendMsg(m)
}

func _EnforcerService_ClearSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).ClearSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/ClearSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).ClearSession(ctx, req.(*CLUSFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetStats(ctx, req.(*CLUSFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetGroupStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSWlIDArray)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetGroupStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetGroupStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetGroupStats(ctx, req.(*CLUSWlIDArray))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetSessionCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetSessionCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetSessionCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetSessionCounter(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetDatapathCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetDatapathCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetDatapathCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetDatapathCounter(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetDerivedPolicyRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetDerivedPolicyRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetDerivedPolicyRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetDerivedPolicyRules(ctx, req.(*CLUSFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_ProbeSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).ProbeSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/ProbeSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).ProbeSummary(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_ProbeProcessMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).ProbeProcessMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/ProbeProcessMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).ProbeProcessMap(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_ProbeContainerMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).ProbeContainerMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/ProbeContainerMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).ProbeContainerMap(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_SnifferCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSSnifferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).SnifferCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/SnifferCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).SnifferCmd(ctx, req.(*CLUSSnifferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetSniffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSSnifferFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetSniffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetSniffers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetSniffers(ctx, req.(*CLUSSnifferFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetSnifferPcap_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CLUSSnifferDownload)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnforcerServiceServer).GetSnifferPcap(m, &enforcerServiceGetSnifferPcapServer{stream})
}

type EnforcerService_GetSnifferPcapServer interface {
	Send(*CLUSSnifferPcap) error
	grpc.ServerStream
}

type enforcerServiceGetSnifferPcapServer struct {
	grpc.ServerStream
}

func (x *enforcerServiceGetSnifferPcapServer) Send(m *CLUSSnifferPcap) error {
	return x.ServerStream.SendMsg(m)
}

func _EnforcerService_GetContainerLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CLUSContainerLogReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnforcerServiceServer).GetContainerLogs(m, &enforcerServiceGetContainerLogsServer{stream})
}

type EnforcerService_GetContainerLogsServer interface {
	Send(*CLUSContainerLogRes) error
	grpc.ServerStream
}

type enforcerServiceGetContainerLogsServer struct {
	grpc.ServerStream
}

func (x *enforcerServiceGetContainerLogsServer) Send(m *CLUSContainerLogRes) error {
	return x.ServerStream.SendMsg(m)
}

func _EnforcerService_RunDockerBench_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).RunDockerBench(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/RunDockerBench",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).RunDockerBench(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_RunKubernetesBench_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).RunKubernetesBench(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/RunKubernetesBench",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).RunKubernetesBench(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetFileMonitorFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetFileMonitorFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetFileMonitorFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetFileMonitorFile(ctx, req.(*CLUSFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetProcess(ctx, req.(*CLUSFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetProcessHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetProcessHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetProcessHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetProcessHistory(ctx, req.(*CLUSFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetDerivedDlpRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetDerivedDlpRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetDerivedDlpRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetDerivedDlpRules(ctx, req.(*CLUSFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetDerivedDlpRuleEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetDerivedDlpRuleEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetDerivedDlpRuleEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetDerivedDlpRuleEntries(ctx, req.(*CLUSFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetDerivedDlpRuleMacs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetDerivedDlpRuleMacs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetDerivedDlpRuleMacs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetDerivedDlpRuleMacs(ctx, req.(*CLUSFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetDerivedWorkloadProcessRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetDerivedWorkloadProcessRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetDerivedWorkloadProcessRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetDerivedWorkloadProcessRule(ctx, req.(*CLUSFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetDerivedWorkloadFileRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetDerivedWorkloadFileRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetDerivedWorkloadFileRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetDerivedWorkloadFileRule(ctx, req.(*CLUSFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetContainerIntercept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetContainerIntercept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetContainerIntercept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetContainerIntercept(ctx, req.(*CLUSFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetMeterList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CLUSFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnforcerServiceServer).GetMeterList(m, &enforcerServiceGetMeterListServer{stream})
}

type EnforcerService_GetMeterListServer interface {
	Send(*CLUSMeterArray) error
	grpc.ServerStream
}

type enforcerServiceGetMeterListServer struct {
	grpc.ServerStream
}

func (x *enforcerServiceGetMeterListServer) Send(m *CLUSMeterArray) error {
	return x.ServerStream.SendMsg(m)
}

func _EnforcerService_ProfilingCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSProfilingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).ProfilingCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/ProfilingCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).ProfilingCmd(ctx, req.(*CLUSProfilingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EnforcerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "share.EnforcerService",
	HandlerType: (*EnforcerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Kick",
			Handler:    _EnforcerService_Kick_Handler,
		},
		{
			MethodName: "ClearSession",
			Handler:    _EnforcerService_ClearSession_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _EnforcerService_GetStats_Handler,
		},
		{
			MethodName: "GetGroupStats",
			Handler:    _EnforcerService_GetGroupStats_Handler,
		},
		{
			MethodName: "GetSessionCounter",
			Handler:    _EnforcerService_GetSessionCounter_Handler,
		},
		{
			MethodName: "GetDatapathCounter",
			Handler:    _EnforcerService_GetDatapathCounter_Handler,
		},
		{
			MethodName: "GetDerivedPolicyRules",
			Handler:    _EnforcerService_GetDerivedPolicyRules_Handler,
		},
		{
			MethodName: "ProbeSummary",
			Handler:    _EnforcerService_ProbeSummary_Handler,
		},
		{
			MethodName: "ProbeProcessMap",
			Handler:    _EnforcerService_ProbeProcessMap_Handler,
		},
		{
			MethodName: "ProbeContainerMap",
			Handler:    _EnforcerService_ProbeContainerMap_Handler,
		},
		{
			MethodName: "SnifferCmd",
			Handler:    _EnforcerService_SnifferCmd_Handler,
		},
		{
			MethodName: "GetSniffers",
			Handler:    _EnforcerService_GetSniffers_Handler,
		},
		{
			MethodName: "RunDockerBench",
			Handler:    _EnforcerService_RunDockerBench_Handler,
		},
		{
			MethodName: "RunKubernetesBench",
			Handler:    _EnforcerService_RunKubernetesBench_Handler,
		},
		{
			MethodName: "GetFileMonitorFile",
			Handler:    _EnforcerService_GetFileMonitorFile_Handler,
		},
		{
			MethodName: "GetProcess",
			Handler:    _EnforcerService_GetProcess_Handler,
		},
		{
			MethodName: "GetProcessHistory",
			Handler:    _EnforcerService_GetProcessHistory_Handler,
		},
		{
			MethodName: "GetDerivedDlpRules",
			Handler:    _EnforcerService_GetDerivedDlpRules_Handler,
		},
		{
			MethodName: "GetDerivedDlpRuleEntries",
			Handler:    _EnforcerService_GetDerivedDlpRuleEntries_Handler,
		},
		{
			MethodName: "GetDerivedDlpRuleMacs",
			Handler:    _EnforcerService_GetDerivedDlpRuleMacs_Handler,
		},
		{
			MethodName: "GetDerivedWorkloadProcessRule",
			Handler:    _EnforcerService_GetDerivedWorkloadProcessRule_Handler,
		},
		{
			MethodName: "GetDerivedWorkloadFileRule",
			Handler:    _EnforcerService_GetDerivedWorkloadFileRule_Handler,
		},
		{
			MethodName: "GetContainerIntercept",
			Handler:    _EnforcerService_GetContainerIntercept_Handler,
		},
		{
			MethodName: "ProfilingCmd",
			Handler:    _EnforcerService_ProfilingCmd_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSessionList",
			Handler:       _EnforcerService_GetSessionList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSnifferPcap",
			Handler:       _EnforcerService_GetSnifferPcap_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetContainerLogs",
			Handler:       _EnforcerService_GetContainerLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMeterList",
			Handler:       _EnforcerService_GetMeterList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "enforcer_service.proto",
}

// Client API for EnforcerScanService service

type EnforcerScanServiceClient interface {
	ScanGetFiles(ctx context.Context, in *ScanRunningRequest, opts ...grpc.CallOption) (*ScanData, error)
}

type enforcerScanServiceClient struct {
	cc *grpc.ClientConn
}

func NewEnforcerScanServiceClient(cc *grpc.ClientConn) EnforcerScanServiceClient {
	return &enforcerScanServiceClient{cc}
}

func (c *enforcerScanServiceClient) ScanGetFiles(ctx context.Context, in *ScanRunningRequest, opts ...grpc.CallOption) (*ScanData, error) {
	out := new(ScanData)
	err := grpc.Invoke(ctx, "/share.EnforcerScanService/ScanGetFiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EnforcerScanService service

type EnforcerScanServiceServer interface {
	ScanGetFiles(context.Context, *ScanRunningRequest) (*ScanData, error)
}

func RegisterEnforcerScanServiceServer(s *grpc.Server, srv EnforcerScanServiceServer) {
	s.RegisterService(&_EnforcerScanService_serviceDesc, srv)
}

func _EnforcerScanService_ScanGetFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanRunningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerScanServiceServer).ScanGetFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerScanService/ScanGetFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerScanServiceServer).ScanGetFiles(ctx, req.(*ScanRunningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EnforcerScanService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "share.EnforcerScanService",
	HandlerType: (*EnforcerScanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScanGetFiles",
			Handler:    _EnforcerScanService_ScanGetFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "enforcer_service.proto",
}

func init() { proto.RegisterFile("enforcer_service.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 3762 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x5a, 0x4f, 0x73, 0x1b, 0x39,
	0x76, 0x5f, 0x92, 0xfa, 0x43, 0x42, 0xa2, 0x24, 0xb7, 0x35, 0x76, 0x9b, 0xf6, 0x78, 0x34, 0x3d,
	0x3b, 0x1b, 0x65, 0x32, 0xe5, 0xf5, 0x6a, 0xe7, 0xcf, 0xc6, 0xa9, 0x9a, 0x19, 0x8a, 0x94, 0x34,
	0xac, 0x11, 0x15, 0x1a, 0x94, 0xd7, 0x4e, 0x2a, 0x5b, 0xa9, 0x36, 0x09, 0x4a, 0x5d, 0x22, 0xbb,
	0x7b, 0xd1, 0xa0, 0x6c, 0xe5, 0x9a, 0x43, 0x3e, 0x42, 0x0e, 0xa9, 0x7c, 0x88, 0xdc, 0x53, 0x39,
	0xa5, 0x72, 0xc8, 0x07, 0xc8, 0x2d, 0x95, 0x7b, 0x6e, 0xf9, 0x04, 0x49, 0xbd, 0xf7, 0x80, 0x6e,
	0xa0, 0x49, 0xc9, 0x9b, 0x13, 0xf1, 0x7e, 0x78, 0x78, 0x00, 0x1e, 0x80, 0xf7, 0xaf, 0xc9, 0x1e,
	0x88, 0x78, 0x92, 0xc8, 0x91, 0x90, 0x7f, 0x9d, 0x09, 0x79, 0x1d, 0x8d, 0xc4, 0xb3, 0x54, 0x26,
	0x2a, 0xf1, 0x56, 0xb3, 0xcb, 0x50, 0x8a, 0xd6, 0xe6, 0x28, 0x99, 0xcd, 0x92, 0x98, 0xc0, 0x16,
	0xcb, 0x46, 0xa1, 0x6e, 0x07, 0x2f, 0x58, 0xbd, 0x73, 0xfa, 0x6a, 0xf8, 0x53, 0x34, 0xba, 0xf2,
	0x1e, 0xb0, 0xb5, 0x8e, 0x92, 0xd3, 0x5e, 0xd7, 0xaf, 0xec, 0x55, 0xf6, 0x1b, 0x5c, 0x53, 0x80,
	0x73, 0x11, 0x66, 0x49, 0xec, 0x57, 0x09, 0x27, 0x2a, 0x18, 0x33, 0x06, 0x63, 0x8f, 0xa3, 0xa9,
	0x12, 0xd2, 0x6b, 0xb1, 0xfa, 0xeb, 0x44, 0x5e, 0x4d, 0x93, 0x70, 0xac, 0xc7, 0xe7, 0xb4, 0xb7,
	0xc5, 0xaa, 0xbd, 0x2e, 0x8e, 0x6e, 0xf2, 0x6a, 0xaf, 0xeb, 0xed, 0xb2, 0xd5, 0xa1, 0x0a, 0xa5,
	0xf2, 0x6b, 0x08, 0x11, 0x01, 0xe8, 0x69, 0x34, 0x8b, 0x94, 0xbf, 0x42, 0x28, 0x12, 0xc1, 0xff,
	0xae, 0xb3, 0x0d, 0x98, 0x66, 0x28, 0xb2, 0x2c, 0x4a, 0x62, 0x2d, 0xab, 0x92, 0xcb, 0xb2, 0xe7,
	0xad, 0x96, 0xe6, 0x7d, 0xc2, 0x1a, 0x47, 0xea, 0x52, 0xc8, 0xf3, 0x9b, 0x54, 0xe8, 0xb9, 0x0a,
	0xc0, 0xf3, 0xd9, 0x7a, 0x6f, 0x30, 0x00, 0x35, 0xe8, 0x19, 0x0d, 0x09, 0xe3, 0x3a, 0xd3, 0x48,
	0xc4, 0xaa, 0xdf, 0xee, 0xf8, 0xab, 0x7b, 0x95, 0xfd, 0x4d, 0x5e, 0x00, 0xd0, 0x3b, 0x14, 0xf2,
	0x5a, 0x48, 0xe8, 0x5d, 0xa3, 0xde, 0x1c, 0x80, 0xf5, 0x10, 0x6b, 0x6f, 0xe0, 0xaf, 0x63, 0x67,
	0x4e, 0x43, 0x1f, 0x31, 0xf6, 0x06, 0x7e, 0x9d, 0xfa, 0x0c, 0xed, 0x3d, 0x65, 0x8c, 0xf8, 0x06,
	0x89, 0x54, 0x7e, 0x03, 0x17, 0x64, 0x21, 0xd0, 0x4f, 0xbc, 0xd8, 0xcf, 0xa8, 0xbf, 0x40, 0x40,
	0x76, 0xaf, 0xd3, 0x1f, 0x74, 0x92, 0xb1, 0xf0, 0x37, 0xb0, 0x37, 0xa7, 0x4d, 0x1f, 0xaa, 0x61,
	0xb3, 0xe8, 0x43, 0x2d, 0xec, 0xb1, 0x0d, 0x9a, 0x65, 0xa8, 0x42, 0x25, 0xfc, 0x26, 0x76, 0xdb,
	0x10, 0x70, 0xd0, 0x3c, 0xc4, 0xb1, 0x45, 0x1c, 0x16, 0x64, 0xad, 0xfd, 0x4a, 0x65, 0xfe, 0xb6,
	0xb3, 0xf6, 0x2b, 0x95, 0x59, 0x6b, 0x87, 0xfe, 0x1d, 0x67, 0xed, 0xd0, 0x9f, 0xaf, 0xe1, 0xf0,
	0x46, 0x89, 0xcc, 0xbf, 0xb7, 0x57, 0xd9, 0x5f, 0xe1, 0x36, 0x54, 0xac, 0x81, 0x38, 0x3c, 0xe2,
	0xb0, 0x20, 0xe0, 0x68, 0xa7, 0xe9, 0x34, 0x1a, 0x85, 0x2a, 0x4a, 0x62, 0xff, 0x3e, 0xad, 0xd2,
	0x82, 0xbc, 0x1d, 0x56, 0x6b, 0x5f, 0x08, 0x7f, 0x17, 0x7b, 0xa0, 0xe9, 0x79, 0x6c, 0xa5, 0x37,
	0x9e, 0x0a, 0xff, 0x23, 0x84, 0xb0, 0x0d, 0xd8, 0x69, 0x34, 0x11, 0xfe, 0x03, 0xc2, 0xa0, 0x8d,
	0x37, 0x25, 0xbe, 0x90, 0x22, 0xcb, 0xfc, 0x87, 0x7b, 0x95, 0xfd, 0x3a, 0x37, 0x24, 0xc8, 0x3c,
	0x0f, 0x53, 0xdf, 0x47, 0x14, 0x9a, 0x80, 0xf4, 0xa3, 0xb1, 0xff, 0x88, 0x90, 0x7e, 0x34, 0x06,
	0xed, 0x0f, 0x92, 0x69, 0x34, 0xba, 0xe9, 0x8d, 0xfd, 0x16, 0x69, 0xdf, 0xd0, 0x5e, 0xc0, 0x36,
	0xa9, 0xdd, 0x1e, 0xe1, 0xb2, 0x1f, 0x63, 0xbf, 0x83, 0x79, 0x3f, 0x67, 0x4d, 0x52, 0x45, 0x3b,
	0x9b, 0xa1, 0x02, 0x9f, 0x20, 0x93, 0x0b, 0x02, 0x17, 0xa9, 0xc3, 0x70, 0x7d, 0x4c, 0x5c, 0x0e,
	0xe8, 0xfd, 0x82, 0x6d, 0xe5, 0xc3, 0x48, 0x95, 0x4f, 0x51, 0x95, 0x25, 0x14, 0xf8, 0xf2, 0x81,
	0xc4, 0xf7, 0x09, 0xf1, 0xb9, 0x28, 0xec, 0xed, 0xc7, 0x24, 0x53, 0x7d, 0xb8, 0x75, 0x7b, 0xb8,
	0xe5, 0x9c, 0x86, 0xf7, 0xfc, 0x66, 0x32, 0xe9, 0x0d, 0xfc, 0x4f, 0xf1, 0xaa, 0x13, 0x01, 0xd6,
	0xe4, 0xcd, 0x64, 0xd2, 0x4e, 0x53, 0x3f, 0xc0, 0x05, 0x6a, 0x0a, 0x74, 0xfc, 0x66, 0x32, 0xc1,
	0xcb, 0xfd, 0x19, 0xbd, 0x46, 0x4d, 0x06, 0x87, 0x6c, 0xc7, 0x32, 0x00, 0x6d, 0x29, 0xc3, 0x1b,
	0xef, 0x19, 0xbc, 0x24, 0xa4, 0x33, 0xbf, 0xb2, 0x57, 0xdb, 0xdf, 0x38, 0xf0, 0x9e, 0xa1, 0xad,
	0x7b, 0x66, 0xb1, 0xf2, 0x9c, 0x27, 0xf8, 0x8f, 0x0a, 0xf3, 0xac, 0x9e, 0x4e, 0x32, 0x8f, 0xc1,
	0x68, 0xc1, 0xc5, 0x9b, 0x4b, 0x4b, 0x12, 0x5d, 0xfe, 0x02, 0x42, 0x85, 0xcd, 0xe5, 0x79, 0x67,
	0x90, 0x33, 0x91, 0x19, 0x2b, 0xa1, 0x9a, 0xef, 0x55, 0xb7, 0xe0, 0xab, 0xe5, 0x7c, 0x16, 0xea,
	0xed, 0xb3, 0xed, 0xce, 0x5c, 0xc2, 0xeb, 0xcb, 0x19, 0xc9, 0xf8, 0x94, 0x61, 0x3c, 0xf6, 0xb9,
	0xec, 0x15, 0x7c, 0xab, 0xfa, 0xd8, 0x6d, 0x30, 0xf8, 0x2f, 0xc6, 0xee, 0xc3, 0xc6, 0xba, 0xa1,
	0x0a, 0xd3, 0x50, 0x5d, 0x9a, 0x9d, 0x3d, 0x61, 0x0d, 0xfe, 0x66, 0x10, 0x8e, 0xae, 0x84, 0xa2,
	0x7d, 0xad, 0xf0, 0x02, 0x00, 0xd9, 0xfc, 0x4d, 0x57, 0x26, 0xa9, 0xe1, 0xa8, 0x22, 0x87, 0x0b,
	0x82, 0x8c, 0xf3, 0x5c, 0x46, 0x8d, 0x64, 0x9c, 0xdb, 0x32, 0xce, 0x1d, 0x19, 0x2b, 0x24, 0xc3,
	0x01, 0xe1, 0x82, 0x1f, 0x49, 0x99, 0x48, 0xc3, 0xb4, 0x8a, 0x4c, 0x0e, 0xe6, 0x7d, 0xc9, 0xee,
	0x9d, 0x25, 0xc6, 0x68, 0x1b, 0xc6, 0x35, 0x64, 0x5c, 0xec, 0x80, 0x33, 0xeb, 0x0d, 0xae, 0xbf,
	0x32, 0x7c, 0xeb, 0x64, 0x0a, 0x2c, 0x48, 0x73, 0x7c, 0x63, 0x38, 0xea, 0x39, 0x87, 0x81, 0xc0,
	0x20, 0x9d, 0x77, 0x06, 0x86, 0xa1, 0x81, 0x0c, 0x16, 0xe2, 0x3d, 0x67, 0xf7, 0xcf, 0x3b, 0x83,
	0xb3, 0x44, 0xab, 0xd9, 0x30, 0x32, 0x64, 0x5c, 0xd6, 0x05, 0x12, 0x5f, 0x75, 0x73, 0x89, 0x1b,
	0x24, 0xb1, 0x40, 0x70, 0x4d, 0x9d, 0x7e, 0xce, 0xb0, 0xa9, 0xd7, 0x54, 0x40, 0xa0, 0xa9, 0x3f,
	0x07, 0xdf, 0x64, 0x58, 0x9a, 0xa4, 0x29, 0x1b, 0x83, 0x13, 0x39, 0x96, 0xe1, 0xc5, 0x4c, 0xc4,
	0x2a, 0x43, 0x43, 0xbc, 0xc2, 0x0b, 0xc0, 0xfb, 0x82, 0xed, 0x9c, 0x47, 0x33, 0x91, 0xcc, 0x55,
	0xc1, 0xb4, 0x8d, 0x4c, 0x0b, 0x38, 0x9e, 0x5e, 0xa2, 0xc2, 0x69, 0x7e, 0xbb, 0x76, 0xf4, 0xe9,
	0xd9, 0x20, 0xac, 0xda, 0xbe, 0xfa, 0xda, 0x30, 0xdb, 0xf7, 0x7e, 0x8f, 0x6d, 0xd8, 0x97, 0x5e,
	0x1b, 0x66, 0xfb, 0xc6, 0x07, 0x6c, 0xd3, 0xb9, 0xee, 0xf7, 0x69, 0x5f, 0xce, 0x5d, 0x7f, 0xca,
	0x98, 0x75, 0xd1, 0x77, 0x49, 0x7b, 0x3d, 0xa7, 0x1f, 0x2e, 0x55, 0x5f, 0x28, 0x21, 0x33, 0x34,
	0xd7, 0x2b, 0xdc, 0x42, 0x60, 0x15, 0x03, 0x99, 0xbc, 0xbf, 0xd1, 0x0c, 0x0f, 0x68, 0x15, 0x16,
	0x84, 0x2e, 0x7d, 0x2e, 0x75, 0xff, 0x43, 0xd2, 0x5c, 0x0e, 0xc0, 0x1a, 0x3b, 0x73, 0x79, 0x9a,
	0x5c, 0x74, 0xc2, 0xd1, 0xa5, 0xc8, 0xd0, 0x9e, 0xaf, 0x70, 0x07, 0x83, 0x17, 0x7e, 0x2c, 0x85,
	0x18, 0x17, 0xba, 0x7d, 0x44, 0x26, 0xd1, 0x45, 0x61, 0xa6, 0x76, 0x96, 0x89, 0xd9, 0xdb, 0xe9,
	0x4d, 0x86, 0xf6, 0x7e, 0x85, 0x17, 0x40, 0x2e, 0xa5, 0x60, 0x79, 0x6c, 0x49, 0x71, 0xf8, 0x06,
	0xa1, 0xcc, 0x44, 0x61, 0x9c, 0x9e, 0xec, 0xd5, 0x80, 0xcf, 0x45, 0xe1, 0x1c, 0x09, 0x31, 0xd7,
	0xe6, 0x63, 0x64, 0x73, 0x41, 0xb8, 0x19, 0xe4, 0x52, 0xc0, 0xe5, 0xff, 0x8a, 0xcf, 0xa7, 0xda,
	0xf0, 0x37, 0xf9, 0x02, 0xee, 0xf2, 0x1e, 0x10, 0xef, 0x27, 0x65, 0x5e, 0xc2, 0x71, 0x76, 0xc4,
	0xba, 0xc9, 0x2c, 0x8c, 0xe2, 0x0c, 0x7d, 0x40, 0x93, 0xbb, 0x20, 0xd8, 0x3c, 0x1b, 0xe8, 0x0d,
	0x32, 0x74, 0x09, 0x4d, 0x5e, 0x86, 0xe1, 0x9c, 0x4f, 0x12, 0x9e, 0xcc, 0x55, 0x14, 0x8b, 0x4c,
	0x3b, 0x08, 0x0b, 0x41, 0xe7, 0x9c, 0x25, 0x13, 0xf4, 0x10, 0x9b, 0x1c, 0xdb, 0x10, 0x10, 0x0e,
	0x86, 0xfe, 0xcf, 0x11, 0xa9, 0x0e, 0x86, 0xa0, 0x39, 0x8c, 0x1c, 0xe1, 0x7a, 0x74, 0x92, 0x38,
	0xce, 0xfc, 0xcf, 0x49, 0xc3, 0x2e, 0x9a, 0xf3, 0x0d, 0xc2, 0x2c, 0x23, 0xbe, 0x5f, 0x58, 0x7c,
	0x39, 0x1a, 0xbc, 0x61, 0xbb, 0x68, 0x60, 0x85, 0x8c, 0xae, 0xc5, 0x58, 0x7b, 0xe6, 0x14, 0x1d,
	0x3d, 0x78, 0xb1, 0x8a, 0x0e, 0x27, 0xd2, 0x14, 0x5c, 0x9b, 0x76, 0xe3, 0xe4, 0x23, 0x34, 0x85,
	0x01, 0xf4, 0x7c, 0x2a, 0x7a, 0x5d, 0xed, 0x13, 0x34, 0x15, 0xfc, 0x4b, 0x95, 0x7d, 0xb4, 0x20,
	0x1a, 0xfa, 0x16, 0x82, 0x5c, 0x08, 0x98, 0xe5, 0xa8, 0x37, 0x40, 0xc1, 0x9b, 0x9c, 0x08, 0x40,
	0xbb, 0x19, 0xc4, 0x99, 0x35, 0x42, 0x91, 0x80, 0xd9, 0xb0, 0x9b, 0xa3, 0x41, 0xde, 0xe4, 0x9a,
	0x02, 0x1c, 0x19, 0xb8, 0x8e, 0x68, 0x35, 0x05, 0x3a, 0x45, 0xaf, 0xbb, 0x46, 0x01, 0x0f, 0x06,
	0x93, 0xbb, 0x6c, 0x15, 0x7e, 0x39, 0x5a, 0xd7, 0x26, 0x27, 0xc2, 0x0e, 0x98, 0xeb, 0x6e, 0xc0,
	0x5c, 0xec, 0xbc, 0xe1, 0xec, 0xdc, 0x0a, 0x9c, 0x98, 0x1b, 0x38, 0x79, 0x6c, 0xe5, 0xf8, 0x65,
	0xf7, 0x0c, 0x2d, 0x65, 0x83, 0x63, 0xdb, 0xfb, 0x25, 0x5b, 0x69, 0xa7, 0x29, 0x18, 0x47, 0x70,
	0xe8, 0x8f, 0x2d, 0x87, 0x5e, 0x56, 0x3e, 0x47, 0xc6, 0x60, 0xc0, 0x5a, 0x4b, 0xf5, 0x47, 0x31,
	0xc2, 0x01, 0x5b, 0xa5, 0xdb, 0x4b, 0x01, 0xc2, 0x93, 0xdb, 0xe4, 0x01, 0x13, 0x27, 0xd6, 0xe0,
	0x3f, 0x2b, 0xcc, 0x5f, 0xca, 0xd0, 0x0f, 0x53, 0xef, 0x98, 0xad, 0xeb, 0xa6, 0x16, 0xf9, 0xe5,
	0x5d, 0x22, 0xfb, 0x61, 0xfa, 0x4c, 0xff, 0x1e, 0xc5, 0x4a, 0xde, 0x70, 0x33, 0x18, 0x82, 0x26,
	0x68, 0x42, 0x04, 0xa5, 0x0f, 0x34, 0xa7, 0x5b, 0xbf, 0x63, 0x9b, 0xf6, 0x20, 0xb8, 0x65, 0x57,
	0xe2, 0x46, 0x67, 0x54, 0xd0, 0xf4, 0xbe, 0x65, 0xab, 0xd7, 0xe1, 0x74, 0x4e, 0x43, 0x37, 0x0e,
	0x3e, 0xbd, 0x6b, 0x0d, 0xa8, 0x08, 0x4e, 0xfc, 0x2f, 0xaa, 0xbf, 0xa9, 0x04, 0xff, 0x5c, 0xa7,
	0x60, 0x6a, 0x20, 0x93, 0xb7, 0x62, 0x38, 0x9f, 0xcd, 0x42, 0x79, 0x83, 0xd6, 0x2f, 0x89, 0x55,
	0x18, 0xc5, 0x42, 0xd2, 0xe6, 0x30, 0x08, 0xb5, 0x31, 0x7c, 0xc3, 0xd1, 0xd8, 0x61, 0xab, 0xea,
	0x37, 0xec, 0xc2, 0xf0, 0x86, 0x07, 0xd1, 0x78, 0x20, 0x93, 0x11, 0x30, 0xd1, 0x8d, 0xb7, 0x10,
	0x98, 0xed, 0x4c, 0xbc, 0x03, 0x4a, 0x64, 0x99, 0x30, 0xe1, 0x8f, 0x83, 0x81, 0x5d, 0x39, 0x13,
	0xef, 0x86, 0xf3, 0x2c, 0x8d, 0x46, 0x80, 0x9a, 0xd8, 0xc7, 0x01, 0x31, 0xe6, 0x32, 0x33, 0x0f,
	0x55, 0x92, 0x66, 0xfa, 0x0e, 0x97, 0x50, 0xef, 0x0b, 0xb6, 0xf5, 0xfa, 0x74, 0xa8, 0x12, 0x19,
	0x5e, 0x88, 0xd7, 0xa1, 0x1a, 0x5d, 0xd2, 0xb5, 0x3e, 0xac, 0xfa, 0x15, 0x5e, 0xea, 0x81, 0x9b,
	0x3c, 0x88, 0xc6, 0x43, 0xa1, 0xf4, 0x15, 0xd7, 0x14, 0xac, 0x5a, 0xdb, 0xdc, 0xf3, 0xf0, 0xed,
	0x54, 0xe8, 0x7b, 0xee, 0x60, 0xb0, 0x9e, 0x5e, 0x9c, 0xa8, 0x68, 0x72, 0x83, 0xb2, 0x44, 0xa6,
	0xd3, 0xb4, 0x12, 0x8a, 0xb6, 0x5d, 0x26, 0xa3, 0xc3, 0x69, 0x32, 0xba, 0xe2, 0x49, 0xa2, 0xe3,
	0x85, 0x26, 0x2f, 0xa1, 0x0e, 0x5f, 0x3f, 0x94, 0x57, 0x99, 0x4e, 0xde, 0x4a, 0x28, 0xc4, 0x4f,
	0x39, 0x82, 0xb7, 0xa6, 0x13, 0x2b, 0x9d, 0xc8, 0x2d, 0x76, 0x78, 0xcf, 0x98, 0x97, 0x83, 0xdd,
	0x48, 0xf6, 0x93, 0x18, 0xd8, 0x29, 0xab, 0x5b, 0xd2, 0x03, 0x67, 0x71, 0x1c, 0x4d, 0x45, 0x3f,
	0x89, 0x8f, 0xae, 0xf3, 0x90, 0xa2, 0xc9, 0x5d, 0xd0, 0xe2, 0x3a, 0x91, 0xc9, 0x3c, 0x35, 0x59,
	0x9e, 0x0b, 0xa2, 0xf7, 0x23, 0xe0, 0x38, 0xa4, 0x9d, 0xdf, 0xa3, 0x1d, 0xb9, 0x28, 0xec, 0x28,
	0x47, 0xfa, 0xb1, 0x22, 0x56, 0x8f, 0x76, 0xb4, 0xd0, 0xe1, 0x70, 0xc3, 0xba, 0x51, 0x55, 0xf7,
	0x4b, 0xdc, 0xa6, 0xc3, 0x5d, 0x03, 0xda, 0x87, 0xdd, 0xf2, 0x1a, 0xd0, 0xb7, 0xd9, 0x7c, 0x83,
	0x50, 0x5d, 0x66, 0x3a, 0x4d, 0x2c, 0xa1, 0xd6, 0xce, 0x71, 0x92, 0x4c, 0x67, 0x8e, 0x2e, 0x08,
	0xf7, 0x47, 0x03, 0xbd, 0xf8, 0xf5, 0x98, 0x42, 0x90, 0x26, 0x77, 0x30, 0x6b, 0xc6, 0x5e, 0x4c,
	0x33, 0xfa, 0xce, 0x8c, 0x1a, 0xb5, 0x66, 0xec, 0xc5, 0x38, 0xe3, 0x23, 0x67, 0x46, 0x02, 0x41,
	0x2b, 0xfd, 0xf0, 0xfd, 0xd1, 0x75, 0x38, 0xed, 0x5c, 0x86, 0xf1, 0xcb, 0xb9, 0x98, 0x0b, 0x93,
	0x7f, 0x2e, 0x76, 0x80, 0xcc, 0x7e, 0xf8, 0xfe, 0x24, 0x91, 0xc6, 0xf9, 0x52, 0x26, 0xea, 0x82,
	0xc1, 0x7f, 0x57, 0x2c, 0xf3, 0xa1, 0x9f, 0x2b, 0x98, 0xa8, 0x41, 0x44, 0x45, 0x9f, 0x55, 0x0e,
	0x4d, 0x74, 0x29, 0x69, 0x44, 0xf5, 0x98, 0x55, 0x8e, 0x6d, 0xc0, 0xce, 0xc2, 0x19, 0x95, 0x61,
	0x1a, 0x1c, 0xdb, 0x80, 0xf1, 0x79, 0x34, 0xd6, 0x26, 0x00, 0xdb, 0x80, 0x1d, 0x01, 0x46, 0x2f,
	0x1e, 0xdb, 0x58, 0x71, 0x19, 0x85, 0x31, 0x04, 0xb1, 0xe6, 0x8d, 0x17, 0x00, 0xf6, 0xaa, 0x50,
	0x2a, 0xa0, 0x74, 0x3a, 0x50, 0x00, 0x68, 0x6c, 0x45, 0x9a, 0x48, 0x25, 0xc6, 0xfa, 0x49, 0xe7,
	0x34, 0x06, 0x85, 0xc6, 0x54, 0xe0, 0x8b, 0x6e, 0xf0, 0x02, 0x08, 0xce, 0xc8, 0x3b, 0xdb, 0x7b,
	0x25, 0xc7, 0xf2, 0x35, 0x6b, 0x14, 0xe6, 0x8b, 0x3c, 0xc1, 0x43, 0xcb, 0x0a, 0xdb, 0x03, 0x78,
	0xc1, 0x19, 0xc4, 0x94, 0x82, 0x62, 0x77, 0x3e, 0x0b, 0xba, 0x7a, 0x53, 0x31, 0xab, 0xf6, 0xc6,
	0x46, 0x9b, 0xd5, 0x42, 0x9b, 0x2d, 0x56, 0xef, 0x5c, 0x46, 0xd3, 0xb1, 0x14, 0xb1, 0x5f, 0xdb,
	0xab, 0xed, 0xaf, 0xf2, 0x9c, 0xa6, 0xda, 0x82, 0x54, 0x19, 0x98, 0xda, 0x15, 0xaa, 0x7e, 0x19,
	0x3a, 0x38, 0x67, 0x0f, 0x17, 0xe7, 0xa3, 0x1d, 0xfc, 0x29, 0x63, 0x39, 0x62, 0xb6, 0xf0, 0xa8,
	0xbc, 0x85, 0x9c, 0x83, 0x5b, 0xcc, 0xc1, 0xdf, 0x56, 0x28, 0xe1, 0xd4, 0x97, 0x2d, 0x52, 0x89,
	0x84, 0x26, 0x9e, 0x79, 0xa8, 0x2e, 0xf5, 0x4e, 0xb0, 0x0d, 0x58, 0x3f, 0xcc, 0xae, 0x74, 0x76,
	0x89, 0x6d, 0x08, 0x2d, 0x7a, 0x59, 0x37, 0x92, 0x78, 0x11, 0xea, 0x9c, 0x08, 0x08, 0x14, 0x20,
	0x92, 0x10, 0x23, 0xaa, 0xfe, 0xd5, 0xb9, 0x21, 0x81, 0x1f, 0xe4, 0x43, 0xe6, 0x58, 0xdb, 0x6f,
	0x70, 0x22, 0x82, 0x53, 0x72, 0xd3, 0xa5, 0x45, 0xd0, 0xe6, 0x9e, 0x9b, 0x11, 0xb4, 0xaf, 0x96,
	0xb5, 0xaf, 0x12, 0xbf, 0x91, 0xf6, 0x3f, 0xa6, 0x3a, 0x10, 0x47, 0x93, 0x89, 0x90, 0x5c, 0xfc,
	0x7e, 0x2e, 0x32, 0xe5, 0x7d, 0xc6, 0x6a, 0x9d, 0x19, 0x9d, 0xcd, 0xd6, 0xc1, 0x3d, 0x2d, 0x46,
	0xf3, 0x74, 0x66, 0x63, 0x0e, 0xbd, 0x56, 0x6d, 0xb3, 0x81, 0xa1, 0xda, 0x53, 0xc6, 0x4c, 0xc6,
	0xaa, 0x03, 0xbe, 0x06, 0xb7, 0x10, 0xe8, 0x87, 0x49, 0xcf, 0xe6, 0xb3, 0xb7, 0x42, 0xea, 0x9b,
	0x6f, 0x21, 0xc6, 0x50, 0x0c, 0xa3, 0xbf, 0x11, 0xbd, 0xb8, 0x7f, 0xa8, 0xdf, 0x81, 0x83, 0x81,
	0x93, 0xa2, 0xaa, 0x2b, 0x3e, 0x86, 0x06, 0xd7, 0x14, 0x84, 0xee, 0xdd, 0xb9, 0xc4, 0x6a, 0x57,
	0x2f, 0x1e, 0x8a, 0x51, 0x12, 0x8f, 0x75, 0x04, 0xb7, 0x80, 0x07, 0x9f, 0xd3, 0x31, 0xe6, 0x5b,
	0xce, 0xd2, 0x24, 0xce, 0xec, 0xc8, 0x13, 0xb7, 0x13, 0x7c, 0xcf, 0xee, 0x59, 0x6c, 0x7a, 0x9e,
	0x12, 0xd3, 0x5d, 0x35, 0xd8, 0xe0, 0xef, 0xaa, 0xba, 0x7e, 0x4b, 0x12, 0x16, 0xc6, 0xfa, 0x6c,
	0xbd, 0x7d, 0x21, 0x62, 0x95, 0x2b, 0xd1, 0x90, 0x1f, 0xd4, 0xe4, 0x97, 0x6c, 0x6d, 0xa8, 0x42,
	0x35, 0xa7, 0x10, 0x62, 0xeb, 0x60, 0xd7, 0x3d, 0x21, 0xea, 0xe3, 0x9a, 0x07, 0xee, 0x62, 0x5b,
	0x5e, 0x50, 0x01, 0xa2, 0xc1, 0xb1, 0x5d, 0x3a, 0x8b, 0xb5, 0x85, 0xb3, 0xf0, 0xd8, 0x0a, 0xe8,
	0x1c, 0x75, 0x58, 0xe3, 0xd8, 0x76, 0xad, 0x4d, 0x1d, 0x3b, 0x5c, 0x6b, 0x03, 0x31, 0x07, 0x76,
	0x36, 0xb0, 0x33, 0xa7, 0xf3, 0x3a, 0x16, 0x2d, 0x2f, 0xaf, 0x63, 0x65, 0x44, 0x2f, 0xad, 0x63,
	0xe9, 0xc3, 0xc9, 0x79, 0x4a, 0xa7, 0xd6, 0x4d, 0xde, 0xc5, 0x56, 0x81, 0xbd, 0x38, 0xb5, 0xcf,
	0xd9, 0xb6, 0xc5, 0x36, 0x18, 0x85, 0x29, 0xbe, 0xcf, 0x91, 0x0e, 0xee, 0x36, 0x39, 0xb6, 0x83,
	0x97, 0x24, 0x2d, 0x7f, 0xdd, 0xa7, 0xc9, 0x05, 0x17, 0xbf, 0x5f, 0x30, 0x49, 0x79, 0xb9, 0x9e,
	0x8c, 0x52, 0xb9, 0x5c, 0x5f, 0xb3, 0xcb, 0xf5, 0x7f, 0xb2, 0x4c, 0x64, 0x86, 0xcc, 0xc9, 0xc5,
	0x5f, 0xbe, 0xd5, 0xd3, 0x13, 0x11, 0xfc, 0xa3, 0xbe, 0x1b, 0xc6, 0x93, 0x18, 0x1f, 0x51, 0xb1,
	0x7c, 0x84, 0x65, 0x0f, 0x9b, 0x85, 0x77, 0x01, 0xa8, 0xa6, 0x13, 0x16, 0x83, 0x9d, 0x14, 0x9e,
	0x04, 0xda, 0x88, 0x0d, 0x0b, 0x4f, 0x02, 0x6d, 0xf4, 0x38, 0xaf, 0xa2, 0xb1, 0x49, 0x76, 0xa0,
	0x8d, 0x1e, 0x07, 0xb0, 0x75, 0xed, 0x71, 0x34, 0xd6, 0x99, 0x8d, 0x33, 0xbf, 0x8e, 0x46, 0x07,
	0xdb, 0x38, 0x36, 0x49, 0xa8, 0x36, 0x5f, 0xe7, 0xd8, 0x06, 0xec, 0x55, 0x26, 0x24, 0x06, 0x7a,
	0x0d, 0x8e, 0x6d, 0x4c, 0xc0, 0xe8, 0x5e, 0x52, 0x72, 0x63, 0x6e, 0xa0, 0xcf, 0xd6, 0x51, 0x73,
	0x6d, 0x85, 0x71, 0x5c, 0x8d, 0x1b, 0xd2, 0x4a, 0x9f, 0x9a, 0x34, 0x82, 0xa8, 0xa0, 0x9b, 0x7b,
	0xdb, 0xc2, 0xf9, 0x3c, 0x5f, 0x74, 0x3e, 0x9e, 0x6b, 0xb9, 0xcb, 0x7e, 0xe7, 0x07, 0x32, 0x6e,
	0x3a, 0x39, 0xe8, 0x4e, 0x53, 0x4c, 0x31, 0x97, 0xe9, 0xfa, 0x96, 0x04, 0x36, 0xf8, 0xa7, 0x2a,
	0xb9, 0x12, 0x57, 0x04, 0xad, 0x07, 0x6c, 0x7c, 0x32, 0xce, 0xe5, 0x60, 0xe5, 0x17, 0x52, 0x4d,
	0x31, 0x69, 0x8f, 0x94, 0x91, 0x43, 0x14, 0xbc, 0x8e, 0x76, 0x9a, 0x4e, 0x6f, 0x8c, 0xf9, 0x5f,
	0xe5, 0x39, 0x0d, 0x63, 0x5e, 0x4f, 0xfb, 0xe1, 0x08, 0x5e, 0x33, 0xe8, 0x5c, 0x53, 0xde, 0xd7,
	0xac, 0xae, 0xe7, 0x23, 0x17, 0xe0, 0x3a, 0x2a, 0x77, 0x45, 0x3c, 0x67, 0x85, 0x61, 0xaf, 0xc3,
	0x09, 0x0d, 0x5b, 0xfb, 0xe0, 0x30, 0xc3, 0x0a, 0xbb, 0x91, 0xd1, 0x38, 0xf3, 0xd7, 0xf7, 0x6a,
	0x70, 0x17, 0xa0, 0x0d, 0xe7, 0xf6, 0x2e, 0x9c, 0x20, 0x5c, 0x47, 0xd8, 0x90, 0x26, 0x91, 0xc3,
	0xef, 0x2a, 0x14, 0x3e, 0xe4, 0x74, 0xf0, 0xaf, 0x15, 0x27, 0xb9, 0xd7, 0x53, 0x41, 0x02, 0x74,
	0xca, 0x58, 0x41, 0xdd, 0x9e, 0x49, 0x16, 0x3c, 0xcf, 0x8a, 0x26, 0x65, 0x92, 0xd6, 0xf8, 0xd6,
	0xef, 0xd8, 0x76, 0xa9, 0x7b, 0x49, 0xce, 0xf8, 0x95, 0x9b, 0x33, 0x3e, 0xbd, 0x75, 0xb6, 0x85,
	0x84, 0xf1, 0x2f, 0x96, 0x9d, 0x3c, 0x4d, 0xb3, 0xec, 0x06, 0x95, 0xbf, 0xf4, 0x41, 0x7c, 0x12,
	0x2a, 0x25, 0x24, 0x16, 0xc4, 0x6b, 0x18, 0x9f, 0x68, 0x3a, 0x98, 0xb0, 0x27, 0xb7, 0x88, 0xa6,
	0x9b, 0x75, 0xcc, 0xb6, 0x2c, 0x30, 0xca, 0xaf, 0xfb, 0xed, 0xab, 0x27, 0xed, 0x94, 0x46, 0x05,
	0x7f, 0xbc, 0xfc, 0x20, 0x46, 0xf8, 0xa9, 0x26, 0x1c, 0x19, 0x3d, 0xf5, 0xc3, 0x51, 0xf0, 0x57,
	0x4e, 0x41, 0xa1, 0x60, 0xa5, 0x05, 0x7d, 0xc7, 0x36, 0x0a, 0xe8, 0x8e, 0xb2, 0x42, 0xc1, 0xc4,
	0xed, 0x01, 0xc1, 0xbf, 0x57, 0xd8, 0x03, 0x3b, 0x4d, 0xd7, 0x4f, 0xf5, 0xb6, 0xd7, 0x68, 0x22,
	0xaa, 0xaa, 0x15, 0x51, 0x15, 0x2f, 0xb4, 0x66, 0x5b, 0x0a, 0x8c, 0x64, 0xa5, 0x08, 0x95, 0x18,
	0xb7, 0x95, 0x2e, 0xc4, 0x17, 0x00, 0x9c, 0xc2, 0xab, 0x74, 0x1c, 0x2a, 0xd1, 0x56, 0xba, 0x00,
	0x9f, 0xd3, 0x30, 0x12, 0x93, 0x33, 0x9c, 0x9e, 0xc2, 0x89, 0x02, 0x80, 0xbb, 0xdf, 0x99, 0x5c,
	0xe0, 0x05, 0x5f, 0x27, 0xef, 0xac, 0xc9, 0x80, 0xb3, 0xc7, 0xcb, 0xf7, 0x42, 0xba, 0xfa, 0xb5,
	0x5b, 0x7c, 0xf9, 0x78, 0x49, 0x95, 0xa2, 0x18, 0x62, 0x55, 0x5f, 0xee, 0x5b, 0x1c, 0x18, 0xa2,
	0x81, 0x76, 0x9e, 0xb0, 0x06, 0x17, 0xa3, 0xb9, 0xcc, 0xa2, 0x6b, 0x52, 0x51, 0x9d, 0x17, 0x80,
	0x15, 0x0d, 0x55, 0x9d, 0x68, 0xc8, 0xe8, 0xaf, 0x66, 0xe9, 0x6f, 0x97, 0xad, 0x72, 0x71, 0x21,
	0xde, 0xeb, 0x60, 0x99, 0x08, 0xd0, 0xcf, 0xa1, 0xb8, 0x0c, 0xaf, 0xa3, 0x44, 0xea, 0xf8, 0x20,
	0xa7, 0x3f, 0xa0, 0x1f, 0x4f, 0x97, 0xac, 0xd6, 0xc9, 0x4f, 0x40, 0xdb, 0xd6, 0x59, 0xdd, 0xd5,
	0xd9, 0xa9, 0x53, 0x5c, 0x32, 0xdb, 0xcb, 0xa3, 0x56, 0x5b, 0x61, 0xad, 0x45, 0x85, 0x19, 0x7e,
	0xa3, 0xad, 0x7f, 0xa8, 0xb2, 0x47, 0xd0, 0x9d, 0x87, 0x44, 0xb1, 0x12, 0x72, 0x24, 0x52, 0xfa,
	0x5e, 0x6c, 0xca, 0x7a, 0x26, 0x1e, 0x37, 0x98, 0xc8, 0xf5, 0x84, 0x6d, 0x7c, 0x04, 0xed, 0x8e,
	0x2e, 0x21, 0x42, 0x13, 0x74, 0xf4, 0xaa, 0x03, 0x18, 0xd5, 0x0f, 0x89, 0x00, 0xf4, 0xb0, 0x53,
	0x7c, 0x0f, 0x27, 0x02, 0x74, 0xdf, 0x8b, 0xf3, 0xf2, 0x61, 0x83, 0x6b, 0x0a, 0xf0, 0xa3, 0xf7,
	0x88, 0xd3, 0xb5, 0xd1, 0x14, 0x7e, 0x06, 0x41, 0x0e, 0xda, 0x2b, 0xe9, 0xc7, 0x86, 0x80, 0x83,
	0x78, 0x89, 0x83, 0xcc, 0xaa, 0x0d, 0x41, 0xaa, 0x7a, 0xa4, 0xff, 0xee, 0x40, 0x3c, 0xe4, 0x7c,
	0x5d, 0x30, 0xf8, 0x7b, 0x6d, 0x7f, 0x17, 0xb4, 0xb3, 0x10, 0x81, 0xe2, 0x1e, 0xa6, 0x51, 0x4c,
	0xd6, 0xb1, 0xce, 0x35, 0x05, 0xd1, 0xe1, 0xcb, 0x79, 0x28, 0xc3, 0x18, 0x72, 0x5f, 0x9d, 0xae,
	0x58, 0x88, 0xf7, 0x0d, 0x15, 0x49, 0xc9, 0x61, 0x6d, 0x1c, 0xec, 0x59, 0x27, 0xb6, 0xf4, 0x48,
	0xa8, 0x8c, 0x9a, 0x41, 0x44, 0xdc, 0x00, 0x26, 0xfc, 0xf6, 0x00, 0xb7, 0x05, 0x1b, 0x79, 0xbd,
	0xd7, 0x90, 0x77, 0xfe, 0xb3, 0xe1, 0x01, 0x5b, 0x83, 0xd3, 0xcb, 0x6b, 0xbf, 0x9a, 0x82, 0x53,
	0xc2, 0x2f, 0x80, 0xe6, 0x3f, 0x14, 0x48, 0xc0, 0x1d, 0x3e, 0x0d, 0x33, 0x45, 0x3d, 0x14, 0x0e,
	0x15, 0x40, 0xfe, 0x15, 0x7c, 0xcd, 0xfd, 0x0a, 0x3e, 0x4c, 0xc3, 0xd8, 0xc4, 0x44, 0xd0, 0xc6,
	0x4f, 0x5c, 0x69, 0x2a, 0x24, 0x45, 0x7d, 0x94, 0x4b, 0x5b, 0x08, 0xf4, 0x9f, 0x26, 0xef, 0x4c,
	0xbf, 0xfe, 0x07, 0x43, 0x81, 0x98, 0x6f, 0xe5, 0x2c, 0xff, 0x56, 0x1e, 0xbc, 0x60, 0x5b, 0xb9,
	0x22, 0xe8, 0x15, 0xec, 0xb3, 0x35, 0xfd, 0x8d, 0x86, 0x9e, 0xc1, 0x8e, 0xa5, 0x54, 0xec, 0xe0,
	0xba, 0x3f, 0xf8, 0x8c, 0x35, 0x51, 0xd3, 0xd3, 0x5e, 0x37, 0x0f, 0x44, 0x5e, 0xd3, 0x9f, 0x57,
	0xf0, 0x29, 0x42, 0xfb, 0x8b, 0x43, 0xc6, 0x8a, 0x7c, 0xcd, 0xdb, 0x61, 0x9b, 0x18, 0x71, 0x69,
	0x68, 0xe7, 0x67, 0xde, 0x36, 0xdb, 0x80, 0xf0, 0xdc, 0x00, 0x15, 0xef, 0x1e, 0x6b, 0x72, 0x31,
	0x4b, 0xae, 0x85, 0x81, 0xaa, 0x5f, 0x7c, 0xcd, 0x9a, 0x4e, 0x46, 0xe1, 0x31, 0xb6, 0x76, 0x1c,
	0x46, 0x53, 0x31, 0xde, 0xf9, 0x99, 0xb7, 0xc1, 0xd6, 0xf9, 0x3c, 0x8e, 0xa3, 0xf8, 0x62, 0xa7,
	0x02, 0x04, 0x48, 0x4b, 0xc5, 0x78, 0xa7, 0x7a, 0x70, 0xca, 0x3c, 0x73, 0x21, 0x3b, 0x61, 0x3a,
	0xa4, 0xbf, 0xe5, 0x78, 0xdf, 0xb0, 0x9d, 0x5e, 0x76, 0xc2, 0x07, 0x9d, 0x4e, 0x32, 0x4b, 0x25,
	0xc4, 0x67, 0x63, 0x6f, 0x4b, 0xef, 0x91, 0x0f, 0x3a, 0xbf, 0x4d, 0xa2, 0x71, 0xcb, 0x0e, 0xe7,
	0x0e, 0x93, 0x64, 0x2a, 0xc2, 0xf8, 0xe0, 0xdf, 0xb6, 0xd8, 0xb6, 0x11, 0x67, 0x64, 0xfd, 0x11,
	0x5b, 0xc1, 0xff, 0xed, 0x6c, 0x5b, 0xfc, 0x00, 0xb4, 0x4a, 0x02, 0xbd, 0xef, 0xd8, 0xd6, 0x89,
	0x50, 0xba, 0x54, 0x79, 0x1a, 0x65, 0xca, 0xbb, 0xe7, 0xe6, 0xc4, 0x4a, 0xc8, 0xd6, 0xc3, 0xc5,
	0xef, 0xe7, 0xa8, 0xd7, 0xe7, 0x15, 0xef, 0x57, 0x6c, 0xb3, 0x33, 0x15, 0xa1, 0xf9, 0xe8, 0xb4,
	0x6c, 0x74, 0x79, 0xca, 0x5f, 0xb2, 0x3a, 0x4c, 0xa9, 0x42, 0x95, 0x2d, 0x63, 0xb7, 0x8f, 0x95,
	0x98, 0xbe, 0x65, 0xcd, 0x13, 0xa1, 0xd0, 0xb0, 0x12, 0xb0, 0x6b, 0x3f, 0x27, 0x73, 0xc8, 0x4b,
	0x06, 0x7e, 0xc7, 0xee, 0x15, 0x9b, 0x33, 0x5f, 0xbf, 0xcb, 0x2a, 0x7d, 0xb4, 0xb8, 0x39, 0xc3,
	0xfa, 0x03, 0xf3, 0x4e, 0x84, 0x2a, 0x7f, 0x3e, 0x2f, 0x0b, 0x70, 0xcc, 0x71, 0x89, 0xf7, 0x27,
	0xf6, 0x11, 0x48, 0x28, 0xd7, 0xde, 0x97, 0x6e, 0xfc, 0x93, 0x0f, 0x7c, 0x31, 0xf0, 0xbe, 0x65,
	0x9b, 0x4e, 0x6d, 0xbe, 0xbc, 0x90, 0x85, 0x42, 0x93, 0x61, 0xfc, 0x9e, 0x6d, 0xdb, 0x85, 0x27,
	0x90, 0x55, 0x1e, 0xfb, 0xe4, 0x96, 0x22, 0x15, 0xbd, 0x9f, 0x0e, 0x56, 0x91, 0xad, 0xb2, 0xcf,
	0x32, 0x11, 0x4f, 0x6f, 0x2d, 0x12, 0x19, 0x21, 0xf6, 0x83, 0x7b, 0xb4, 0x24, 0x97, 0xa5, 0xda,
	0x8a, 0xa3, 0xd0, 0x72, 0x0d, 0xe2, 0x07, 0xb6, 0x01, 0x47, 0xaa, 0x73, 0x5e, 0xcf, 0x5f, 0x64,
	0x5d, 0x76, 0x67, 0xed, 0xb4, 0xfa, 0x98, 0x6e, 0xbc, 0x95, 0xfe, 0x2e, 0x99, 0xcf, 0x64, 0xcf,
	0xad, 0x07, 0x8b, 0x7d, 0x30, 0xe6, 0x79, 0xc5, 0x3b, 0x65, 0x3b, 0x27, 0x42, 0xd9, 0xc9, 0x6c,
	0xe6, 0x48, 0x2a, 0x65, 0xce, 0xad, 0xdb, 0xfb, 0xb2, 0xe7, 0x15, 0xef, 0x39, 0xdb, 0xe2, 0xf3,
	0xb8, 0x9b, 0x8c, 0xae, 0x84, 0x3c, 0x14, 0xf1, 0xe8, 0x72, 0x41, 0xbd, 0xe5, 0x67, 0xf4, 0x15,
	0xf3, 0xf8, 0x3c, 0xfe, 0x69, 0xfe, 0x56, 0xc8, 0x58, 0x28, 0x91, 0xfd, 0x61, 0xa3, 0x7e, 0xc4,
	0x2b, 0x5d, 0x2e, 0xd0, 0x7d, 0xe0, 0x36, 0x2e, 0x2d, 0xa5, 0xfd, 0x86, 0xb1, 0x13, 0xa1, 0x4c,
	0x7a, 0xfe, 0x01, 0xab, 0xe1, 0xdc, 0xa6, 0xef, 0xf1, 0x59, 0x6a, 0xe8, 0xc7, 0x28, 0x53, 0x89,
	0xbc, 0xf9, 0x7f, 0x09, 0x38, 0xa2, 0x77, 0xe9, 0x44, 0xd4, 0x4b, 0x97, 0x70, 0x57, 0x00, 0x9e,
	0x7a, 0x9c, 0xf9, 0x0b, 0x62, 0x74, 0x62, 0xb0, 0x4c, 0xd8, 0x67, 0x77, 0xe7, 0x16, 0xb4, 0xb4,
	0xbe, 0xfd, 0xe0, 0xad, 0x00, 0x7f, 0x99, 0xc0, 0x4f, 0xef, 0x4a, 0x0f, 0x48, 0xdc, 0x6f, 0xd9,
	0xc7, 0x85, 0xb8, 0xfc, 0xdf, 0x2e, 0x56, 0x72, 0xb0, 0x44, 0x6c, 0x70, 0x67, 0x3c, 0x4d, 0x72,
	0x07, 0xac, 0xb5, 0x28, 0x37, 0x8f, 0xa9, 0xff, 0x30, 0xe3, 0xe4, 0xc6, 0xa8, 0x3f, 0xe2, 0xc6,
	0xf3, 0x8b, 0x5d, 0x84, 0x54, 0x1f, 0x38, 0x96, 0xc5, 0x18, 0xec, 0x05, 0xdb, 0x3c, 0x11, 0x0a,
	0x5d, 0xf9, 0x6d, 0x0e, 0xe9, 0xa3, 0xb2, 0xeb, 0x37, 0xee, 0xe8, 0xcf, 0xd0, 0x44, 0x4e, 0xa2,
	0x69, 0x14, 0x5f, 0x80, 0x95, 0x79, 0xec, 0x5e, 0x21, 0xea, 0x30, 0x76, 0xa6, 0xf4, 0x36, 0x0e,
	0x5e, 0xb2, 0xfb, 0xb9, 0x1f, 0x1d, 0x85, 0xb1, 0xf1, 0xa5, 0x2f, 0xd8, 0x26, 0x90, 0xfa, 0xd9,
	0x64, 0xb9, 0xe5, 0x02, 0x50, 0x3b, 0x78, 0x23, 0x71, 0xdb, 0xea, 0x02, 0x57, 0xf0, 0x76, 0x0d,
	0xff, 0x4a, 0xfb, 0xeb, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xde, 0x4b, 0xa4, 0xfe, 0x85, 0x2b,
	0x00, 0x00,
}
