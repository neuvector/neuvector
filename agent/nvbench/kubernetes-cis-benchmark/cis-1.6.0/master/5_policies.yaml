version: "cis-1.6"
id: 5
title: "5 - Policies"
type: "master"
groups:
  - id: 5.1
    title: "5.1 - RBAC and Service Accounts"
    checks:
      - id: 5.1.1
        description: Ensure that the cluster-admin role is only used where required (Manual)
        type: master
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              manual "$check"
              manual "      *  kubectl get clusterrolebindings -o=custom-columns=NAME:.metadata.name,ROLE:.roleRef.name,SUBJECT:.subjects[*].name . Review each principal listed and ensure that cluster-admin privilege is required for it."
        remediation: 'Identify all clusterrolebindings to the cluster-admin role. Check if they are used and if they need this role or if they could use a role with fewer privileges. Where possible, first bind users to a lower privileged role and then remove the clusterrolebinding to the cluster-admin role : kubectl delete clusterrolebinding [name]'
      - id: 5.1.2
        description: Minimize access to secrets (Manual)
        type: master
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              manual "$check"
              manual "      * Review the users who have get, list or watch access to secrets objects in the Kubernetes API."
        remediation: Where possible, remove get, list and watch access to secret objects in the cluster.
      - id: 5.1.3
        description: Create administrative boundaries between resources using namespaces (Manual)
        type: master
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              manual "$check"
              manual "      * Retrieve the roles defined across each namespaces in the cluster and review for wildcards. kubectl get roles --all-namespaces -o yaml Retrieve the cluster roles defined in the cluster and review for wildcards. kubectl get clusterroles -o yaml"
        remediation: Where possible replace any use of wildcards in clusterroles and roles with specific objects or actions.
      - id: 5.1.4
        description: Create network segmentation using Network Policies (Manual)
        type: master
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              manual "$check"
              manual "      * Review the users who have create access to pod objects in the Kubernetes API."
        remediation: Where possible, remove create access to pod objects in the cluster.
      - id: 5.1.5
        description: Avoid using Kubernetes Secrets (Manual)
        type: master
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              manual "$check"
              manual '     * For each namespace in the cluster, review the rights assigned to the default service account and ensure that it has no roles or cluster roles bound to it apart from the defaults. Additionally ensure that the automountServiceAccountToken: false setting is in place for each default service account.'
        remediation: 'Create explicit service accounts wherever a Kubernetes workload requires specific access to the Kubernetes API server. Modify the configuration of each default service account to include this value automountServiceAccountToken: false'
      - id: 5.1.6
        description: Ensure that the seccomp profile is set to docker/default in your pod definitions (Manual)
        type: master
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              manual "$check"
              manual "      * Review pod and service account objects in the cluster and ensure that the option below is set, unless the resource explicitly requires this access. automountServiceAccountToken: false"
        remediation: Modify the definition of pods and service accounts which do not need to mount service account tokens to disable it.
  - id: 5.2
    title: "5.2 - Pod Security Policies"
    checks:
      - id: 5.2.1
        description: Minimize the admission of privileged containers (Manual)
        type: master
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              manual "$check"
              manual "      * For each PSP, check whether privileged is enabled: kubectl get psp <name> -o=jsonpath={.spec.privileged} Verify that there is at least one PSP which does not return true."
        remediation: Create a PSP as described in the Kubernetes documentation, ensuring that the .spec.privileged field is omitted or set to false.
      - id: 5.2.2
        description: Minimize the admission of containers wishing to share the host process ID namespace (Manual)
        type: master
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              manual "$check"
              manual "      * For each PSP, check whether privileged is enabled: kubectl get psp <name> -o=jsonpath={.spec.hostPID} Verify that there is at least one PSP which does not return true."
        remediation: Create a PSP as described in the Kubernetes documentation, ensuring that the .spec.hostPID field is omitted or set to false.
      - id: 5.2.3
        description: Minimize the admission of containers wishing to share the host IPC namespace (Manual)
        type: master
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              manual "$check"
              manual "      * For each PSP, check whether privileged is enabled: kubectl get psp <name> -o=jsonpath={.spec.hostIPC} Verify that there is at least one PSP which does not return true."
        remediation: Create a PSP as described in the Kubernetes documentation, ensuring that the .spec.hostIPC field is omitted or set to false.
      - id: 5.2.4
        description: Minimize the admission of containers wishing to share the host network namespace (Manual)
        type: master
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              manual "$check"
              manual "      * For each PSP, check whether privileged is enabled: kubectl get psp <name> -o=jsonpath={.spec.hostNetwork} Verify that there is at least one PSP which does not return true."
        remediation: Create a PSP as described in the Kubernetes documentation, ensuring that the .spec.hostNetwork field is omitted or set to false.
      - id: 5.2.5
        description: Minimize the admission of containers with allowPrivilegeEscalation (Manual)
        type: master
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              manual "$check"
              manual "      * For each PSP, check whether privileged is enabled: kubectl get psp <name> -o=jsonpath={.spec.allowPrivilegeEscalation} Verify that there is at least one PSP which does not return true."
        remediation: Create a PSP as described in the Kubernetes documentation, ensuring that the .spec.allowPrivilegeEscalation field is omitted or set to false.
      - id: 5.2.6
        description: Minimize the admission of root containers (Manual)
        type: master
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              manual "$check"
              manual "      * For each PSP, check whether privileged is enabled: kubectl get psp <name> -o=jsonpath={.spec.runAsUser.rule} Verify that there is at least one PSP which does not return true."
        remediation: Create a PSP as described in the Kubernetes documentation, ensuring that the .spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of UIDs not including 0.
      - id: 5.2.7
        description: Minimize the admission of containers with the NET_RAW capability (Manual)
        type: master
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              manual "$check"
              manual "      * For each PSP, check whether privileged is enabled: kubectl get psp <name> -o=jsonpath={.spec.requiredDropCapabilities} Verify that there is at least one PSP which does not return true."
        remediation: Create a PSP as described in the Kubernetes documentation, ensuring that the .spec.requiredDropCapabilities is set to include either NET_RAW or ALL.
      - id: 5.2.8
        description: Minimize the admission of containers with added capabilities (Manual)
        type: master
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              manual "$check"
              manual "      * Verify that there are no PSPs present which have allowedCapabilities set to anything other than an empty array."
        remediation: Ensure that allowedCapabilities is not present in PSPs for the cluster unless it is set to an empty array.
      - id: 5.2.9
        description: Minimize the admission of containers with capabilities assigned (Manual)
        type: master
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              manual "$check"
              manual "      * For each PSP, check whether privileged is enabled: kubectl get psp <name> -o=jsonpath={.spec.requiredDropCapabilities} Verify that there is at least one PSP which does not return true."
        remediation: Review the use of capabilites in applications runnning on your cluster. Where a namespace contains applicaions which do not require any Linux capabities to operate consider adding a PSP which forbids the admission of containers which do not drop all capabilities.
  - id: 5.3
    title: "5.3 - Network Policies and CNI"
    checks:
      - id: 5.3.1
        description: Ensure that the CNI in use supports Network Policies (Manual)
        type: master
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              manual "$check"
              manual "      * Review the documentation of CNI plugin in use by the cluster, and confirm that it supports Ingress and Egress network policies."
        remediation: If the CNI plugin in use does not support network policies, consideration should be given to making use of a different plugin, or finding an alternate mechanism for restricting traffic in the Kubernetes cluster.
      - id: 5.3.2
        description: Ensure that all Namespaces have Network Policies defined (Manual)
        type: master
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              manual "$check"
              manual "      * Run kubectl get networkpolicy --all-namespaces, Ensure that each namespace defined in the cluster has at least one Network Policy."
        remediation: Follow the documentation and create NetworkPolicy objects as you need them.
  - id: 5.4
    title: "5.4 - Secrets Management"
    checks:
      - id: 5.4.1
        description: Prefer using secrets as files over secrets as environment variables (Manual)
        type: master
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              manual "$check"
              manual "      * Run the following command to find references to objects which use environment variables defined from secrets.  kubectl get all -o jsonpath={range .items[?(@..secretKeyRef)]} {.kind} {.metadata.name} {\n}{end} -A"
        remediation: If possible, rewrite application code to read secrets from mounted secret files, rather than from environment variables.
      - id: 5.4.2
        description: Consider external secret storage (Manual)
        type: master
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              manual "$check"
              manual "      * Review your secrets management implementation."
        remediation: Refer to the secrets management options offered by your cloud provider or a third-party secrets management solution.
  - id: 5.5
    title: "5.5 - Extensible Admission Control"
    checks:
      - id: 5.5.1
        description: Configure Image Provenance using ImagePolicyWebhook admission controller (Manual)
        type: master
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              manual "$check"
              manual "      * Review the pod definitions in your cluster and verify that image provenance is configured as appropriate."
        remediation: Follow the Kubernetes documentation and setup image provenance.
  - id: 5.7
    title: "5.7 - General Policies"
    checks:
      - id: 5.7.1
        description: Create administrative boundaries between resources using namespaces (Manual)
        type: master
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              manual "$check"
              manual "      * Run kubectl get namespaces, Ensure that these namespaces are the ones you need and are adequately administered as per your requirements."
        remediation: Follow the documentation and create namespaces for objects in your deployment as you need them.
      - id: 5.7.2
        description: Ensure that the seccomp profile is set to docker/default in your pod definitions (Manual)
        type: master
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              manual "$check"
              
              manual "      * Review and update pod definitions to include the docker/default seccomp profile for enhanced security. ensure has one line seccomp.security.alpha.kubernetes.io/pod: docker/default"
        remediation: |
                    Seccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing --feature-gates=AllAlpha=true argument.
                    Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to --feature-gates=AllAlpha=true
                    KUBE_API_ARGS=--feature-gates=AllAlpha=true
                    Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
                    Use annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below:
                      apiVersion: v1
                      kind: Pod
                      metadata:
                      name: trustworthy-pod annotations:
                      seccomp.security.alpha.kubernetes.io/pod: docker/default spec:
                      containers:
                      - name: trustworthy-container
                      image: sotrustworthy:latest
      - id: 5.7.3
        description: Apply Security Context to Your Pods and Containers (Manual)
        type: master
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              manual "$check"
              manual "      * Review the pod definitions in your cluster and verify that you have security contexts defined as appropriate."
        remediation: Follow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.
      - id: 5.7.4
        description: The default namespace should not be used (Manual)
        type: master
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              manual "$check"
              manual "      * Run kubectl get all, The only entries there should be system managed resources such as the kubernetes service"
        remediation: Ensure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace.
