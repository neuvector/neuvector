version: "cis-1.6"
id: 4
title: "4 - Worker Nodes"
type: "node"
groups:
  - id: 4.1
    title: "4.1 - Worker Node Configuration Files"
    checks:
      - id: 4.1.1
        description: Ensure that the kubelet service file permissions are set to 644 or more restrictive (Automated)
        type: worker
        category: kubernetes
        scored: true
        profile: Level 1
        automated: true
        tags:
        - HIPAA
        - NIST
        - PCI
        - GDPR
        audit: |
              check="$id  - $description"
              file="/etc/systemd/system/kubelet.service.d/10-kubeadm.conf"
              file=$(append_prefix "$CONFIG_PREFIX" "$file")

              if [ -f "$file" ]; then
                if [ "$(stat -c %a $file)" -eq 644 -o "$(stat -c %a $file)" -eq 600 -o "$(stat -c %a $file)" -eq 400 ]; then
                  pass "$check"
                else
                  warn "$check"
                  warn "      * Wrong permissions for $file"
                fi
              else
                info "$check"
                info "      * The kubelet service file not found"
              fi
        remediation: Run the below command (based on the file location on your system) on the each worker node. For example, chmod 644 /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      - id: 4.1.2
        description: Ensure that the kubelet service file ownership is set to root:root (Automated)
        type: worker
        category: kubernetes
        scored: true
        profile: Level 1
        automated: true
        tags:
        - HIPAA
        - NIST
        - PCI
        - GDPR
        audit: |
              check="$id  - $description"
              file="/etc/systemd/system/kubelet.service.d/10-kubeadm.conf"
              file=$(append_prefix "$CONFIG_PREFIX" "$file")
              if [ -f "$file" ]; then
                if [ "$(stat -c %u%g $file)" -eq 00 ]; then
                  pass "$check"
                else
                  warn "$check"
                  warn "      * Wrong ownership for $file"
                fi
              else
                info "$check"
              fi
        remediation: Run the below command (based on the file location on your system) on the each worker node. For example, chown root:root /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      - id: 4.1.3
        description: Ensure that the proxy kubeconfig file permissions are set to 644 or more restrictive (Manual)
        type: worker
        category: kubernetes
        scored: true
        profile: Level 1
        automated: false
        tags:
        - HIPAA
        - NIST
        - PCI
        - GDPR
        audit: |
              check="$id  - $description"
              file=""
              if check_argument "$CIS_PROXY_CMD" '--kubeconfig' >/dev/null 2>&1; then
                  file=$(get_argument_value "$CIS_PROXY_CMD" '--kubeconfig'|cut -d " " -f 1)
              fi
              file=$(append_prefix "$CONFIG_PREFIX" "$file")
              if [ -f "$file" ]; then
                if [ "$(stat -c %a $file)" -eq 644 -o "$(stat -c %a $file)" -eq 600 -o "$(stat -c %a $file)" -eq 400 ]; then
                  pass "$check"
                else
                  warn "$check"
                  warn "      * Wrong permissions for $file"
                fi
              else
                info "$check"
                info "      * kubeconfig file not found"
              fi        
        remediation: Run the below command (based on the file location on your system) on the each worker node. For example, chmod 600 <proxy kubeconfig file
      - id: 4.1.4
        description: Ensure that the proxy kubeconfig file ownership is set to root:root (Manual)
        type: worker
        category: kubernetes
        scored: true
        profile: Level 1
        automated: false
        tags:
        - HIPAA
        - NIST
        - PCI
        - GDPR
        audit: |
              check="$id  - $description"
              file=""
              if check_argument "$CIS_PROXY_CMD" '--kubeconfig' >/dev/null 2>&1; then
                  file=$(get_argument_value "$CIS_PROXY_CMD" '--kubeconfig'|cut -d " " -f 1)
              fi
              file=$(append_prefix "$CONFIG_PREFIX" "$file")              
              if [ -f "$file" ]; then
                if [ "$(stat -c %u%g $file)" -eq 00 ]; then
                  pass "$check"
                else
                  warn "$check"
                  warn "      * Wrong ownership for $file"
                fi
              else
                info "$check"
                info "      * kubeconfig file not found"
              fi        
        remediation: Run the below command (based on the file location on your system) on the each worker node. For example, chown root:root <proxy kubeconfig file>
      - id: 4.1.5
        description: Ensure that the --kubeconfig kubelet.conf file permissions are set to 644 or more restrictive (Automated)
        type: worker
        category: kubernetes
        scored: true
        profile: Level 1
        automated: false
        tags:
        - HIPAA
        - NIST
        - PCI
        - GDPR
        audit: |
              check="$id  - $description"
              file=""
              if check_argument "$CIS_KUBELET_CMD" '--kubeconfig' >/dev/null 2>&1; then
                  file=$(get_argument_value "$CIS_KUBELET_CMD" '--kubeconfig'|cut -d " " -f 1)
              fi
              file=$(append_prefix "$CONFIG_PREFIX" "$file")

              if [ -f "$file" ]; then
                if [ "$(stat -c %a $file)" -eq 644 -o "$(stat -c %a $file)" -eq 600 -o "$(stat -c %a $file)" -eq 400 ]; then
                  pass "$check"
                else
                  warn "$check"
                  warn "      * Wrong permissions for $file"
                fi
              else
                info "$check"
                info "      * File not found"
              fi        
        remediation: Run the below command (based on the file location on your system) on the each worker node. For example, chmod 644 /etc/kubernetes/kubelet.conf
      - id: 4.1.6
        description: Ensure that the kubelet.conf file ownership is set to root:root (Manual)
        type: worker
        category: kubernetes
        scored: true
        profile: Level 1
        automated: false
        tags:
        - HIPAA
        - NIST
        - PCI
        - GDPR
        audit: |
              check="$id  - $description"
              file=""
              if check_argument "$CIS_KUBELET_CMD" '--kubeconfig' >/dev/null 2>&1; then
                  file=$(get_argument_value "$CIS_KUBELET_CMD" '--kubeconfig'|cut -d " " -f 1)
              fi
              file=$(append_prefix "$CONFIG_PREFIX" "$file")
                         
              if [ -f "$file" ]; then
                if [ "$(stat -c %u%g $file)" -eq 00 ]; then
                  pass "$check"
                else
                  warn "$check"
                  warn "      * Wrong ownership for $file"
                fi
              else
                info "$check"
              fi
        remediation: Run the below command (based on the file location on your system) on the each worker node. For example, chown root:root /etc/kubernetes/kubelet.conf
      - id: 4.1.7
        description: Ensure that the certificate authorities file permissions are set to 644 or more restrictive (Manual)
        type: worker
        category: kubernetes
        scored: true
        profile: Level 1
        automated: true
        tags:
        - HIPAA
        - NIST
        - PCI
        - GDPR
        audit: |
              check="$id  - $description"
              if check_argument "$CIS_KUBELET_CMD" '--client-ca-file' >/dev/null 2>&1; then
                file=$(get_argument_value "$CIS_KUBELET_CMD" '--client-ca-file')
                file=$(append_prefix "$CONFIG_PREFIX" "$file")
                if [ "$(stat -c %a $file)" -eq 644 -o "$(stat -c %a $file)" -eq 600 -o "$(stat -c %a $file)" -eq 400 ]; then
                  pass "$check"
                  pass "      * client-ca-file: $file"
                else
                  warn "$check"
                  warn "      * Wrong permissions for $file"
                fi
              else
                info "$check"
                info "      * --client-ca-file not set"
              fi
        remediation: Run the following command to modify the file permissions of the --client-ca-file chmod 644 <filename>
      - id: 4.1.8
        description: Ensure that the client certificate authorities file ownership is set to root:root (Manual)
        type: worker
        category: kubernetes
        scored: true
        profile: Level 1
        automated: true
        tags:
        - HIPAA
        - NIST
        - PCI
        - GDPR
        audit: |
              check="$id  - $description"
              if check_argument "$CIS_KUBELET_CMD" '--client-ca-file' >/dev/null 2>&1; then
                file=$(get_argument_value "$CIS_KUBELET_CMD" '--client-ca-file')
                file=$(append_prefix "$CONFIG_PREFIX" "$file")
                if [ "$(stat -c %u%g $file)" -eq 00 ]; then
                  pass "$check"
                  pass "      * client-ca-file: $file"
                else
                  warn "$check"
                  warn "      * Wrong ownership for $file"
                fi
              else
                info "$check"
                info "      * --client-ca-file not set"
              fi 
        remediation: Run the following command to modify the ownership of the --client-ca-file. chown root:root <filename>
      - id: 4.1.9
        description: Ensure that the kubelet configuration file has permissions set to 644 or more restrictive (Automated)
        type: worker
        category: kubernetes
        scored: true
        profile: Level 1
        automated: true
        tags:
        - HIPAA
        - NIST
        - PCI
        - GDPR
        audit: |
              check="$id  - $description"
              if check_argument "$CIS_KUBELET_CMD" '--config' >/dev/null 2>&1; then
                file=$(get_argument_value "$CIS_KUBELET_CMD" '--config')
                file=$(append_prefix "$CONFIG_PREFIX" "$file")
                if [ "$(stat -c %a $file)" -eq 644 -o "$(stat -c %a $file)" -eq 600 -o "$(stat -c %a $file)" -eq 400 ]; then
                  pass "$check"
                  pass "      * kubelet configuration file: $file"
                else
                  warn "$check"
                  warn "      * Wrong permissions for $file"
                fi
              else
                info "$check"
                info "      * kubelet configuration file not set"
              fi
        remediation: Run the following command (using the config file location identied in the Audit step) chmod 644 /var/lib/kubelet/config.yaml
      - id: 4.1.10
        description: Ensure that the kubelet configuration file ownership is set to root:root (Automated)
        type: worker
        category: kubernetes
        scored: true
        profile: Level 1
        automated: true
        tags:
        - HIPAA
        - NIST
        - PCI
        - GDPR
        audit: |
              check="$id  - $description"
              if check_argument "$CIS_KUBELET_CMD" '--config' >/dev/null 2>&1; then
                file=$(get_argument_value "$CIS_KUBELET_CMD" '--config')
                file=$(append_prefix "$CONFIG_PREFIX" "$file")
                if [ "$(stat -c %u%g $file)" -eq 00 ]; then
                  pass "$check"
                  pass "      * kubelet configuration file: $file"
                else
                  warn "$check"
                  warn "      * Wrong ownership for $file"
                fi
              else
                info "$check"
                info "      * kubelet configuration file not set"
              fi
        remediation: Run the following command (using the config file location identied in the Audit step) chown root:root /etc/kubernetes/kubelet.conf
  - id: 4.2
    title: "4.2 - Kubelet"
    checks:
      - id: 4.2.1
        description: Ensure that the --anonymous-auth argument is set to false (Automated)
        type: worker
        category: kubernetes
        scored: true
        profile: Level 1
        automated: true
        tags:
        - HIPAA
        - NIST
        - PCI
        - GDPR
        audit: |
              check="$id  - $description"
              if check_argument "$CIS_KUBELET_CMD" '--anonymous-auth=false' >/dev/null 2>&1; then
                  pass "$check"
              else
                  warn "$check"
              fi
        remediation: 'If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to false. If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable. --anonymous-auth=false Based on your system, restart the kubelet service. For example:  systemctl daemon-reload systemctl restart kubelet.service'
      - id: 4.2.2
        description: Ensure that the --authorization-mode argument is not set to AlwaysAllow (Automated)
        type: worker
        category: kubernetes
        scored: true
        profile: Level 1
        automated: true
        tags:
        - HIPAA
        - NIST
        - PCI
        - GDPR
        audit: |
              check="$id  - $description"
              if check_argument "$CIS_KUBELET_CMD" '--authorization-mode=AlwaysAllow' >/dev/null 2>&1; then
                  warn "$check"
              else
                  pass "$check"
              fi
        remediation: 'If using a Kubelet config file, edit the file to set authorization: mode to Webhook. If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_AUTHZ_ARGS variable. --authorization-mode=Webhook Based on your system, restart the kubelet service. For example:  systemctl daemon-reload systemctl restart kubelet.service'
      - id: 4.2.3
        description: Ensure that the --client-ca-file argument is set as appropriate (Automated)
        type: worker
        category: kubernetes
        scored: true
        profile: Level 1
        automated: true
        tags:
        - HIPAA
        - NIST
        - PCI
        - GDPR
        audit: |
              check="$id  - $description"
              if check_argument "$CIS_KUBELET_CMD" '--client-ca-file' >/dev/null 2>&1; then
                  cafile=$(get_argument_value "$CIS_KUBELET_CMD" '--client-ca-file')
                  cafile=$(append_prefix "$CONFIG_PREFIX" "$cafile")
                  pass "$check"
                  pass "      * client-ca-file: $cafile"
              else
                  warn "$check"
              fi        
        remediation: 'If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to the location of the client CA file. If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_AUTHZ_ARGS variable. --client-ca-file=<path/to/client-ca-file> Based on your system, restart the kubelet service. For example:  systemctl daemon-reload systemctl restart kubelet.service'
      - id: 4.2.4
        description: Ensure that the --read-only-port argument is set to 0 (Manual)
        type: worker
        category: kubernetes
        scored: true
        profile: Level 1
        automated: true
        tags:
        - HIPAA
        - NIST
        - PCI
        - GDPR
        audit: |
              check="$id  - $description"
              if check_argument "$CIS_KUBELET_CMD" '--read-only-port' >/dev/null 2>&1; then
                  port=$(get_argument_value "$CIS_KUBELET_CMD" '--read-only-port' | cut -d " " -f 1)
                  if [ $port = "0" ]; then
                      pass "$check"
                  else
                      warn "$check"
                      warn "      * read-only-port: $port"
                  fi
              else
                  warn "$check"
              fi        
        remediation: 'If using a Kubelet config file, edit the file to set readOnlyPort to 0. If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable. --read-only-port=0 Based on your system, restart the kubelet service. For example:  systemctl daemon-reload systemctl restart kubelet.service'
      - id: 4.2.5
        description: Ensure that the --streaming-connection-idle-timeout argument is not set to 0 (Manual)
        type: worker
        category: kubernetes
        scored: true
        profile: Level 1
        automated: true
        tags: []
        audit: |
              check="$id  - $description"
              if check_argument "$CIS_KUBELET_CMD" '--streaming-connection-idle-timeout=0' >/dev/null 2>&1; then
                  timeout=$(get_argument_value "$CIS_KUBELET_CMD" '--streaming-connection-idle-timeout')
                  warn "$check"
                  warn "      * streaming-connection-idle-timeout: $timeout"
              else
                  pass "$check"
              fi        
        remediation: 'If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a value other than 0. If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable. --streaming-connection-idle-timeout=5m Based on your system, restart the kubelet service. For example:  systemctl daemon-reload systemctl restart kubelet.service'
      - id: 4.2.6
        description: Ensure that the --protect-kernel-defaults argument is set to true (Automated)
        type: worker
        category: kubernetes
        scored: true
        profile: Level 1
        automated: false
        tags:
        - HIPAA
        - NIST
        - PCI
        - GDPR
        audit: |
              check="$id  - $description"
              if check_argument "$CIS_KUBELET_CMD" '--protect-kernel-defaults=true' >/dev/null 2>&1; then
                  pass "$check"
              else
                  warn "$check"
              fi
        remediation: 'If using a Kubelet config file, edit the file to set protectKernelDefaults: true. If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable. --protect-kernel-defaults=true Based on your system, restart the kubelet service. For example:  systemctl daemon-reload systemctl restart kubelet.service'
      - id: 4.2.7
        description: Ensure that the --make-iptables-util-chains argument is set to true (Automated)
        type: worker
        category: kubernetes
        scored: true
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              if check_argument "$CIS_KUBELET_CMD" '--make-iptables-util-chains=true' >/dev/null 2>&1; then
                  pass "$check"
              else
                  warn "$check"
              fi        
        remediation: 'If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true. If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and remove the --make-iptables-util-chains argument from the KUBELET_SYSTEM_PODS_ARGS variable. Based on your system, restart the kubelet service. For example:  systemctl daemon-reload systemctl restart kubelet.service'
      - id: 4.2.8
        description: Ensure that the --hostname-override argument is not set (Manual)
        type: worker
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags: []
        audit: |
              check="$id  - $description"
              if check_argument "$CIS_KUBELET_CMD" '--hostname-override' >/dev/null 2>&1; then
                  warn "$check"
              else
                  pass "$check"
              fi        
        remediation: 'Edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and remove the --hostname-override argument from the KUBELET_SYSTEM_PODS_ARGS variable. Based on your system, restart the kubelet service. For example:  systemctl daemon-reload systemctl restart kubelet.service'
      - id: 4.2.9
        description: Ensure that the --event-qps argument is set to 0 or a level which ensures appropriate event capture (Manual)
        type: worker
        category: kubernetes
        scored: false
        profile: Level 2
        automated: true
        tags: []
        audit: |
              check="$id  - $description"
              if check_argument "$CIS_KUBELET_CMD" '--event-qps=0' >/dev/null 2>&1; then
                  pass "$check"
              else
                  warn "$check"
              fi        
        remediation: 'If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level. If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable. Based on your system, restart the kubelet service. For example:  systemctl daemon-reload systemctl restart kubelet.service'
      - id: 4.2.10
        description: Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate (Manual)
        type: worker
        category: kubernetes
        scored: true
        profile: Level 1
        automated: true
        tags:
        - HIPAA
        - NIST
        - PCI
        - GDPR
        audit: |
              check="$id  - $description"
              if check_argument "$CIS_KUBELET_CMD" '--tls-cert-file' >/dev/null 2>&1; then
                  if check_argument "$CIS_KUBELET_CMD" '--tls-private-key-file' >/dev/null 2>&1; then
                      cfile=$(get_argument_value "$CIS_KUBELET_CMD" '--tls-cert-file')
                      kfile=$(get_argument_value "$CIS_KUBELET_CMD" '--tls-private-key-file')
                      cfile=$(append_prefix "$CONFIG_PREFIX" "$cfile")
                      kfile=$(append_prefix "$CONFIG_PREFIX" "$kfile")
                      pass "$check"
                      pass "      * tls-cert-file: $cfile"
                      pass "      * tls-private-key-file: $kfile"
                  else
                    warn "$check"
                  fi
              else
                  warn "$check"
              fi        
        remediation: 'If using a Kubelet config file, edit the file to set tlsCertFile to the location of the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile to the location of the corresponding private key file. If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameters in KUBELET_CERTIFICATE_ARGS variable.  --tls-cert-file=<path/to/tls-certificate-file> --tls-private-key-file=<path/to/tls-key-file> Based on your system, restart the kubelet service. For example:  systemctl daemon-reload systemctl restart kubelet.service'
      - id: 4.2.11
        description: Ensure that the --rotate-certificates argument is not set to false (Manual)
        type: worker
        category: kubernetes
        scored: true
        profile: Level 1
        automated: false
        tags:
        - HIPAA
        - NIST
        - PCI
        - GDPR
        audit: |
              check="$id  - $description"
              if check_argument "$CIS_KUBELET_CMD" '--event-qps' >/dev/null 2>&1; then
                  event=$(get_argument_value "$CIS_KUBELET_CMD" '--event-qps' | cut -d " " -f 1)
                  if [ $event = "0" ]; then
                      pass "$check"
                  else
                      warn "$check"
                      warn "      * event-qps: $event"
                  fi
              else
                  warn "$check"
              fi        
        remediation: 'If using a Kubelet config file, edit the file to add the line rotateCertificates: true or remove it altogether to use the default value. If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and remove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS variable. Based on your system, restart the kubelet service. For example: systemctl daemon-reload systemctl restart kubelet.service'
      - id: 4.2.12
        description: Ensure that the RotateKubeletServerCertificate argument is set to true (Manual)
        type: worker
        category: kubernetes
        scored: true
        profile: Level 1
        automated: false
        tags:
        - HIPAA
        - NIST
        - PCI
        - GDPR
        audit: |
              check="$id  - $description"
              file="/etc/systemd/system/kubelet.service.d/10-kubeadm.conf"
              file=$(append_prefix "$CONFIG_PREFIX" "$file")
              found=$(sed -rn '/--feature-gates=RotateKubeletServerCertificate=true/p' $file)
              if [ -z "$found" ]; then
                  warn "$check"
              else
                  pass "$check"
              fi
        remediation: 'On the master edit /var/lib/kubelet/kubeadm-flags.env and set the parameter KUBELET_CERTIFICATE_ARGS --feature-gates=RotateKubeletServerCertificate=true or as an alternative, and suggested as a last resort, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable. --feature-gates=RotateKubeletServerCertificate=true Based on your system, restart the kubelet service. For example:  systemctl daemon-reload systemctl restart kubelet.service'
      - id: 4.2.13
        description: Ensure that the Kubelet only makes use of Strong Cryptographic Ciphers (Manual)
        type: worker
        category: kubernetes
        scored: false
        profile: Level 1
        automated: false
        tags:
        - HIPAA
        - NIST
        - PCI
        - GDPR
        audit: |
              check="$id  - $description"
              success=1
              SECURE_CIPHERS="TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305 TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_RSA_WITH_AES_256_GCM_SHA384 TLS_RSA_WITH_AES_128_GCM_SHA256"

              # Function to check if a string is in the space-separated list
              contains_element () {
                  for element in $2; do
                      [ "$element" = "$1" ] && return 0
                  done
                  return 1
              }

              if check_argument "$CIS_KUBELET_CMD" '--tls-cipher-suites' >/dev/null 2>&1; then
                  suit=$(get_argument_value "$CIS_KUBELET_CMD" '--tls-cipher-suites' | cut -d " " -f 1)
                  # Split the cipher suites into a space-separated string
                  ciphers_string=$(echo "$suit" | tr ',' ' ')

                  # Check each cipher
                  for cipher in $ciphers_string; do
                      if ! contains_element "$cipher" "$SECURE_CIPHERS"; then
                          warn "$check"
                          warn "      * Non-compliant cipher: $cipher"
                          success=0
                          break
                      fi
                  done
              fi

              if [ "$success" -eq 1 ]; then
                  pass "$check"
              fi
        remediation: |
                    If using a Kubelet config file, edit the file to set TLSCipherSuites: to TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 ,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
                    ,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256 or to a subset of these values.   
                    If using executable arguments, edit the kubelet service file /etc/kubernetes/kubelet.conf on each worker node and set the --tls-cipher-suites parameter as follows, or to a subset of these values.                 
                    --tls-ciphe-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256
                    Based on your system, restart the kubelet service. For example:
                    systemctl daemon-reload 
                    systemctl restart kubelet.service     