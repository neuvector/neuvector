#!/bin/sh

if [ -n "$nocolor" ] && [ "$nocolor" = "nocolor" ]; then
  bldred=''
  bldgrn=''
  bldblu=''
  bldylw=''
  txtrst=''
else
  bldred='\033[1;31m'
  bldgrn='\033[1;32m'
  bldblu='\033[1;34m'
  bldylw='\033[1;33m'
  txtrst='\033[0m'
fi

info () {
  printf "%b\n" "${bldblu}[INFO]${txtrst} $1"
}

pass () {
  printf "%b\n" "${bldgrn}[PASS]${txtrst} $1"
}

warn () {
  printf "%b\n" "${bldred}[WARN]${txtrst} $1"
}

yell () {
  printf "%b\n" "${bldylw}$1${txtrst}\n"
}

yell "# ------------------------------------------------------------------------------
# Kubernetes CIS benchmark
#
# NeuVector, Inc. (c) 2016-
#
# NeuVector delivers an application and network intelligent container security
# solution that automatically adapts to protect running containers. Donâ€™t let
# security concerns slow down your CI/CD processes.
# ------------------------------------------------------------------------------"

BASE_IMAGE_BIN_PATH="<<<.Replace_baseImageBin_path>>>"
export PATH="$PATH:$BASE_IMAGE_BIN_PATH/usr/bin:$BASE_IMAGE_BIN_PATH/bin"
export LD_LIBRARY_PATH="$BASE_IMAGE_BIN_PATH/bin:$LD_LIBRARY_PATH"
CONFIG_PREFIX="<<<.Replace_configPrefix_path>>>"

#get a process command line from /proc
get_command_line_args() {
    PROC="$1"
    len=${#PROC}
    if [ $len -gt 15 ]; then
		ps aux|grep  "$CMD "|grep -v "grep" |sed "s/.*$CMD \(.*\)/\1/g"
    else
        for PID in $(pgrep -n "$PROC")
        do
            tr "\0" " " < /proc/"$PID"/cmdline
        done
    fi
}

#get an argument value from command line
get_argument_value() {
    CMD="$1"
    OPTION="$2"

    get_command_line_args "$CMD" |
    sed \
        -e 's/\-\-/\n--/g' \
        |
    grep "^${OPTION}" |
    sed \
        -E "s/^${OPTION}(=|\s+)//g"
}

#check whether an argument exist in command line
check_argument() {
    CMD="$1"
    OPTION="$2"

    get_command_line_args "$CMD" |
    sed \
        -e 's/\-\-/\n--/g' \
        |
    grep "^${OPTION}" 
}

append_prefix() {
  local prefix="$1"
  local file="$2"

  # Remove any trailing slash from prefix
  prefix="${prefix%/}"

  # Remove a leading slash from file, if it exists
  file="${file#/}"

  # Concatenate and return the result
  echo "$prefix/$file"
}
CIS_APISERVER_CMD="<<<.Replace_apiserver_cmd>>>"
CIS_MANAGER_CMD="<<<.Replace_manager_cmd>>>"
CIS_SCHEDULER_CMD="<<<.Replace_scheduler_cmd>>>"
CIS_ETCD_CMD="<<<.Replace_etcd_cmd>>>"

if ps -ef | grep "$CIS_APISERVER_CMD" 2>/dev/null | grep -v "grep" >/dev/null 2>&1; then
	info "Kubernetes Master Node Security Configuration"
else
	info "This node is not a Kubernetes master node"
	exit 2
fi

info "1.1 - API Server"

check_1_1_1="1.1.1  - Ensure that the --allow-privileged argument is set to false"
if check_argument "$CIS_APISERVER_CMD" '--allow-privileged=false' >/dev/null 2>&1; then
    pass "$check_1_1_1"
else
    warn "$check_1_1_1"
fi

check_1_1_2="1.1.2  - Ensure that the --anonymous-auth argument is set to false"
if check_argument "$CIS_APISERVER_CMD" '--anonymous-auth=false' >/dev/null 2>&1; then
    pass "$check_1_1_2"
else
    warn "$check_1_1_2"
fi

check_1_1_3="1.1.3  - Ensure that the --basic-auth-file argument is not set"
if check_argument "$CIS_APISERVER_CMD" '--basic-auth-file' >/dev/null 2>&1; then
    warn "$check_1_1_3"
else
    pass "$check_1_1_3"
fi

check_1_1_4="1.1.4  - Ensure that the --insecure-allow-any-token argument is not set"
if check_argument "$CIS_APISERVER_CMD" '--insecure-allow-any-token' >/dev/null 2>&1; then
    warn "$check_1_1_4"
else
    pass "$check_1_1_4"
fi

check_1_1_5="1.1.5  - Ensure that the --kubelet-https argument is set to true"
if check_argument "$CIS_APISERVER_CMD" '--kubelet-https=false' >/dev/null 2>&1; then
    warn "$check_1_1_5"
else
    pass "$check_1_1_5"
fi

check_1_1_6="1.1.6  - Ensure that the --insecure-bind-address argument is not set"
if check_argument "$CIS_APISERVER_CMD" '--insecure-bind-address' >/dev/null 2>&1; then
    address=$(get_argument_value "$CIS_APISERVER_CMD" '--insecure-bind-address'|cut -d " " -f 1)
    if [ "$address" = "127.0.0.1" ]; then
        pass "$check_1_1_6"
        pass "       * insecure-bind-address: $address"
    else
        warn "$check_1_1_6"
        warn "       * insecure-bind-address: $address"
    fi
else
    pass "$check_1_1_6"
fi

check_1_1_7="1.1.7  - Ensure that the --insecure-port argument is set to 0"
if check_argument "$CIS_APISERVER_CMD" '--insecure-port' >/dev/null 2>&1; then
    port=$(get_argument_value "$CIS_APISERVER_CMD" '--insecure-port'|cut -d " " -f 1)
    if [ "$port" = "0" ]; then
        pass "$check_1_1_7"
    else
        warn "$check_1_1_7"
        warn "       * insecure-port: $port"
    fi
else
    warn "$check_1_1_7"
fi

check_1_1_8="1.1.8  - Ensure that the --secure-port argument is not set to 0"
if check_argument "$CIS_APISERVER_CMD" '--secure-port' >/dev/null 2>&1; then
    port=$(get_argument_value "$CIS_APISERVER_CMD" '--secure-port'|cut -d " " -f 1)
    if [ "$port" = "0" ]; then
        warn "$check_1_1_8"
        warn "       * secure-port: $port"
    else
        pass "$check_1_1_8"
    fi
else
    pass "$check_1_1_8"
fi

check_1_1_9="1.1.9  - Ensure that the --profiling argument is set to false"
if check_argument "$CIS_APISERVER_CMD" '--profiling=false' >/dev/null 2>&1; then
    pass "$check_1_1_9"
else
    warn "$check_1_1_9"
fi

check_1_1_10="1.1.10  - Ensure that the --repair-malformed-updates argument is set to false"
if check_argument "$CIS_APISERVER_CMD" '--repair-malformed-updates=false' >/dev/null 2>&1; then
    pass "$check_1_1_10"
else
    warn "$check_1_1_10"
fi

check_1_1_11="1.1.11  - Ensure that the admission control policy is not set to AlwaysAdmit"
if get_argument_value "$CIS_APISERVER_CMD" '--admission-control'| grep 'AlwaysAdmit' >/dev/null 2>&1; then
    warn "$check_1_1_11"
else
    pass "$check_1_1_11"
fi

check_1_1_12="1.1.12  - Ensure that the admission control policy is set to AlwaysPullImages"
if get_argument_value "$CIS_APISERVER_CMD" '--admission-control'| grep 'AlwaysPullImages' >/dev/null 2>&1; then
    pass "$check_1_1_12"
else
    warn "$check_1_1_12"
fi

check_1_1_13="1.1.13  - Ensure that the admission control policy is set to DenyEscalatingExec"
if get_argument_value "$CIS_APISERVER_CMD" '--admission-control'| grep 'DenyEscalatingExec' >/dev/null 2>&1; then
    pass "$check_1_1_13"
else
    warn "$check_1_1_13"
fi

check_1_1_14="1.1.14  - Ensure that the admission control policy is set to SecurityContextDeny"
if get_argument_value "$CIS_APISERVER_CMD" '--admission-control'| grep 'SecurityContextDeny' >/dev/null 2>&1; then
    pass "$check_1_1_14"
else
    warn "$check_1_1_14"
fi

check_1_1_15="1.1.15  - Ensure that the admission control policy is set to NamespaceLifecycle"
if get_argument_value "$CIS_APISERVER_CMD" '--admission-control'| grep 'NamespaceLifecycle' >/dev/null 2>&1; then
    pass "$check_1_1_15"
else
    warn "$check_1_1_15"
fi

check_1_1_16="1.1.16  - Ensure that the --audit-log-path argument is set as appropriate"
if check_argument "$CIS_APISERVER_CMD" '--audit-log-path' >/dev/null 2>&1; then
    pass "$check_1_1_16"
else
    warn "$check_1_1_16"
fi

check_1_1_17="1.1.17  - Ensure that the --audit-log-maxage argument is set to 30 or as appropriate"
if check_argument "$CIS_APISERVER_CMD" '--audit-log-maxage' >/dev/null 2>&1; then
    maxage=$(get_argument_value "$CIS_APISERVER_CMD" '--audit-log-maxage'|cut -d " " -f 1)
    if [ "$maxage" = "30" ]; then
        pass "$check_1_1_17"
        pass "        * audit-log-maxage: $maxage"
    else
        warn "$check_1_1_17"
        warn "        * audit-log-maxage: $maxage"
    fi
else
    warn "$check_1_1_17"
fi

check_1_1_18="1.1.18  - Ensure that the --audit-log-maxbackup argument is set to 10 or as appropriate"
if check_argument "$CIS_APISERVER_CMD" '--audit-log-maxbackup' >/dev/null 2>&1; then
    maxbackup=$(get_argument_value "$CIS_APISERVER_CMD" '--audit-log-maxbackup'|cut -d " " -f 1)
    if [ "$maxbackup" = "10" ]; then
        pass "$check_1_1_18"
        pass "        * audit-log-maxbackup: $maxbackup"
    else
        warn "$check_1_1_18"
        warn "        * audit-log-maxbackup: $maxbackup"
    fi
else
    warn "$check_1_1_18"
fi

check_1_1_19="1.1.19  - Ensure that the --audit-log-maxsize argument is set to 100 or as appropriate"
if check_argument "$CIS_APISERVER_CMD" '--audit-log-maxsize' >/dev/null 2>&1; then
    maxsize=$(get_argument_value "$CIS_APISERVER_CMD" '--audit-log-maxsize'|cut -d " " -f 1)
    if [ "$maxsize" = "100" ]; then
        pass "$check_1_1_19"
        pass "        * audit-log-maxsize: $maxsize"
    else
        warn "$check_1_1_19"
        warn "        * audit-log-maxsize: $maxsize"
    fi
else
    warn "$check_1_1_19"
fi

check_1_1_20="1.1.20  - Ensure that the --authorization-mode argument is not set to AlwaysAllow"
if get_argument_value "$CIS_APISERVER_CMD" '--authorization-mode'| grep 'AlwaysAllow' >/dev/null 2>&1; then
    warn "$check_1_1_20"
else
    pass "$check_1_1_20"
fi

check_1_1_21="1.1.21  - Ensure that the --token-auth-file parameter is not set"
if check_argument "$CIS_APISERVER_CMD" '--token-auth-file' >/dev/null 2>&1; then
    warn "$check_1_1_21"
else
    pass "$check_1_1_21"
fi

check_1_1_22="1.1.22  - Ensure that the --kubelet-certificate-authority argument is set as appropriate"
if check_argument "$CIS_APISERVER_CMD" '--kubelet-certificate-authority' >/dev/null 2>&1; then
    pass "$check_1_1_22"
else
    warn "$check_1_1_22"
fi

check_1_1_23="1.1.23  - Ensure that the --kubelet-client-certificate and --kubelet-client-key arguments are set as appropriate"
if check_argument "$CIS_APISERVER_CMD" '--kubelet-client-certificate' >/dev/null 2>&1; then
    if check_argument "$CIS_APISERVER_CMD" '--kubelet-client-key' >/dev/null 2>&1; then
        certificate=$(get_argument_value "$CIS_APISERVER_CMD" '--kubelet-client-certificate')
        key=$(get_argument_value "$CIS_APISERVER_CMD" '--kubelet-client-key')
        pass "$check_1_1_23"
        pass "       * kubelet-client-certificate: $certificate"
        pass "       * kubelet-client-key: $key"
    else
        warn "$check_1_1_23"
    fi
else
    warn "$check_1_1_23"
fi

check_1_1_24="1.1.24  - Ensure that the --service-account-lookup argument is set to true"
if check_argument "$CIS_APISERVER_CMD" '--service-account-lookup' >/dev/null 2>&1; then
    pass "$check_1_1_24"
else
    warn "$check_1_1_24"
fi

check_1_1_25="1.1.25  - Ensure that the admission control policy is set to PodSecurityPolicy"
if get_argument_value "$CIS_APISERVER_CMD" '--admission-control'| grep 'PodSecurityPolicy' >/dev/null 2>&1; then
    pass "$check_1_1_25"
else
    warn "$check_1_1_25"
fi

check_1_1_26="1.1.26  - Ensure that the --service-account-key-file argument is set as appropriate"
if check_argument "$CIS_APISERVER_CMD" '--service-account-key-file' >/dev/null 2>&1; then
    file=$(get_argument_value "$CIS_APISERVER_CMD" '--service-account-key-file')
    file=$(append_prefix "$CONFIG_PREFIX" "$file")
    pass "$check_1_1_26"
    pass "        * service-account-key-file: $file"
else
    warn "$check_1_1_26"
fi

check_1_1_27="1.1.27  - Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate"
if check_argument "$CIS_APISERVER_CMD" '--etcd-certfile' >/dev/null 2>&1; then
    if check_argument "$CIS_APISERVER_CMD" '--etcd-keyfile' >/dev/null 2>&1; then
        certfile=$(get_argument_value "$CIS_APISERVER_CMD" '--etcd-certfile')
        keyfile=$(get_argument_value "$CIS_APISERVER_CMD" '--etcd-keyfile')
        certfile=$(append_prefix "$CONFIG_PREFIX" "$certfile")
        keyfile=$(append_prefix "$CONFIG_PREFIX" "$keyfile")
        pass "$check_1_1_27"
        pass "        * etcd-certfile: $certfile"
        pass "        * etcd-keyfile: $keyfile"
    else
        warn "$check_1_1_27"
    fi
else
    warn "$check_1_1_27"
fi

check_1_1_28="1.1.28  - Ensure that the admission control policy is set to ServiceAccount"
if get_argument_value "$CIS_APISERVER_CMD" '--admission-control'| grep 'ServiceAccount' >/dev/null 2>&1; then
    pass "$check_1_1_28"
else
    warn "$check_1_1_28"
fi

check_1_1_29="1.1.29  - Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate"
if check_argument "$CIS_APISERVER_CMD" '--tls-cert-file' >/dev/null 2>&1; then
    if check_argument "$CIS_APISERVER_CMD" '--tls-private-key-file' >/dev/null 2>&1; then
        certfile=$(get_argument_value "$CIS_APISERVER_CMD" '--tls-cert-file')
        keyfile=$(get_argument_value "$CIS_APISERVER_CMD" '--tls-private-key-file')
        pass "$check_1_1_29"
        pass "        * tls-cert-file: $certfile"
        pass "        * tls-private-key-file: $keyfile"
    else
        warn "$check_1_1_29"
    fi
else
    warn "$check_1_1_29"
fi

check_1_1_30="1.1.30  - Ensure that the --client-ca-file argument is set as appropriate"
if check_argument "$CIS_APISERVER_CMD" '--client-ca-file' >/dev/null 2>&1; then
    cafile=$(get_argument_value "$CIS_APISERVER_CMD" '--client-ca-file')
    cafile=$(append_prefix "$CONFIG_PREFIX" "$cafile")
    pass "$check_1_1_30"
    pass "        * client-ca-file: $cafile"
else
    warn "$check_1_1_30"
fi

check_1_1_31="1.1.31  - Ensure that the --etcd-cafile argument is set as appropriate"
if check_argument "$CIS_APISERVER_CMD" '--etcd-cafile' >/dev/null 2>&1; then
    cafile=$(get_argument_value "$CIS_APISERVER_CMD" '--etcd-cafile')
    cafile=$(append_prefix "$CONFIG_PREFIX" "$cafile")
    pass "$check_1_1_31"
    pass "        * etcd-cafile: $cafile"
else
    warn "$check_1_1_31"
fi

check_1_1_32="1.1.32  - Ensure that the admission control policy is set to NodeRestriction"
if get_argument_value "$CIS_APISERVER_CMD" '--admission-control'| grep 'NodeRestriction' >/dev/null 2>&1; then
    pass "$check_1_1_32"
else
    warn "$check_1_1_32"
fi

check_1_1_33="1.1.33  - Ensure that the --experimental-encryption-provider-config argument is set as appropriate"
if get_argument_value "$CIS_APISERVER_CMD" '--experimental-encryption-provider-config'| grep 'EncryptionConfig' >/dev/null 2>&1; then
    pass "$check_1_1_33"
else
    warn "$check_1_1_33"
fi

check_1_1_34="1.1.34  - Ensure that the encryption provider is set to aescbc"
if get_argument_value "$CIS_APISERVER_CMD" '--experimental-encryption-provider-config'| grep 'EncryptionConfig' >/dev/null 2>&1; then
    encryptionConfig=$(get_argument_value "$CIS_APISERVER_CMD" '--experimental-encryption-provider-config')
    if sed ':a;N;$!ba;s/\n/ /g' $encryptionConfig |grep "providers:\s* - aescbc" >/dev/null 2>&1; then
        pass "$check_1_1_34"
    else
        warn "$check_1_1_34"
    fi
else
    warn "$check_1_1_34"
fi
info "1.2 - Scheduler"

check_1_2_1="1.2.1  - Ensure that the --profiling argument is set to false"
if check_argument "$CIS_SCHEDULER_CMD" '--profiling=false' >/dev/null 2>&1; then
  	pass "$check_1_2_1"
else
  	warn "$check_1_2_1"
fi

info "1.3 - Controller Manager"

check_1_3_1="1.3.1  - Ensure that the --terminated-pod-gc-threshold argument is set as appropriate"
if check_argument "$CIS_MANAGER_CMD" '--terminated-pod-gc-threshold' >/dev/null 2>&1; then
    threshold=$(get_argument_value "$CIS_MANAGER_CMD" '--terminated-pod-gc-threshold')
    pass "$check_1_3_1"
    pass "       * terminated-pod-gc-threshold: $threshold"
else
    warn "$check_1_3_1"
fi

check_1_3_2="1.3.2  - Ensure that the --profiling argument is set to false"
if check_argument "$CIS_MANAGER_CMD" '--profiling=false' >/dev/null 2>&1; then
    pass "$check_1_3_2"
else
    warn "$check_1_3_2"
fi

check_1_3_3="1.3.3  - Ensure that the --insecure-experimental-approve-all-kubelet-csrs-for-group argument is not set"
if check_argument "$CIS_MANAGER_CMD" '--insecure-experimental-approve-all-kubelet-csrs-for-group' >/dev/null 2>&1; then
    warn "$check_1_3_3"
else
    pass "$check_1_3_3"
fi

check_1_3_4="1.3.4  - Ensure that the --use-service-account-credentials argument is set to true"
if check_argument "$CIS_MANAGER_CMD" '--use-service-account-credentials' >/dev/null 2>&1; then
    pass "$check_1_3_4"
else
    warn "$check_1_3_4"
fi

check_1_3_5="1.3.5  - Ensure that the --service-account-private-key-file argument is set as appropriate"
if check_argument "$CIS_MANAGER_CMD" '--service-account-private-key-file' >/dev/null 2>&1; then
    keyfile=$(get_argument_value "$CIS_MANAGER_CMD" '--service-account-private-key-file')
    keyfile=$(append_prefix "$CONFIG_PREFIX" "$keyfile")
    pass "$check_1_3_5"
    pass "       * service-account-private-key-file: $keyfile"
else
    warn "$check_1_3_5"
fi

check_1_3_6="1.3.6  - Ensure that the --root-ca-file argument is set as appropriate"
if check_argument "$CIS_MANAGER_CMD" '--root-ca-file' >/dev/null 2>&1; then
    cafile=$(get_argument_value "$CIS_MANAGER_CMD" '--root-ca-file')
    cafile=$(append_prefix "$CONFIG_PREFIX" "$cafile")
    pass "$check_1_3_6"
    pass "       * root-ca-file: $cafile"
else
    warn "$check_1_3_6"
fi
info "1.4 - Configuration Files"

check_1_4_1="1.4.1  - Ensure that the apiserver file permissions are set to 644 or more restrictive"
config_json=$(append_prefix "$CONFIG_PREFIX" "/etc/kubernetes/manifests/kube-apiserver.json")
config_yaml=$(append_prefix "$CONFIG_PREFIX" "/etc/kubernetes/manifests/kube-apiserver.yaml")
if [ -f $config_json ]; then
    file=$config_json
else
    file=$config_yaml
fi

if [ -f $file ]; then
  if [ "$(stat -c %a $file)" -eq 644 -o "$(stat -c %a $file)" -eq 640 -o "$(stat -c %a $file)" -eq 600 ]; then
    pass "$check_1_4_1"
  else
    warn "$check_1_4_1"
    warn "     * Wrong permissions for $file"
  fi
else
  info "$check_1_4_1"
  info "     * File not found"
fi

check_1_4_2="1.4.2  - Ensure that the apiserver file ownership is set to root:root"
if [ -f $file ]; then
  if [ "$(stat -c %u%g $file)" -eq 00 ]; then
    pass "$check_1_4_2"
  else
    warn "$check_1_4_2"
    warn "     * Wrong ownership for $file"
  fi
else
  info "$check_1_4_2"
fi

check_1_4_3="1.4.3  - Ensure that the config file permissions are set to 644 or more restrictive"
file="/etc/kubernetes/admin.conf"
file=$(append_prefix "$CONFIG_PREFIX" "$file")

if [ -f $file ]; then
  if [ "$(stat -c %a $file)" -eq 644 -o "$(stat -c %a $file)" -eq 640 -o "$(stat -c %a $file)" -eq 600 ]; then
    pass "$check_1_4_3"
  else
    warn "$check_1_4_3"
    warn "     * Wrong permissions for $file"
  fi
else
  info "$check_1_4_3"
  info "     * File not found"
fi

check_1_4_4="1.4.4  - Ensure that the config file ownership is set to root:root"
file="/etc/kubernetes/admin.conf"
file=$(append_prefix "$CONFIG_PREFIX" "$file")

if [ -f $file ]; then
  if [ "$(stat -c %u%g $file)" -eq 00 ]; then
    pass "$check_1_4_4"
  else
    warn "$check_1_4_4"
    warn "     * Wrong ownership for $file"
  fi
else
  info "$check_1_4_4"
  info "     * File not found"
fi

check_1_4_5="1.4.5  - Ensure that the scheduler file permissions are set to 644 or more restrictive"
config_json=$(append_prefix "$CONFIG_PREFIX" "/etc/kubernetes/manifests/kube-scheduler.json")
config_yaml=$(append_prefix "$CONFIG_PREFIX" "/etc/kubernetes/manifests/kube-scheduler.yaml")
if [ -f $config_json ]; then
    file=$config_json
else
    file=$config_yaml
fi

if [ -f $file ]; then
  if [ "$(stat -c %a $file)" -eq 644 -o "$(stat -c %a $file)" -eq 640 -o "$(stat -c %a $file)" -eq 600 ]; then
    pass "$check_1_4_5"
  else
    warn "$check_1_4_5"
    warn "     * Wrong permissions for $file"
  fi
else
  info "$check_1_4_5"
  info "     * File not found"
fi

check_1_4_6="1.4.6  - Ensure that the scheduler file ownership is set to root:root"
if [ -f $file ]; then
  if [ "$(stat -c %u%g $file)" -eq 00 ]; then
    pass "$check_1_4_6"
  else
    warn "$check_1_4_6"
    warn "     * Wrong ownership for $file"
  fi
else
  info "$check_1_4_6"
  info "     * File not found"
fi

check_1_4_7="1.4.7  - Ensure that the etcd.conf file permissions are set to 644 or more restrictive"
config_json=$(append_prefix "$CONFIG_PREFIX" "/etc/kubernetes/manifests/etcd.json")
config_yaml=$(append_prefix "$CONFIG_PREFIX" "/etc/kubernetes/manifests/etcd.yaml")
if [ -f $config_json ]; then
    file=$config_json
else
    file=$config_yaml
fi

if [ -f $file ]; then
  if [ "$(stat -c %a $file)" -eq 644 -o "$(stat -c %a $file)" -eq 640 -o "$(stat -c %a $file)" -eq 600 ]; then
    pass "$check_1_4_7"
  else
    warn "$check_1_4_7"
    warn "     * Wrong permissions for $file"
  fi
else
  info "$check_1_4_7"
  info "     * File not found"
fi

check_1_4_8="1.4.8  - Ensure that the etcd.conf file ownership is set to root:root"
if [ -f $file ]; then
  if [ "$(stat -c %u%g $file)" -eq 00 ]; then
    pass "$check_1_4_8"
  else
    warn "$check_1_4_8"
    warn "     * Wrong ownership for $file"
  fi
else
  info "$check_1_4_8"
fi

#TODO
check_1_4_9="1.4.9  - Ensure that the flanneld file permissions are set to 644 or more restrictive"
check_1_4_10="1.4.10  - Ensure that the flanneld file ownership is set to root:root"
check_1_4_11="1.4.11  - Ensure that the etcd data directory permissions are set to 700 or more restrictive"
directory=$(get_argument_value "$CIS_ETCD_CMD" '--data-dir')
if [ -d "$directory" ]; then
  if [ "$(stat -c %a $directory)" -eq 700 ]; then
    pass "$check_1_4_11"
  else
    warn "$check_1_4_11"
    perm=$(stat -c %a $directory)
    warn "     * Wrong permissions for $directory:$perm"
  fi
else
  warn "$check_1_4_11"
  warn "     * Directory not found:$directory"
fi

check_1_4_12="1.4.12  - Ensure that the etcd data directory ownership is set to etcd:etcd"
directory=$(get_argument_value "$CIS_ETCD_CMD" '--data-dir')
if [ -d "$directory" ]; then
  if [ "$(stat -c %U:%G $directory)" = "etcd:etcd" ]; then
    pass "$check_1_4_12"
  else
    warn "$check_1_4_12"
    owner=$(stat -c %U:%G $directory)
    warn "     * Wrong ownership for $directory:$owner"
  fi
else
  warn "$check_1_4_12"
  warn "     * Directory not found:$directory"
fi
info "1.5 - etcd"

check_1_5_1="1.5.1  - Ensure that the --cert-file and --key-file arguments are set as appropriate (Scored)"
if check_argument "$CIS_ETCD_CMD" '--cert-file' >/dev/null 2>&1; then
    if check_argument "$CIS_ETCD_CMD" '--key-file' >/dev/null 2>&1; then
        cfile=$(get_argument_value "$CIS_ETCD_CMD" '--cert-file')
        kfile=$(get_argument_value "$CIS_ETCD_CMD" '--key-file')
        cfile=$(append_prefix "$CONFIG_PREFIX" "$cfile")
        kfile=$(append_prefix "$CONFIG_PREFIX" "$kfile")
        pass "$check_1_5_1"
        pass "       * cert-file: $cfile"
        pass "       * key-file: $kfile"
    else
      warn "$check_1_5_1"
    fi
else
    warn "$check_1_5_1"
fi

check_1_5_2="1.5.2  - Ensure that the --client-cert-auth argument is set to true (Scored)"
if check_argument "$CIS_ETCD_CMD" '--client-cert-auth' >/dev/null 2>&1; then
    pass "$check_1_5_2"
else
    warn "$check_1_5_2"
fi

check_1_5_3="1.5.3  - Ensure that the --auto-tls argument is not set to true (Scored)"
if check_argument "$CIS_ETCD_CMD" '--auto-tls=tru' >/dev/null 2>&1; then
    warn "$check_1_5_3"
else
    pass "$check_1_5_3"
fi

check_1_5_4="1.5.4  - Ensure that the --peer-cert-file and --peer-key-file arguments are set as appropriate (Scored)"
if check_argument "$CIS_ETCD_CMD" '--peer-cert-file' >/dev/null 2>&1; then
    if check_argument "$CIS_ETCD_CMD" '--peer-key-file' >/dev/null 2>&1; then
        cfile=$(get_argument_value "$CIS_ETCD_CMD" '--peer-cert-file')
        kfile=$(get_argument_value "$CIS_ETCD_CMD" '--peer-key-file')
        cfile=$(append_prefix "$CONFIG_PREFIX" "$cfile")
        kfile=$(append_prefix "$CONFIG_PREFIX" "$kfile")
        pass "$check_1_5_4"
        pass "       * peer-cert-file: $cfile"
        pass "       * peer-key-file: $kfile"
    else
          warn "$check_1_5_4"
    fi
else
    warn "$check_1_5_4"
fi

check_1_5_5="1.5.5  - Ensure that the --peer-client-cert-auth argument is set to true (Scored)"
if check_argument "$CIS_ETCD_CMD" '--peer-client-cert-auth' >/dev/null 2>&1; then
    pass "$check_1_5_5"
else
    warn "$check_1_5_5"
fi

check_1_5_6="1.5.6  - Ensure that the --peer-auto-tls argument is not set to true (Scored)"
if check_argument "$CIS_ETCD_CMD" '--peer-auto-tls=true' >/dev/null 2>&1; then
    warn "$check_1_5_6"
else
    pass "$check_1_5_6"
fi

check_1_5_7="1.5.7  - Ensure that the --wal-dir argument is set as appropriate (Scored)"
if check_argument "$CIS_ETCD_CMD" '--wal-dir' >/dev/null 2>&1; then
    wdir=$(get_argument_value "$CIS_ETCD_CMD" '--wal-dir')
    pass "$check_1_5_7"
    pass "       * wal-dir: $wdir"
else
    warn "$check_1_5_7"
fi

check_1_5_8="1.5.8  - Ensure that the --max-wals argument is set to 0 (Scored)"
if check_argument "$CIS_ETCD_CMD" '--max-wals=0' >/dev/null 2>&1; then
    pass "$check_1_5_8"
else
    warn "$check_1_5_8"
fi

#TODO
check_1_5_9="1.5.9  - Ensure that a unique Certificate Authority is used for etcd (Not Scored)"
info "1.6 - General Security Primitives"

# Make the loop separator be a new-line in POSIX compliant fashion
set -f; IFS=$'
'

check_1_6_1="1.6.1  - Ensure that the cluster-admin role is only used where required(Not Scored)"
cluster_admins=$(kubectl get clusterrolebindings -o=custom-columns=NAME:.metadata.name,ROLE:.roleRef.name,SUBJECT:.subjects[*].name)
info $check_1_6_1
for admin in $cluster_admins; do
 	info "     * $admin"
done

check_1_6_2="1.6.2  - Create Pod Security Policies for your cluster (Not Scored)"
policies=$(kubectl get psp)
info $check_1_6_2
for policy in $policies; do
	  info "     * $policy"
done

check_1_6_3="1.6.3  - Create administrative boundaries between resources using namespaces (Not Scored)"
namespaces=$(kubectl get namespaces)
info $check_1_6_3
for namespace in $namespaces; do
	info "     * $namespace"
done

check_1_6_4="1.6.4  - Create network segmentation using Network Policies (Not Scored)"
policies=$(kubectl get pods --namespace=kube-system)
info $check_1_6_4
for policy in $policies; do
	info "     * $policy"
done

check_1_6_5="1.6.5  - Avoid using Kubernetes Secrets (Not Scored)"
secrets=$(kubectl get secrets)
info $check_1_6_5
for secret in $secrets; do
	info "     * $secret"
done

#TODO
check_1_6_6="1.6.6  - Ensure that the seccomp profile is set to docker/default in your pod definitions (Not Scored)"
info $check_1_6_6
check_1_6_7="1.6.7  - Apply Security Context to Your Pods and Containers (Not Scored)"
info $check_1_6_7
check_1_6_8="1.6.8  - Configure Image Provenance using ImagePolicyWebhook admission controller (Not Scored)"
info $check_1_6_8
exit 0;
